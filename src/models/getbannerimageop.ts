/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetBannerImageRequest = {
    /**
     * the id of the library item to return the children of.
     */
    ratingKey: number;
    width: number;
    height: number;
    minSize: number;
    upscale: number;
    /**
     * Plex Authentication Token
     */
    xPlexToken: string;
};

export type GetBannerImageErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetBannerImageResponseBodyData = {
    errors?: Array<GetBannerImageErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetBannerImageResponseBody extends Error {
    errors?: Array<GetBannerImageErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetBannerImageResponseBodyData;

    constructor(err: GetBannerImageResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetBannerImageResponseBody";
    }
}

export type GetBannerImageResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response returning an image
     */
    responseStream?: ReadableStream<Uint8Array> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export const GetBannerImageRequest$inboundSchema: z.ZodType<
    GetBannerImageRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ratingKey: z.number().int(),
        width: z.number().int(),
        height: z.number().int(),
        minSize: z.number().int(),
        upscale: z.number().int(),
        "X-Plex-Token": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Plex-Token": "xPlexToken",
        });
    });

/** @internal */
export type GetBannerImageRequest$Outbound = {
    ratingKey: number;
    width: number;
    height: number;
    minSize: number;
    upscale: number;
    "X-Plex-Token": string;
};

/** @internal */
export const GetBannerImageRequest$outboundSchema: z.ZodType<
    GetBannerImageRequest$Outbound,
    z.ZodTypeDef,
    GetBannerImageRequest
> = z
    .object({
        ratingKey: z.number().int(),
        width: z.number().int(),
        height: z.number().int(),
        minSize: z.number().int(),
        upscale: z.number().int(),
        xPlexToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            xPlexToken: "X-Plex-Token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBannerImageRequest$ {
    /** @deprecated use `GetBannerImageRequest$inboundSchema` instead. */
    export const inboundSchema = GetBannerImageRequest$inboundSchema;
    /** @deprecated use `GetBannerImageRequest$outboundSchema` instead. */
    export const outboundSchema = GetBannerImageRequest$outboundSchema;
    /** @deprecated use `GetBannerImageRequest$Outbound` instead. */
    export type Outbound = GetBannerImageRequest$Outbound;
}

/** @internal */
export const GetBannerImageErrors$inboundSchema: z.ZodType<
    GetBannerImageErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type GetBannerImageErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetBannerImageErrors$outboundSchema: z.ZodType<
    GetBannerImageErrors$Outbound,
    z.ZodTypeDef,
    GetBannerImageErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBannerImageErrors$ {
    /** @deprecated use `GetBannerImageErrors$inboundSchema` instead. */
    export const inboundSchema = GetBannerImageErrors$inboundSchema;
    /** @deprecated use `GetBannerImageErrors$outboundSchema` instead. */
    export const outboundSchema = GetBannerImageErrors$outboundSchema;
    /** @deprecated use `GetBannerImageErrors$Outbound` instead. */
    export type Outbound = GetBannerImageErrors$Outbound;
}

/** @internal */
export const GetBannerImageResponseBody$inboundSchema: z.ZodType<
    GetBannerImageResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetBannerImageErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetBannerImageResponseBody(remapped);
    });

/** @internal */
export type GetBannerImageResponseBody$Outbound = {
    errors?: Array<GetBannerImageErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetBannerImageResponseBody$outboundSchema: z.ZodType<
    GetBannerImageResponseBody$Outbound,
    z.ZodTypeDef,
    GetBannerImageResponseBody
> = z
    .instanceof(GetBannerImageResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetBannerImageErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBannerImageResponseBody$ {
    /** @deprecated use `GetBannerImageResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetBannerImageResponseBody$inboundSchema;
    /** @deprecated use `GetBannerImageResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetBannerImageResponseBody$outboundSchema;
    /** @deprecated use `GetBannerImageResponseBody$Outbound` instead. */
    export type Outbound = GetBannerImageResponseBody$Outbound;
}

/** @internal */
export const GetBannerImageResponse$inboundSchema: z.ZodType<
    GetBannerImageResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        "response-stream": z.instanceof(ReadableStream<Uint8Array>).optional(),
        Headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            "response-stream": "responseStream",
            Headers: "headers",
        });
    });

/** @internal */
export type GetBannerImageResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "response-stream"?: ReadableStream<Uint8Array> | undefined;
    Headers: { [k: string]: Array<string> };
};

/** @internal */
export const GetBannerImageResponse$outboundSchema: z.ZodType<
    GetBannerImageResponse$Outbound,
    z.ZodTypeDef,
    GetBannerImageResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        responseStream: z.instanceof(ReadableStream<Uint8Array>).optional(),
        headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            responseStream: "response-stream",
            headers: "Headers",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBannerImageResponse$ {
    /** @deprecated use `GetBannerImageResponse$inboundSchema` instead. */
    export const inboundSchema = GetBannerImageResponse$inboundSchema;
    /** @deprecated use `GetBannerImageResponse$outboundSchema` instead. */
    export const outboundSchema = GetBannerImageResponse$outboundSchema;
    /** @deprecated use `GetBannerImageResponse$Outbound` instead. */
    export type Outbound = GetBannerImageResponse$Outbound;
}
