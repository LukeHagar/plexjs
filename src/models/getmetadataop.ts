/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { RFCDate } from "../types/rfcdate.js";
import * as z from "zod";

export type GetMetadataRequest = {
    /**
     * the id of the library item to return the children of.
     */
    ratingKey: number;
};

export type GetMetadataErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetMetadataLibraryResponseBodyData = {
    errors?: Array<GetMetadataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetMetadataLibraryResponseBody extends Error {
    errors?: Array<GetMetadataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetMetadataLibraryResponseBodyData;

    constructor(err: GetMetadataLibraryResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetMetadataLibraryResponseBody";
    }
}

export type Stream = {
    id?: number | undefined;
    streamType?: number | undefined;
    default?: boolean | undefined;
    codec?: string | undefined;
    index?: number | undefined;
    bitrate?: number | undefined;
    bitDepth?: number | undefined;
    chromaLocation?: string | undefined;
    chromaSubsampling?: string | undefined;
    codedHeight?: number | undefined;
    codedWidth?: number | undefined;
    colorPrimaries?: string | undefined;
    colorRange?: string | undefined;
    colorSpace?: string | undefined;
    colorTrc?: string | undefined;
    frameRate?: number | undefined;
    hasScalingMatrix?: boolean | undefined;
    height?: number | undefined;
    level?: number | undefined;
    profile?: string | undefined;
    refFrames?: number | undefined;
    scanType?: string | undefined;
    streamIdentifier?: string | undefined;
    width?: number | undefined;
    displayTitle?: string | undefined;
    extendedDisplayTitle?: string | undefined;
    selected?: boolean | undefined;
    channels?: number | undefined;
    language?: string | undefined;
    languageTag?: string | undefined;
    languageCode?: string | undefined;
    samplingRate?: number | undefined;
};

export type GetMetadataPart = {
    id?: number | undefined;
    key?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    size?: number | undefined;
    audioProfile?: string | undefined;
    container?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    optimizedForStreaming?: boolean | undefined;
    videoProfile?: string | undefined;
    stream?: Array<Stream> | undefined;
};

export type GetMetadataMedia = {
    id?: number | undefined;
    duration?: number | undefined;
    bitrate?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    aspectRatio?: number | undefined;
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    videoCodec?: string | undefined;
    videoResolution?: string | undefined;
    container?: string | undefined;
    videoFrameRate?: string | undefined;
    optimizedForStreaming?: number | undefined;
    audioProfile?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    videoProfile?: string | undefined;
    part?: Array<GetMetadataPart> | undefined;
};

export type GetMetadataGenre = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

export type GetMetadataCountry = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

export type Guids = {
    id?: string | undefined;
};

export type Ratings = {
    image?: string | undefined;
    value?: number | undefined;
    type?: string | undefined;
};

export type GetMetadataDirector = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

export type GetMetadataWriter = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

export type GetMetadataRole = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    role?: string | undefined;
    thumb?: string | undefined;
};

export type Producer = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

export type GetMetadataMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    studio?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionKey?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    rating?: number | undefined;
    audienceRating?: number | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: RFCDate | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    audienceRatingImage?: string | undefined;
    hasPremiumPrimaryExtra?: string | undefined;
    ratingImage?: string | undefined;
    media?: Array<GetMetadataMedia> | undefined;
    genre?: Array<GetMetadataGenre> | undefined;
    country?: Array<GetMetadataCountry> | undefined;
    guids?: Array<Guids> | undefined;
    ratings?: Array<Ratings> | undefined;
    director?: Array<GetMetadataDirector> | undefined;
    writer?: Array<GetMetadataWriter> | undefined;
    role?: Array<GetMetadataRole> | undefined;
    producer?: Array<Producer> | undefined;
};

export type GetMetadataMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionUUID?: string | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    metadata?: Array<GetMetadataMetadata> | undefined;
};

/**
 * The metadata of the library item.
 */
export type GetMetadataResponseBody = {
    mediaContainer?: GetMetadataMediaContainer | undefined;
};

export type GetMetadataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The metadata of the library item.
     */
    object?: GetMetadataResponseBody | undefined;
};

/** @internal */
export namespace GetMetadataRequest$ {
    export const inboundSchema: z.ZodType<GetMetadataRequest, z.ZodTypeDef, unknown> = z.object({
        ratingKey: z.number(),
    });

    export type Outbound = {
        ratingKey: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataRequest> = z.object({
        ratingKey: z.number(),
    });
}

/** @internal */
export namespace GetMetadataErrors$ {
    export const inboundSchema: z.ZodType<GetMetadataErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetMetadataLibraryResponseBody$ {
    export const inboundSchema: z.ZodType<GetMetadataLibraryResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.array(z.lazy(() => GetMetadataErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetMetadataLibraryResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetMetadataErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataLibraryResponseBody> =
        z
            .instanceof(GetMetadataLibraryResponseBody)
            .transform((v) => v.data$)
            .pipe(
                z
                    .object({
                        errors: z.array(z.lazy(() => GetMetadataErrors$.outboundSchema)).optional(),
                        rawResponse: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                    })
                    .transform((v) => {
                        return remap$(v, {
                            rawResponse: "RawResponse",
                        });
                    })
            );
}

/** @internal */
export namespace Stream$ {
    export const inboundSchema: z.ZodType<Stream, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        streamType: z.number().int().optional(),
        default: z.boolean().optional(),
        codec: z.string().optional(),
        index: z.number().int().optional(),
        bitrate: z.number().int().optional(),
        bitDepth: z.number().int().optional(),
        chromaLocation: z.string().optional(),
        chromaSubsampling: z.string().optional(),
        codedHeight: z.number().int().optional(),
        codedWidth: z.number().int().optional(),
        colorPrimaries: z.string().optional(),
        colorRange: z.string().optional(),
        colorSpace: z.string().optional(),
        colorTrc: z.string().optional(),
        frameRate: z.number().int().optional(),
        hasScalingMatrix: z.boolean().optional(),
        height: z.number().int().optional(),
        level: z.number().int().optional(),
        profile: z.string().optional(),
        refFrames: z.number().int().optional(),
        scanType: z.string().optional(),
        streamIdentifier: z.string().optional(),
        width: z.number().int().optional(),
        displayTitle: z.string().optional(),
        extendedDisplayTitle: z.string().optional(),
        selected: z.boolean().optional(),
        channels: z.number().int().optional(),
        language: z.string().optional(),
        languageTag: z.string().optional(),
        languageCode: z.string().optional(),
        samplingRate: z.number().int().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        streamType?: number | undefined;
        default?: boolean | undefined;
        codec?: string | undefined;
        index?: number | undefined;
        bitrate?: number | undefined;
        bitDepth?: number | undefined;
        chromaLocation?: string | undefined;
        chromaSubsampling?: string | undefined;
        codedHeight?: number | undefined;
        codedWidth?: number | undefined;
        colorPrimaries?: string | undefined;
        colorRange?: string | undefined;
        colorSpace?: string | undefined;
        colorTrc?: string | undefined;
        frameRate?: number | undefined;
        hasScalingMatrix?: boolean | undefined;
        height?: number | undefined;
        level?: number | undefined;
        profile?: string | undefined;
        refFrames?: number | undefined;
        scanType?: string | undefined;
        streamIdentifier?: string | undefined;
        width?: number | undefined;
        displayTitle?: string | undefined;
        extendedDisplayTitle?: string | undefined;
        selected?: boolean | undefined;
        channels?: number | undefined;
        language?: string | undefined;
        languageTag?: string | undefined;
        languageCode?: string | undefined;
        samplingRate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Stream> = z.object({
        id: z.number().int().optional(),
        streamType: z.number().int().optional(),
        default: z.boolean().optional(),
        codec: z.string().optional(),
        index: z.number().int().optional(),
        bitrate: z.number().int().optional(),
        bitDepth: z.number().int().optional(),
        chromaLocation: z.string().optional(),
        chromaSubsampling: z.string().optional(),
        codedHeight: z.number().int().optional(),
        codedWidth: z.number().int().optional(),
        colorPrimaries: z.string().optional(),
        colorRange: z.string().optional(),
        colorSpace: z.string().optional(),
        colorTrc: z.string().optional(),
        frameRate: z.number().int().optional(),
        hasScalingMatrix: z.boolean().optional(),
        height: z.number().int().optional(),
        level: z.number().int().optional(),
        profile: z.string().optional(),
        refFrames: z.number().int().optional(),
        scanType: z.string().optional(),
        streamIdentifier: z.string().optional(),
        width: z.number().int().optional(),
        displayTitle: z.string().optional(),
        extendedDisplayTitle: z.string().optional(),
        selected: z.boolean().optional(),
        channels: z.number().int().optional(),
        language: z.string().optional(),
        languageTag: z.string().optional(),
        languageCode: z.string().optional(),
        samplingRate: z.number().int().optional(),
    });
}

/** @internal */
export namespace GetMetadataPart$ {
    export const inboundSchema: z.ZodType<GetMetadataPart, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            duration: z.number().int().optional(),
            file: z.string().optional(),
            size: z.number().int().optional(),
            audioProfile: z.string().optional(),
            container: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            optimizedForStreaming: z.boolean().optional(),
            videoProfile: z.string().optional(),
            Stream: z.array(z.lazy(() => Stream$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Stream: "stream",
            });
        });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        duration?: number | undefined;
        file?: string | undefined;
        size?: number | undefined;
        audioProfile?: string | undefined;
        container?: string | undefined;
        has64bitOffsets?: boolean | undefined;
        optimizedForStreaming?: boolean | undefined;
        videoProfile?: string | undefined;
        Stream?: Array<Stream$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataPart> = z
        .object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            duration: z.number().int().optional(),
            file: z.string().optional(),
            size: z.number().int().optional(),
            audioProfile: z.string().optional(),
            container: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            optimizedForStreaming: z.boolean().optional(),
            videoProfile: z.string().optional(),
            stream: z.array(z.lazy(() => Stream$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                stream: "Stream",
            });
        });
}

/** @internal */
export namespace GetMetadataMedia$ {
    export const inboundSchema: z.ZodType<GetMetadataMedia, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int().optional(),
            duration: z.number().int().optional(),
            bitrate: z.number().int().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            optimizedForStreaming: z.number().int().optional(),
            audioProfile: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            videoProfile: z.string().optional(),
            Part: z.array(z.lazy(() => GetMetadataPart$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Part: "part",
            });
        });

    export type Outbound = {
        id?: number | undefined;
        duration?: number | undefined;
        bitrate?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        aspectRatio?: number | undefined;
        audioChannels?: number | undefined;
        audioCodec?: string | undefined;
        videoCodec?: string | undefined;
        videoResolution?: string | undefined;
        container?: string | undefined;
        videoFrameRate?: string | undefined;
        optimizedForStreaming?: number | undefined;
        audioProfile?: string | undefined;
        has64bitOffsets?: boolean | undefined;
        videoProfile?: string | undefined;
        Part?: Array<GetMetadataPart$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataMedia> = z
        .object({
            id: z.number().int().optional(),
            duration: z.number().int().optional(),
            bitrate: z.number().int().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            optimizedForStreaming: z.number().int().optional(),
            audioProfile: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            videoProfile: z.string().optional(),
            part: z.array(z.lazy(() => GetMetadataPart$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                part: "Part",
            });
        });
}

/** @internal */
export namespace GetMetadataGenre$ {
    export const inboundSchema: z.ZodType<GetMetadataGenre, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataGenre> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
    });
}

/** @internal */
export namespace GetMetadataCountry$ {
    export const inboundSchema: z.ZodType<GetMetadataCountry, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataCountry> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
    });
}

/** @internal */
export namespace Guids$ {
    export const inboundSchema: z.ZodType<Guids, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
    });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Guids> = z.object({
        id: z.string().optional(),
    });
}

/** @internal */
export namespace Ratings$ {
    export const inboundSchema: z.ZodType<Ratings, z.ZodTypeDef, unknown> = z.object({
        image: z.string().optional(),
        value: z.number().optional(),
        type: z.string().optional(),
    });

    export type Outbound = {
        image?: string | undefined;
        value?: number | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ratings> = z.object({
        image: z.string().optional(),
        value: z.number().optional(),
        type: z.string().optional(),
    });
}

/** @internal */
export namespace GetMetadataDirector$ {
    export const inboundSchema: z.ZodType<GetMetadataDirector, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
        tagKey?: string | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataDirector> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });
}

/** @internal */
export namespace GetMetadataWriter$ {
    export const inboundSchema: z.ZodType<GetMetadataWriter, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
        tagKey?: string | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataWriter> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });
}

/** @internal */
export namespace GetMetadataRole$ {
    export const inboundSchema: z.ZodType<GetMetadataRole, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        role: z.string().optional(),
        thumb: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
        tagKey?: string | undefined;
        role?: string | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataRole> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        role: z.string().optional(),
        thumb: z.string().optional(),
    });
}

/** @internal */
export namespace Producer$ {
    export const inboundSchema: z.ZodType<Producer, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
        tagKey?: string | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Producer> = z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });
}

/** @internal */
export namespace GetMetadataMetadata$ {
    export const inboundSchema: z.ZodType<GetMetadataMetadata, z.ZodTypeDef, unknown> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionKey: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            rating: z.number().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            hasPremiumPrimaryExtra: z.string().optional(),
            ratingImage: z.string().optional(),
            Media: z.array(z.lazy(() => GetMetadataMedia$.inboundSchema)).optional(),
            Genre: z.array(z.lazy(() => GetMetadataGenre$.inboundSchema)).optional(),
            Country: z.array(z.lazy(() => GetMetadataCountry$.inboundSchema)).optional(),
            guids: z.array(z.lazy(() => Guids$.inboundSchema)).optional(),
            ratings: z.array(z.lazy(() => Ratings$.inboundSchema)).optional(),
            Director: z.array(z.lazy(() => GetMetadataDirector$.inboundSchema)).optional(),
            Writer: z.array(z.lazy(() => GetMetadataWriter$.inboundSchema)).optional(),
            Role: z.array(z.lazy(() => GetMetadataRole$.inboundSchema)).optional(),
            Producer: z.array(z.lazy(() => Producer$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Media: "media",
                Genre: "genre",
                Country: "country",
                Director: "director",
                Writer: "writer",
                Role: "role",
                Producer: "producer",
            });
        });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        studio?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionID?: number | undefined;
        librarySectionKey?: string | undefined;
        contentRating?: string | undefined;
        summary?: string | undefined;
        rating?: number | undefined;
        audienceRating?: number | undefined;
        year?: number | undefined;
        tagline?: string | undefined;
        thumb?: string | undefined;
        art?: string | undefined;
        duration?: number | undefined;
        originallyAvailableAt?: string | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        audienceRatingImage?: string | undefined;
        hasPremiumPrimaryExtra?: string | undefined;
        ratingImage?: string | undefined;
        Media?: Array<GetMetadataMedia$.Outbound> | undefined;
        Genre?: Array<GetMetadataGenre$.Outbound> | undefined;
        Country?: Array<GetMetadataCountry$.Outbound> | undefined;
        guids?: Array<Guids$.Outbound> | undefined;
        ratings?: Array<Ratings$.Outbound> | undefined;
        Director?: Array<GetMetadataDirector$.Outbound> | undefined;
        Writer?: Array<GetMetadataWriter$.Outbound> | undefined;
        Role?: Array<GetMetadataRole$.Outbound> | undefined;
        Producer?: Array<Producer$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataMetadata> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionKey: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            rating: z.number().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            hasPremiumPrimaryExtra: z.string().optional(),
            ratingImage: z.string().optional(),
            media: z.array(z.lazy(() => GetMetadataMedia$.outboundSchema)).optional(),
            genre: z.array(z.lazy(() => GetMetadataGenre$.outboundSchema)).optional(),
            country: z.array(z.lazy(() => GetMetadataCountry$.outboundSchema)).optional(),
            guids: z.array(z.lazy(() => Guids$.outboundSchema)).optional(),
            ratings: z.array(z.lazy(() => Ratings$.outboundSchema)).optional(),
            director: z.array(z.lazy(() => GetMetadataDirector$.outboundSchema)).optional(),
            writer: z.array(z.lazy(() => GetMetadataWriter$.outboundSchema)).optional(),
            role: z.array(z.lazy(() => GetMetadataRole$.outboundSchema)).optional(),
            producer: z.array(z.lazy(() => Producer$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                media: "Media",
                genre: "Genre",
                country: "Country",
                director: "Director",
                writer: "Writer",
                role: "Role",
                producer: "Producer",
            });
        });
}

/** @internal */
export namespace GetMetadataMediaContainer$ {
    export const inboundSchema: z.ZodType<GetMetadataMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionUUID: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            Metadata: z.array(z.lazy(() => GetMetadataMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        identifier?: string | undefined;
        librarySectionID?: number | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionUUID?: string | undefined;
        mediaTagPrefix?: string | undefined;
        mediaTagVersion?: number | undefined;
        Metadata?: Array<GetMetadataMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionUUID: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            metadata: z.array(z.lazy(() => GetMetadataMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace GetMetadataResponseBody$ {
    export const inboundSchema: z.ZodType<GetMetadataResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetMetadataMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetMetadataMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetMetadataMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetMetadataResponse$ {
    export const inboundSchema: z.ZodType<GetMetadataResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetMetadataResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetMetadataResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetadataResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetMetadataResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
