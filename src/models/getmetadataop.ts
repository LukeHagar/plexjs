/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { RFCDate } from "../types/rfcdate.js";
import * as z from "zod";

export type GetMetadataRequest = {
    /**
     * the id of the library item to return the children of.
     */
    ratingKey: number;
};

export type GetMetadataErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetMetadataLibraryResponseBodyData = {
    errors?: Array<GetMetadataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetMetadataLibraryResponseBody extends Error {
    errors?: Array<GetMetadataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetMetadataLibraryResponseBodyData;

    constructor(err: GetMetadataLibraryResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetMetadataLibraryResponseBody";
    }
}

export type Stream = {
    id?: number | undefined;
    streamType?: number | undefined;
    default?: boolean | undefined;
    codec?: string | undefined;
    index?: number | undefined;
    bitrate?: number | undefined;
    bitDepth?: number | undefined;
    chromaLocation?: string | undefined;
    chromaSubsampling?: string | undefined;
    codedHeight?: number | undefined;
    codedWidth?: number | undefined;
    colorPrimaries?: string | undefined;
    colorRange?: string | undefined;
    colorSpace?: string | undefined;
    colorTrc?: string | undefined;
    frameRate?: number | undefined;
    hasScalingMatrix?: boolean | undefined;
    height?: number | undefined;
    level?: number | undefined;
    profile?: string | undefined;
    refFrames?: number | undefined;
    scanType?: string | undefined;
    streamIdentifier?: string | undefined;
    width?: number | undefined;
    displayTitle?: string | undefined;
    extendedDisplayTitle?: string | undefined;
    selected?: boolean | undefined;
    channels?: number | undefined;
    language?: string | undefined;
    languageTag?: string | undefined;
    languageCode?: string | undefined;
    samplingRate?: number | undefined;
};

export type GetMetadataPart = {
    id?: number | undefined;
    key?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    size?: number | undefined;
    audioProfile?: string | undefined;
    container?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    optimizedForStreaming?: boolean | undefined;
    videoProfile?: string | undefined;
    stream?: Array<Stream> | undefined;
};

export type GetMetadataMedia = {
    id?: number | undefined;
    duration?: number | undefined;
    bitrate?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    aspectRatio?: number | undefined;
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    videoCodec?: string | undefined;
    videoResolution?: string | undefined;
    container?: string | undefined;
    videoFrameRate?: string | undefined;
    optimizedForStreaming?: number | undefined;
    audioProfile?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    videoProfile?: string | undefined;
    part?: Array<GetMetadataPart> | undefined;
};

export type GetMetadataGenre = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

export type GetMetadataCountry = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

export type Guids = {
    id?: string | undefined;
};

export type Ratings = {
    image?: string | undefined;
    value?: number | undefined;
    type?: string | undefined;
};

export type GetMetadataDirector = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

export type GetMetadataWriter = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

export type GetMetadataRole = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    role?: string | undefined;
    thumb?: string | undefined;
};

export type Producer = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

export type GetMetadataMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    studio?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionKey?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    rating?: number | undefined;
    audienceRating?: number | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: RFCDate | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    audienceRatingImage?: string | undefined;
    hasPremiumPrimaryExtra?: string | undefined;
    ratingImage?: string | undefined;
    media?: Array<GetMetadataMedia> | undefined;
    genre?: Array<GetMetadataGenre> | undefined;
    country?: Array<GetMetadataCountry> | undefined;
    guids?: Array<Guids> | undefined;
    ratings?: Array<Ratings> | undefined;
    director?: Array<GetMetadataDirector> | undefined;
    writer?: Array<GetMetadataWriter> | undefined;
    role?: Array<GetMetadataRole> | undefined;
    producer?: Array<Producer> | undefined;
};

export type GetMetadataMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionUUID?: string | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    metadata?: Array<GetMetadataMetadata> | undefined;
};

/**
 * The metadata of the library item.
 */
export type GetMetadataResponseBody = {
    mediaContainer?: GetMetadataMediaContainer | undefined;
};

export type GetMetadataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The metadata of the library item.
     */
    object?: GetMetadataResponseBody | undefined;
};

/** @internal */
export const GetMetadataRequest$inboundSchema: z.ZodType<
    GetMetadataRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    ratingKey: z.number(),
});

/** @internal */
export type GetMetadataRequest$Outbound = {
    ratingKey: number;
};

/** @internal */
export const GetMetadataRequest$outboundSchema: z.ZodType<
    GetMetadataRequest$Outbound,
    z.ZodTypeDef,
    GetMetadataRequest
> = z.object({
    ratingKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataRequest$ {
    /** @deprecated use `GetMetadataRequest$inboundSchema` instead. */
    export const inboundSchema = GetMetadataRequest$inboundSchema;
    /** @deprecated use `GetMetadataRequest$outboundSchema` instead. */
    export const outboundSchema = GetMetadataRequest$outboundSchema;
    /** @deprecated use `GetMetadataRequest$Outbound` instead. */
    export type Outbound = GetMetadataRequest$Outbound;
}

/** @internal */
export const GetMetadataErrors$inboundSchema: z.ZodType<GetMetadataErrors, z.ZodTypeDef, unknown> =
    z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

/** @internal */
export type GetMetadataErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetMetadataErrors$outboundSchema: z.ZodType<
    GetMetadataErrors$Outbound,
    z.ZodTypeDef,
    GetMetadataErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataErrors$ {
    /** @deprecated use `GetMetadataErrors$inboundSchema` instead. */
    export const inboundSchema = GetMetadataErrors$inboundSchema;
    /** @deprecated use `GetMetadataErrors$outboundSchema` instead. */
    export const outboundSchema = GetMetadataErrors$outboundSchema;
    /** @deprecated use `GetMetadataErrors$Outbound` instead. */
    export type Outbound = GetMetadataErrors$Outbound;
}

/** @internal */
export const GetMetadataLibraryResponseBody$inboundSchema: z.ZodType<
    GetMetadataLibraryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetMetadataErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetMetadataLibraryResponseBody(remapped);
    });

/** @internal */
export type GetMetadataLibraryResponseBody$Outbound = {
    errors?: Array<GetMetadataErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetMetadataLibraryResponseBody$outboundSchema: z.ZodType<
    GetMetadataLibraryResponseBody$Outbound,
    z.ZodTypeDef,
    GetMetadataLibraryResponseBody
> = z
    .instanceof(GetMetadataLibraryResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetMetadataErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataLibraryResponseBody$ {
    /** @deprecated use `GetMetadataLibraryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetMetadataLibraryResponseBody$inboundSchema;
    /** @deprecated use `GetMetadataLibraryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetMetadataLibraryResponseBody$outboundSchema;
    /** @deprecated use `GetMetadataLibraryResponseBody$Outbound` instead. */
    export type Outbound = GetMetadataLibraryResponseBody$Outbound;
}

/** @internal */
export const Stream$inboundSchema: z.ZodType<Stream, z.ZodTypeDef, unknown> = z.object({
    id: z.number().int().optional(),
    streamType: z.number().int().optional(),
    default: z.boolean().optional(),
    codec: z.string().optional(),
    index: z.number().int().optional(),
    bitrate: z.number().int().optional(),
    bitDepth: z.number().int().optional(),
    chromaLocation: z.string().optional(),
    chromaSubsampling: z.string().optional(),
    codedHeight: z.number().int().optional(),
    codedWidth: z.number().int().optional(),
    colorPrimaries: z.string().optional(),
    colorRange: z.string().optional(),
    colorSpace: z.string().optional(),
    colorTrc: z.string().optional(),
    frameRate: z.number().int().optional(),
    hasScalingMatrix: z.boolean().optional(),
    height: z.number().int().optional(),
    level: z.number().int().optional(),
    profile: z.string().optional(),
    refFrames: z.number().int().optional(),
    scanType: z.string().optional(),
    streamIdentifier: z.string().optional(),
    width: z.number().int().optional(),
    displayTitle: z.string().optional(),
    extendedDisplayTitle: z.string().optional(),
    selected: z.boolean().optional(),
    channels: z.number().int().optional(),
    language: z.string().optional(),
    languageTag: z.string().optional(),
    languageCode: z.string().optional(),
    samplingRate: z.number().int().optional(),
});

/** @internal */
export type Stream$Outbound = {
    id?: number | undefined;
    streamType?: number | undefined;
    default?: boolean | undefined;
    codec?: string | undefined;
    index?: number | undefined;
    bitrate?: number | undefined;
    bitDepth?: number | undefined;
    chromaLocation?: string | undefined;
    chromaSubsampling?: string | undefined;
    codedHeight?: number | undefined;
    codedWidth?: number | undefined;
    colorPrimaries?: string | undefined;
    colorRange?: string | undefined;
    colorSpace?: string | undefined;
    colorTrc?: string | undefined;
    frameRate?: number | undefined;
    hasScalingMatrix?: boolean | undefined;
    height?: number | undefined;
    level?: number | undefined;
    profile?: string | undefined;
    refFrames?: number | undefined;
    scanType?: string | undefined;
    streamIdentifier?: string | undefined;
    width?: number | undefined;
    displayTitle?: string | undefined;
    extendedDisplayTitle?: string | undefined;
    selected?: boolean | undefined;
    channels?: number | undefined;
    language?: string | undefined;
    languageTag?: string | undefined;
    languageCode?: string | undefined;
    samplingRate?: number | undefined;
};

/** @internal */
export const Stream$outboundSchema: z.ZodType<Stream$Outbound, z.ZodTypeDef, Stream> = z.object({
    id: z.number().int().optional(),
    streamType: z.number().int().optional(),
    default: z.boolean().optional(),
    codec: z.string().optional(),
    index: z.number().int().optional(),
    bitrate: z.number().int().optional(),
    bitDepth: z.number().int().optional(),
    chromaLocation: z.string().optional(),
    chromaSubsampling: z.string().optional(),
    codedHeight: z.number().int().optional(),
    codedWidth: z.number().int().optional(),
    colorPrimaries: z.string().optional(),
    colorRange: z.string().optional(),
    colorSpace: z.string().optional(),
    colorTrc: z.string().optional(),
    frameRate: z.number().int().optional(),
    hasScalingMatrix: z.boolean().optional(),
    height: z.number().int().optional(),
    level: z.number().int().optional(),
    profile: z.string().optional(),
    refFrames: z.number().int().optional(),
    scanType: z.string().optional(),
    streamIdentifier: z.string().optional(),
    width: z.number().int().optional(),
    displayTitle: z.string().optional(),
    extendedDisplayTitle: z.string().optional(),
    selected: z.boolean().optional(),
    channels: z.number().int().optional(),
    language: z.string().optional(),
    languageTag: z.string().optional(),
    languageCode: z.string().optional(),
    samplingRate: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stream$ {
    /** @deprecated use `Stream$inboundSchema` instead. */
    export const inboundSchema = Stream$inboundSchema;
    /** @deprecated use `Stream$outboundSchema` instead. */
    export const outboundSchema = Stream$outboundSchema;
    /** @deprecated use `Stream$Outbound` instead. */
    export type Outbound = Stream$Outbound;
}

/** @internal */
export const GetMetadataPart$inboundSchema: z.ZodType<GetMetadataPart, z.ZodTypeDef, unknown> = z
    .object({
        id: z.number().int().optional(),
        key: z.string().optional(),
        duration: z.number().int().optional(),
        file: z.string().optional(),
        size: z.number().int().optional(),
        audioProfile: z.string().optional(),
        container: z.string().optional(),
        has64bitOffsets: z.boolean().optional(),
        optimizedForStreaming: z.boolean().optional(),
        videoProfile: z.string().optional(),
        Stream: z.array(z.lazy(() => Stream$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Stream: "stream",
        });
    });

/** @internal */
export type GetMetadataPart$Outbound = {
    id?: number | undefined;
    key?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    size?: number | undefined;
    audioProfile?: string | undefined;
    container?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    optimizedForStreaming?: boolean | undefined;
    videoProfile?: string | undefined;
    Stream?: Array<Stream$Outbound> | undefined;
};

/** @internal */
export const GetMetadataPart$outboundSchema: z.ZodType<
    GetMetadataPart$Outbound,
    z.ZodTypeDef,
    GetMetadataPart
> = z
    .object({
        id: z.number().int().optional(),
        key: z.string().optional(),
        duration: z.number().int().optional(),
        file: z.string().optional(),
        size: z.number().int().optional(),
        audioProfile: z.string().optional(),
        container: z.string().optional(),
        has64bitOffsets: z.boolean().optional(),
        optimizedForStreaming: z.boolean().optional(),
        videoProfile: z.string().optional(),
        stream: z.array(z.lazy(() => Stream$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            stream: "Stream",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataPart$ {
    /** @deprecated use `GetMetadataPart$inboundSchema` instead. */
    export const inboundSchema = GetMetadataPart$inboundSchema;
    /** @deprecated use `GetMetadataPart$outboundSchema` instead. */
    export const outboundSchema = GetMetadataPart$outboundSchema;
    /** @deprecated use `GetMetadataPart$Outbound` instead. */
    export type Outbound = GetMetadataPart$Outbound;
}

/** @internal */
export const GetMetadataMedia$inboundSchema: z.ZodType<GetMetadataMedia, z.ZodTypeDef, unknown> = z
    .object({
        id: z.number().int().optional(),
        duration: z.number().int().optional(),
        bitrate: z.number().int().optional(),
        width: z.number().int().optional(),
        height: z.number().int().optional(),
        aspectRatio: z.number().optional(),
        audioChannels: z.number().int().optional(),
        audioCodec: z.string().optional(),
        videoCodec: z.string().optional(),
        videoResolution: z.string().optional(),
        container: z.string().optional(),
        videoFrameRate: z.string().optional(),
        optimizedForStreaming: z.number().int().optional(),
        audioProfile: z.string().optional(),
        has64bitOffsets: z.boolean().optional(),
        videoProfile: z.string().optional(),
        Part: z.array(z.lazy(() => GetMetadataPart$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Part: "part",
        });
    });

/** @internal */
export type GetMetadataMedia$Outbound = {
    id?: number | undefined;
    duration?: number | undefined;
    bitrate?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    aspectRatio?: number | undefined;
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    videoCodec?: string | undefined;
    videoResolution?: string | undefined;
    container?: string | undefined;
    videoFrameRate?: string | undefined;
    optimizedForStreaming?: number | undefined;
    audioProfile?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    videoProfile?: string | undefined;
    Part?: Array<GetMetadataPart$Outbound> | undefined;
};

/** @internal */
export const GetMetadataMedia$outboundSchema: z.ZodType<
    GetMetadataMedia$Outbound,
    z.ZodTypeDef,
    GetMetadataMedia
> = z
    .object({
        id: z.number().int().optional(),
        duration: z.number().int().optional(),
        bitrate: z.number().int().optional(),
        width: z.number().int().optional(),
        height: z.number().int().optional(),
        aspectRatio: z.number().optional(),
        audioChannels: z.number().int().optional(),
        audioCodec: z.string().optional(),
        videoCodec: z.string().optional(),
        videoResolution: z.string().optional(),
        container: z.string().optional(),
        videoFrameRate: z.string().optional(),
        optimizedForStreaming: z.number().int().optional(),
        audioProfile: z.string().optional(),
        has64bitOffsets: z.boolean().optional(),
        videoProfile: z.string().optional(),
        part: z.array(z.lazy(() => GetMetadataPart$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            part: "Part",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataMedia$ {
    /** @deprecated use `GetMetadataMedia$inboundSchema` instead. */
    export const inboundSchema = GetMetadataMedia$inboundSchema;
    /** @deprecated use `GetMetadataMedia$outboundSchema` instead. */
    export const outboundSchema = GetMetadataMedia$outboundSchema;
    /** @deprecated use `GetMetadataMedia$Outbound` instead. */
    export type Outbound = GetMetadataMedia$Outbound;
}

/** @internal */
export const GetMetadataGenre$inboundSchema: z.ZodType<GetMetadataGenre, z.ZodTypeDef, unknown> =
    z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
    });

/** @internal */
export type GetMetadataGenre$Outbound = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

/** @internal */
export const GetMetadataGenre$outboundSchema: z.ZodType<
    GetMetadataGenre$Outbound,
    z.ZodTypeDef,
    GetMetadataGenre
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataGenre$ {
    /** @deprecated use `GetMetadataGenre$inboundSchema` instead. */
    export const inboundSchema = GetMetadataGenre$inboundSchema;
    /** @deprecated use `GetMetadataGenre$outboundSchema` instead. */
    export const outboundSchema = GetMetadataGenre$outboundSchema;
    /** @deprecated use `GetMetadataGenre$Outbound` instead. */
    export type Outbound = GetMetadataGenre$Outbound;
}

/** @internal */
export const GetMetadataCountry$inboundSchema: z.ZodType<
    GetMetadataCountry,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
});

/** @internal */
export type GetMetadataCountry$Outbound = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

/** @internal */
export const GetMetadataCountry$outboundSchema: z.ZodType<
    GetMetadataCountry$Outbound,
    z.ZodTypeDef,
    GetMetadataCountry
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataCountry$ {
    /** @deprecated use `GetMetadataCountry$inboundSchema` instead. */
    export const inboundSchema = GetMetadataCountry$inboundSchema;
    /** @deprecated use `GetMetadataCountry$outboundSchema` instead. */
    export const outboundSchema = GetMetadataCountry$outboundSchema;
    /** @deprecated use `GetMetadataCountry$Outbound` instead. */
    export type Outbound = GetMetadataCountry$Outbound;
}

/** @internal */
export const Guids$inboundSchema: z.ZodType<Guids, z.ZodTypeDef, unknown> = z.object({
    id: z.string().optional(),
});

/** @internal */
export type Guids$Outbound = {
    id?: string | undefined;
};

/** @internal */
export const Guids$outboundSchema: z.ZodType<Guids$Outbound, z.ZodTypeDef, Guids> = z.object({
    id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Guids$ {
    /** @deprecated use `Guids$inboundSchema` instead. */
    export const inboundSchema = Guids$inboundSchema;
    /** @deprecated use `Guids$outboundSchema` instead. */
    export const outboundSchema = Guids$outboundSchema;
    /** @deprecated use `Guids$Outbound` instead. */
    export type Outbound = Guids$Outbound;
}

/** @internal */
export const Ratings$inboundSchema: z.ZodType<Ratings, z.ZodTypeDef, unknown> = z.object({
    image: z.string().optional(),
    value: z.number().optional(),
    type: z.string().optional(),
});

/** @internal */
export type Ratings$Outbound = {
    image?: string | undefined;
    value?: number | undefined;
    type?: string | undefined;
};

/** @internal */
export const Ratings$outboundSchema: z.ZodType<Ratings$Outbound, z.ZodTypeDef, Ratings> = z.object({
    image: z.string().optional(),
    value: z.number().optional(),
    type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ratings$ {
    /** @deprecated use `Ratings$inboundSchema` instead. */
    export const inboundSchema = Ratings$inboundSchema;
    /** @deprecated use `Ratings$outboundSchema` instead. */
    export const outboundSchema = Ratings$outboundSchema;
    /** @deprecated use `Ratings$Outbound` instead. */
    export type Outbound = Ratings$Outbound;
}

/** @internal */
export const GetMetadataDirector$inboundSchema: z.ZodType<
    GetMetadataDirector,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
    tagKey: z.string().optional(),
    thumb: z.string().optional(),
});

/** @internal */
export type GetMetadataDirector$Outbound = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

/** @internal */
export const GetMetadataDirector$outboundSchema: z.ZodType<
    GetMetadataDirector$Outbound,
    z.ZodTypeDef,
    GetMetadataDirector
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
    tagKey: z.string().optional(),
    thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataDirector$ {
    /** @deprecated use `GetMetadataDirector$inboundSchema` instead. */
    export const inboundSchema = GetMetadataDirector$inboundSchema;
    /** @deprecated use `GetMetadataDirector$outboundSchema` instead. */
    export const outboundSchema = GetMetadataDirector$outboundSchema;
    /** @deprecated use `GetMetadataDirector$Outbound` instead. */
    export type Outbound = GetMetadataDirector$Outbound;
}

/** @internal */
export const GetMetadataWriter$inboundSchema: z.ZodType<GetMetadataWriter, z.ZodTypeDef, unknown> =
    z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });

/** @internal */
export type GetMetadataWriter$Outbound = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

/** @internal */
export const GetMetadataWriter$outboundSchema: z.ZodType<
    GetMetadataWriter$Outbound,
    z.ZodTypeDef,
    GetMetadataWriter
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
    tagKey: z.string().optional(),
    thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataWriter$ {
    /** @deprecated use `GetMetadataWriter$inboundSchema` instead. */
    export const inboundSchema = GetMetadataWriter$inboundSchema;
    /** @deprecated use `GetMetadataWriter$outboundSchema` instead. */
    export const outboundSchema = GetMetadataWriter$outboundSchema;
    /** @deprecated use `GetMetadataWriter$Outbound` instead. */
    export type Outbound = GetMetadataWriter$Outbound;
}

/** @internal */
export const GetMetadataRole$inboundSchema: z.ZodType<GetMetadataRole, z.ZodTypeDef, unknown> =
    z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        role: z.string().optional(),
        thumb: z.string().optional(),
    });

/** @internal */
export type GetMetadataRole$Outbound = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    role?: string | undefined;
    thumb?: string | undefined;
};

/** @internal */
export const GetMetadataRole$outboundSchema: z.ZodType<
    GetMetadataRole$Outbound,
    z.ZodTypeDef,
    GetMetadataRole
> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
    tagKey: z.string().optional(),
    role: z.string().optional(),
    thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataRole$ {
    /** @deprecated use `GetMetadataRole$inboundSchema` instead. */
    export const inboundSchema = GetMetadataRole$inboundSchema;
    /** @deprecated use `GetMetadataRole$outboundSchema` instead. */
    export const outboundSchema = GetMetadataRole$outboundSchema;
    /** @deprecated use `GetMetadataRole$Outbound` instead. */
    export type Outbound = GetMetadataRole$Outbound;
}

/** @internal */
export const Producer$inboundSchema: z.ZodType<Producer, z.ZodTypeDef, unknown> = z.object({
    id: z.number().int().optional(),
    filter: z.string().optional(),
    tag: z.string().optional(),
    tagKey: z.string().optional(),
    thumb: z.string().optional(),
});

/** @internal */
export type Producer$Outbound = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    thumb?: string | undefined;
};

/** @internal */
export const Producer$outboundSchema: z.ZodType<Producer$Outbound, z.ZodTypeDef, Producer> =
    z.object({
        id: z.number().int().optional(),
        filter: z.string().optional(),
        tag: z.string().optional(),
        tagKey: z.string().optional(),
        thumb: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Producer$ {
    /** @deprecated use `Producer$inboundSchema` instead. */
    export const inboundSchema = Producer$inboundSchema;
    /** @deprecated use `Producer$outboundSchema` instead. */
    export const outboundSchema = Producer$outboundSchema;
    /** @deprecated use `Producer$Outbound` instead. */
    export type Outbound = Producer$Outbound;
}

/** @internal */
export const GetMetadataMetadata$inboundSchema: z.ZodType<
    GetMetadataMetadata,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ratingKey: z.string().optional(),
        key: z.string().optional(),
        guid: z.string().optional(),
        studio: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        librarySectionTitle: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        librarySectionKey: z.string().optional(),
        contentRating: z.string().optional(),
        summary: z.string().optional(),
        rating: z.number().optional(),
        audienceRating: z.number().optional(),
        year: z.number().int().optional(),
        tagline: z.string().optional(),
        thumb: z.string().optional(),
        art: z.string().optional(),
        duration: z.number().int().optional(),
        originallyAvailableAt: z
            .string()
            .transform((v) => new RFCDate(v))
            .optional(),
        addedAt: z.number().int().optional(),
        updatedAt: z.number().int().optional(),
        audienceRatingImage: z.string().optional(),
        hasPremiumPrimaryExtra: z.string().optional(),
        ratingImage: z.string().optional(),
        Media: z.array(z.lazy(() => GetMetadataMedia$inboundSchema)).optional(),
        Genre: z.array(z.lazy(() => GetMetadataGenre$inboundSchema)).optional(),
        Country: z.array(z.lazy(() => GetMetadataCountry$inboundSchema)).optional(),
        Guid: z.array(z.lazy(() => Guids$inboundSchema)).optional(),
        Rating: z.array(z.lazy(() => Ratings$inboundSchema)).optional(),
        Director: z.array(z.lazy(() => GetMetadataDirector$inboundSchema)).optional(),
        Writer: z.array(z.lazy(() => GetMetadataWriter$inboundSchema)).optional(),
        Role: z.array(z.lazy(() => GetMetadataRole$inboundSchema)).optional(),
        Producer: z.array(z.lazy(() => Producer$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Media: "media",
            Genre: "genre",
            Country: "country",
            Guid: "guids",
            Rating: "ratings",
            Director: "director",
            Writer: "writer",
            Role: "role",
            Producer: "producer",
        });
    });

/** @internal */
export type GetMetadataMetadata$Outbound = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    studio?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionKey?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    rating?: number | undefined;
    audienceRating?: number | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: string | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    audienceRatingImage?: string | undefined;
    hasPremiumPrimaryExtra?: string | undefined;
    ratingImage?: string | undefined;
    Media?: Array<GetMetadataMedia$Outbound> | undefined;
    Genre?: Array<GetMetadataGenre$Outbound> | undefined;
    Country?: Array<GetMetadataCountry$Outbound> | undefined;
    Guid?: Array<Guids$Outbound> | undefined;
    Rating?: Array<Ratings$Outbound> | undefined;
    Director?: Array<GetMetadataDirector$Outbound> | undefined;
    Writer?: Array<GetMetadataWriter$Outbound> | undefined;
    Role?: Array<GetMetadataRole$Outbound> | undefined;
    Producer?: Array<Producer$Outbound> | undefined;
};

/** @internal */
export const GetMetadataMetadata$outboundSchema: z.ZodType<
    GetMetadataMetadata$Outbound,
    z.ZodTypeDef,
    GetMetadataMetadata
> = z
    .object({
        ratingKey: z.string().optional(),
        key: z.string().optional(),
        guid: z.string().optional(),
        studio: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        librarySectionTitle: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        librarySectionKey: z.string().optional(),
        contentRating: z.string().optional(),
        summary: z.string().optional(),
        rating: z.number().optional(),
        audienceRating: z.number().optional(),
        year: z.number().int().optional(),
        tagline: z.string().optional(),
        thumb: z.string().optional(),
        art: z.string().optional(),
        duration: z.number().int().optional(),
        originallyAvailableAt: z
            .instanceof(RFCDate)
            .transform((v) => v.toString())
            .optional(),
        addedAt: z.number().int().optional(),
        updatedAt: z.number().int().optional(),
        audienceRatingImage: z.string().optional(),
        hasPremiumPrimaryExtra: z.string().optional(),
        ratingImage: z.string().optional(),
        media: z.array(z.lazy(() => GetMetadataMedia$outboundSchema)).optional(),
        genre: z.array(z.lazy(() => GetMetadataGenre$outboundSchema)).optional(),
        country: z.array(z.lazy(() => GetMetadataCountry$outboundSchema)).optional(),
        guids: z.array(z.lazy(() => Guids$outboundSchema)).optional(),
        ratings: z.array(z.lazy(() => Ratings$outboundSchema)).optional(),
        director: z.array(z.lazy(() => GetMetadataDirector$outboundSchema)).optional(),
        writer: z.array(z.lazy(() => GetMetadataWriter$outboundSchema)).optional(),
        role: z.array(z.lazy(() => GetMetadataRole$outboundSchema)).optional(),
        producer: z.array(z.lazy(() => Producer$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            media: "Media",
            genre: "Genre",
            country: "Country",
            guids: "Guid",
            ratings: "Rating",
            director: "Director",
            writer: "Writer",
            role: "Role",
            producer: "Producer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataMetadata$ {
    /** @deprecated use `GetMetadataMetadata$inboundSchema` instead. */
    export const inboundSchema = GetMetadataMetadata$inboundSchema;
    /** @deprecated use `GetMetadataMetadata$outboundSchema` instead. */
    export const outboundSchema = GetMetadataMetadata$outboundSchema;
    /** @deprecated use `GetMetadataMetadata$Outbound` instead. */
    export type Outbound = GetMetadataMetadata$Outbound;
}

/** @internal */
export const GetMetadataMediaContainer$inboundSchema: z.ZodType<
    GetMetadataMediaContainer,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        identifier: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        librarySectionTitle: z.string().optional(),
        librarySectionUUID: z.string().optional(),
        mediaTagPrefix: z.string().optional(),
        mediaTagVersion: z.number().int().optional(),
        Metadata: z.array(z.lazy(() => GetMetadataMetadata$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Metadata: "metadata",
        });
    });

/** @internal */
export type GetMetadataMediaContainer$Outbound = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionUUID?: string | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    Metadata?: Array<GetMetadataMetadata$Outbound> | undefined;
};

/** @internal */
export const GetMetadataMediaContainer$outboundSchema: z.ZodType<
    GetMetadataMediaContainer$Outbound,
    z.ZodTypeDef,
    GetMetadataMediaContainer
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        identifier: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        librarySectionTitle: z.string().optional(),
        librarySectionUUID: z.string().optional(),
        mediaTagPrefix: z.string().optional(),
        mediaTagVersion: z.number().int().optional(),
        metadata: z.array(z.lazy(() => GetMetadataMetadata$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            metadata: "Metadata",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataMediaContainer$ {
    /** @deprecated use `GetMetadataMediaContainer$inboundSchema` instead. */
    export const inboundSchema = GetMetadataMediaContainer$inboundSchema;
    /** @deprecated use `GetMetadataMediaContainer$outboundSchema` instead. */
    export const outboundSchema = GetMetadataMediaContainer$outboundSchema;
    /** @deprecated use `GetMetadataMediaContainer$Outbound` instead. */
    export type Outbound = GetMetadataMediaContainer$Outbound;
}

/** @internal */
export const GetMetadataResponseBody$inboundSchema: z.ZodType<
    GetMetadataResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        MediaContainer: z.lazy(() => GetMetadataMediaContainer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            MediaContainer: "mediaContainer",
        });
    });

/** @internal */
export type GetMetadataResponseBody$Outbound = {
    MediaContainer?: GetMetadataMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetMetadataResponseBody$outboundSchema: z.ZodType<
    GetMetadataResponseBody$Outbound,
    z.ZodTypeDef,
    GetMetadataResponseBody
> = z
    .object({
        mediaContainer: z.lazy(() => GetMetadataMediaContainer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            mediaContainer: "MediaContainer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataResponseBody$ {
    /** @deprecated use `GetMetadataResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetMetadataResponseBody$inboundSchema;
    /** @deprecated use `GetMetadataResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetMetadataResponseBody$outboundSchema;
    /** @deprecated use `GetMetadataResponseBody$Outbound` instead. */
    export type Outbound = GetMetadataResponseBody$Outbound;
}

/** @internal */
export const GetMetadataResponse$inboundSchema: z.ZodType<
    GetMetadataResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        object: z.lazy(() => GetMetadataResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetMetadataResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: GetMetadataResponseBody$Outbound | undefined;
};

/** @internal */
export const GetMetadataResponse$outboundSchema: z.ZodType<
    GetMetadataResponse$Outbound,
    z.ZodTypeDef,
    GetMetadataResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        object: z.lazy(() => GetMetadataResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetadataResponse$ {
    /** @deprecated use `GetMetadataResponse$inboundSchema` instead. */
    export const inboundSchema = GetMetadataResponse$inboundSchema;
    /** @deprecated use `GetMetadataResponse$outboundSchema` instead. */
    export const outboundSchema = GetMetadataResponse$outboundSchema;
    /** @deprecated use `GetMetadataResponse$Outbound` instead. */
    export type Outbound = GetMetadataResponse$Outbound;
}
