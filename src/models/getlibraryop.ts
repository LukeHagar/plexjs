/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * Whether or not to include details for a section (types, filters, and sorts).
 *
 * @remarks
 * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
 *
 */
export enum IncludeDetails {
    Zero = 0,
    One = 1,
}

export type GetLibraryRequest = {
    /**
     * the Id of the library to query
     */
    sectionId: number;
    /**
     * Whether or not to include details for a section (types, filters, and sorts).
     *
     * @remarks
     * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     *
     */
    includeDetails?: IncludeDetails | undefined;
};

export type GetLibraryErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetLibraryLibraryResponseBodyData = {
    errors?: Array<GetLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetLibraryLibraryResponseBody extends Error {
    errors?: Array<GetLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetLibraryLibraryResponseBodyData;

    constructor(err: GetLibraryLibraryResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetLibraryLibraryResponseBody";
    }
}

export type GetLibraryDirectory = {
    key?: string | undefined;
    title?: string | undefined;
    secondary?: boolean | undefined;
    prompt?: string | undefined;
    search?: boolean | undefined;
};

export type GetLibraryFilter = {
    filter?: string | undefined;
    filterType?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
};

export type Sort = {
    default?: string | undefined;
    defaultDirection?: string | undefined;
    descKey?: string | undefined;
    firstCharacterKey?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
};

export type Field = {
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    subType?: string | undefined;
};

export type GetLibraryType = {
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    active?: boolean | undefined;
    filter?: Array<GetLibraryFilter> | undefined;
    sort?: Array<Sort> | undefined;
    field?: Array<Field> | undefined;
};

export type Operator = {
    key?: string | undefined;
    title?: string | undefined;
};

export type FieldType = {
    type?: string | undefined;
    operator?: Array<Operator> | undefined;
};

export type GetLibraryMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    art?: string | undefined;
    content?: string | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    thumb?: string | undefined;
    title1?: string | undefined;
    viewGroup?: string | undefined;
    viewMode?: number | undefined;
    directory?: Array<GetLibraryDirectory> | undefined;
    type?: Array<GetLibraryType> | undefined;
    fieldType?: Array<FieldType> | undefined;
};

/**
 * The details of the library
 */
export type GetLibraryResponseBody = {
    mediaContainer?: GetLibraryMediaContainer | undefined;
};

export type GetLibraryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The details of the library
     */
    object?: GetLibraryResponseBody | undefined;
};

/** @internal */
export const IncludeDetails$inboundSchema: z.ZodNativeEnum<typeof IncludeDetails> =
    z.nativeEnum(IncludeDetails);

/** @internal */
export const IncludeDetails$outboundSchema: z.ZodNativeEnum<typeof IncludeDetails> =
    IncludeDetails$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeDetails$ {
    /** @deprecated use `IncludeDetails$inboundSchema` instead. */
    export const inboundSchema = IncludeDetails$inboundSchema;
    /** @deprecated use `IncludeDetails$outboundSchema` instead. */
    export const outboundSchema = IncludeDetails$outboundSchema;
}

/** @internal */
export const GetLibraryRequest$inboundSchema: z.ZodType<GetLibraryRequest, z.ZodTypeDef, unknown> =
    z.object({
        sectionId: z.number(),
        includeDetails: IncludeDetails$inboundSchema,
    });

/** @internal */
export type GetLibraryRequest$Outbound = {
    sectionId: number;
    includeDetails: number;
};

/** @internal */
export const GetLibraryRequest$outboundSchema: z.ZodType<
    GetLibraryRequest$Outbound,
    z.ZodTypeDef,
    GetLibraryRequest
> = z.object({
    sectionId: z.number(),
    includeDetails: IncludeDetails$outboundSchema.default(IncludeDetails.Zero),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryRequest$ {
    /** @deprecated use `GetLibraryRequest$inboundSchema` instead. */
    export const inboundSchema = GetLibraryRequest$inboundSchema;
    /** @deprecated use `GetLibraryRequest$outboundSchema` instead. */
    export const outboundSchema = GetLibraryRequest$outboundSchema;
    /** @deprecated use `GetLibraryRequest$Outbound` instead. */
    export type Outbound = GetLibraryRequest$Outbound;
}

/** @internal */
export const GetLibraryErrors$inboundSchema: z.ZodType<GetLibraryErrors, z.ZodTypeDef, unknown> =
    z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

/** @internal */
export type GetLibraryErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetLibraryErrors$outboundSchema: z.ZodType<
    GetLibraryErrors$Outbound,
    z.ZodTypeDef,
    GetLibraryErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryErrors$ {
    /** @deprecated use `GetLibraryErrors$inboundSchema` instead. */
    export const inboundSchema = GetLibraryErrors$inboundSchema;
    /** @deprecated use `GetLibraryErrors$outboundSchema` instead. */
    export const outboundSchema = GetLibraryErrors$outboundSchema;
    /** @deprecated use `GetLibraryErrors$Outbound` instead. */
    export type Outbound = GetLibraryErrors$Outbound;
}

/** @internal */
export const GetLibraryLibraryResponseBody$inboundSchema: z.ZodType<
    GetLibraryLibraryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetLibraryErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetLibraryLibraryResponseBody(remapped);
    });

/** @internal */
export type GetLibraryLibraryResponseBody$Outbound = {
    errors?: Array<GetLibraryErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetLibraryLibraryResponseBody$outboundSchema: z.ZodType<
    GetLibraryLibraryResponseBody$Outbound,
    z.ZodTypeDef,
    GetLibraryLibraryResponseBody
> = z
    .instanceof(GetLibraryLibraryResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetLibraryErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryLibraryResponseBody$ {
    /** @deprecated use `GetLibraryLibraryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetLibraryLibraryResponseBody$inboundSchema;
    /** @deprecated use `GetLibraryLibraryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetLibraryLibraryResponseBody$outboundSchema;
    /** @deprecated use `GetLibraryLibraryResponseBody$Outbound` instead. */
    export type Outbound = GetLibraryLibraryResponseBody$Outbound;
}

/** @internal */
export const GetLibraryDirectory$inboundSchema: z.ZodType<
    GetLibraryDirectory,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    secondary: z.boolean().optional(),
    prompt: z.string().optional(),
    search: z.boolean().optional(),
});

/** @internal */
export type GetLibraryDirectory$Outbound = {
    key?: string | undefined;
    title?: string | undefined;
    secondary?: boolean | undefined;
    prompt?: string | undefined;
    search?: boolean | undefined;
};

/** @internal */
export const GetLibraryDirectory$outboundSchema: z.ZodType<
    GetLibraryDirectory$Outbound,
    z.ZodTypeDef,
    GetLibraryDirectory
> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    secondary: z.boolean().optional(),
    prompt: z.string().optional(),
    search: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDirectory$ {
    /** @deprecated use `GetLibraryDirectory$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDirectory$inboundSchema;
    /** @deprecated use `GetLibraryDirectory$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDirectory$outboundSchema;
    /** @deprecated use `GetLibraryDirectory$Outbound` instead. */
    export type Outbound = GetLibraryDirectory$Outbound;
}

/** @internal */
export const GetLibraryFilter$inboundSchema: z.ZodType<GetLibraryFilter, z.ZodTypeDef, unknown> =
    z.object({
        filter: z.string().optional(),
        filterType: z.string().optional(),
        key: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
    });

/** @internal */
export type GetLibraryFilter$Outbound = {
    filter?: string | undefined;
    filterType?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
};

/** @internal */
export const GetLibraryFilter$outboundSchema: z.ZodType<
    GetLibraryFilter$Outbound,
    z.ZodTypeDef,
    GetLibraryFilter
> = z.object({
    filter: z.string().optional(),
    filterType: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryFilter$ {
    /** @deprecated use `GetLibraryFilter$inboundSchema` instead. */
    export const inboundSchema = GetLibraryFilter$inboundSchema;
    /** @deprecated use `GetLibraryFilter$outboundSchema` instead. */
    export const outboundSchema = GetLibraryFilter$outboundSchema;
    /** @deprecated use `GetLibraryFilter$Outbound` instead. */
    export type Outbound = GetLibraryFilter$Outbound;
}

/** @internal */
export const Sort$inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z.object({
    default: z.string().optional(),
    defaultDirection: z.string().optional(),
    descKey: z.string().optional(),
    firstCharacterKey: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
});

/** @internal */
export type Sort$Outbound = {
    default?: string | undefined;
    defaultDirection?: string | undefined;
    descKey?: string | undefined;
    firstCharacterKey?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
};

/** @internal */
export const Sort$outboundSchema: z.ZodType<Sort$Outbound, z.ZodTypeDef, Sort> = z.object({
    default: z.string().optional(),
    defaultDirection: z.string().optional(),
    descKey: z.string().optional(),
    firstCharacterKey: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
    /** @deprecated use `Sort$inboundSchema` instead. */
    export const inboundSchema = Sort$inboundSchema;
    /** @deprecated use `Sort$outboundSchema` instead. */
    export const outboundSchema = Sort$outboundSchema;
    /** @deprecated use `Sort$Outbound` instead. */
    export type Outbound = Sort$Outbound;
}

/** @internal */
export const Field$inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
    subType: z.string().optional(),
});

/** @internal */
export type Field$Outbound = {
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    subType?: string | undefined;
};

/** @internal */
export const Field$outboundSchema: z.ZodType<Field$Outbound, z.ZodTypeDef, Field> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
    subType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
    /** @deprecated use `Field$inboundSchema` instead. */
    export const inboundSchema = Field$inboundSchema;
    /** @deprecated use `Field$outboundSchema` instead. */
    export const outboundSchema = Field$outboundSchema;
    /** @deprecated use `Field$Outbound` instead. */
    export type Outbound = Field$Outbound;
}

/** @internal */
export const GetLibraryType$inboundSchema: z.ZodType<GetLibraryType, z.ZodTypeDef, unknown> = z
    .object({
        key: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        active: z.boolean().optional(),
        Filter: z.array(z.lazy(() => GetLibraryFilter$inboundSchema)).optional(),
        Sort: z.array(z.lazy(() => Sort$inboundSchema)).optional(),
        Field: z.array(z.lazy(() => Field$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Filter: "filter",
            Sort: "sort",
            Field: "field",
        });
    });

/** @internal */
export type GetLibraryType$Outbound = {
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    active?: boolean | undefined;
    Filter?: Array<GetLibraryFilter$Outbound> | undefined;
    Sort?: Array<Sort$Outbound> | undefined;
    Field?: Array<Field$Outbound> | undefined;
};

/** @internal */
export const GetLibraryType$outboundSchema: z.ZodType<
    GetLibraryType$Outbound,
    z.ZodTypeDef,
    GetLibraryType
> = z
    .object({
        key: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        active: z.boolean().optional(),
        filter: z.array(z.lazy(() => GetLibraryFilter$outboundSchema)).optional(),
        sort: z.array(z.lazy(() => Sort$outboundSchema)).optional(),
        field: z.array(z.lazy(() => Field$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            filter: "Filter",
            sort: "Sort",
            field: "Field",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryType$ {
    /** @deprecated use `GetLibraryType$inboundSchema` instead. */
    export const inboundSchema = GetLibraryType$inboundSchema;
    /** @deprecated use `GetLibraryType$outboundSchema` instead. */
    export const outboundSchema = GetLibraryType$outboundSchema;
    /** @deprecated use `GetLibraryType$Outbound` instead. */
    export type Outbound = GetLibraryType$Outbound;
}

/** @internal */
export const Operator$inboundSchema: z.ZodType<Operator, z.ZodTypeDef, unknown> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
});

/** @internal */
export type Operator$Outbound = {
    key?: string | undefined;
    title?: string | undefined;
};

/** @internal */
export const Operator$outboundSchema: z.ZodType<Operator$Outbound, z.ZodTypeDef, Operator> =
    z.object({
        key: z.string().optional(),
        title: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
    /** @deprecated use `Operator$inboundSchema` instead. */
    export const inboundSchema = Operator$inboundSchema;
    /** @deprecated use `Operator$outboundSchema` instead. */
    export const outboundSchema = Operator$outboundSchema;
    /** @deprecated use `Operator$Outbound` instead. */
    export type Outbound = Operator$Outbound;
}

/** @internal */
export const FieldType$inboundSchema: z.ZodType<FieldType, z.ZodTypeDef, unknown> = z
    .object({
        type: z.string().optional(),
        Operator: z.array(z.lazy(() => Operator$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Operator: "operator",
        });
    });

/** @internal */
export type FieldType$Outbound = {
    type?: string | undefined;
    Operator?: Array<Operator$Outbound> | undefined;
};

/** @internal */
export const FieldType$outboundSchema: z.ZodType<FieldType$Outbound, z.ZodTypeDef, FieldType> = z
    .object({
        type: z.string().optional(),
        operator: z.array(z.lazy(() => Operator$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            operator: "Operator",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldType$ {
    /** @deprecated use `FieldType$inboundSchema` instead. */
    export const inboundSchema = FieldType$inboundSchema;
    /** @deprecated use `FieldType$outboundSchema` instead. */
    export const outboundSchema = FieldType$outboundSchema;
    /** @deprecated use `FieldType$Outbound` instead. */
    export type Outbound = FieldType$Outbound;
}

/** @internal */
export const GetLibraryMediaContainer$inboundSchema: z.ZodType<
    GetLibraryMediaContainer,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        art: z.string().optional(),
        content: z.string().optional(),
        identifier: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        mediaTagPrefix: z.string().optional(),
        mediaTagVersion: z.number().int().optional(),
        thumb: z.string().optional(),
        title1: z.string().optional(),
        viewGroup: z.string().optional(),
        viewMode: z.number().int().optional(),
        Directory: z.array(z.lazy(() => GetLibraryDirectory$inboundSchema)).optional(),
        Type: z.array(z.lazy(() => GetLibraryType$inboundSchema)).optional(),
        FieldType: z.array(z.lazy(() => FieldType$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Directory: "directory",
            Type: "type",
            FieldType: "fieldType",
        });
    });

/** @internal */
export type GetLibraryMediaContainer$Outbound = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    art?: string | undefined;
    content?: string | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    thumb?: string | undefined;
    title1?: string | undefined;
    viewGroup?: string | undefined;
    viewMode?: number | undefined;
    Directory?: Array<GetLibraryDirectory$Outbound> | undefined;
    Type?: Array<GetLibraryType$Outbound> | undefined;
    FieldType?: Array<FieldType$Outbound> | undefined;
};

/** @internal */
export const GetLibraryMediaContainer$outboundSchema: z.ZodType<
    GetLibraryMediaContainer$Outbound,
    z.ZodTypeDef,
    GetLibraryMediaContainer
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        art: z.string().optional(),
        content: z.string().optional(),
        identifier: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        mediaTagPrefix: z.string().optional(),
        mediaTagVersion: z.number().int().optional(),
        thumb: z.string().optional(),
        title1: z.string().optional(),
        viewGroup: z.string().optional(),
        viewMode: z.number().int().optional(),
        directory: z.array(z.lazy(() => GetLibraryDirectory$outboundSchema)).optional(),
        type: z.array(z.lazy(() => GetLibraryType$outboundSchema)).optional(),
        fieldType: z.array(z.lazy(() => FieldType$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            directory: "Directory",
            type: "Type",
            fieldType: "FieldType",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryMediaContainer$ {
    /** @deprecated use `GetLibraryMediaContainer$inboundSchema` instead. */
    export const inboundSchema = GetLibraryMediaContainer$inboundSchema;
    /** @deprecated use `GetLibraryMediaContainer$outboundSchema` instead. */
    export const outboundSchema = GetLibraryMediaContainer$outboundSchema;
    /** @deprecated use `GetLibraryMediaContainer$Outbound` instead. */
    export type Outbound = GetLibraryMediaContainer$Outbound;
}

/** @internal */
export const GetLibraryResponseBody$inboundSchema: z.ZodType<
    GetLibraryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        MediaContainer: z.lazy(() => GetLibraryMediaContainer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            MediaContainer: "mediaContainer",
        });
    });

/** @internal */
export type GetLibraryResponseBody$Outbound = {
    MediaContainer?: GetLibraryMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetLibraryResponseBody$outboundSchema: z.ZodType<
    GetLibraryResponseBody$Outbound,
    z.ZodTypeDef,
    GetLibraryResponseBody
> = z
    .object({
        mediaContainer: z.lazy(() => GetLibraryMediaContainer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            mediaContainer: "MediaContainer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryResponseBody$ {
    /** @deprecated use `GetLibraryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetLibraryResponseBody$inboundSchema;
    /** @deprecated use `GetLibraryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetLibraryResponseBody$outboundSchema;
    /** @deprecated use `GetLibraryResponseBody$Outbound` instead. */
    export type Outbound = GetLibraryResponseBody$Outbound;
}

/** @internal */
export const GetLibraryResponse$inboundSchema: z.ZodType<
    GetLibraryResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        object: z.lazy(() => GetLibraryResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetLibraryResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: GetLibraryResponseBody$Outbound | undefined;
};

/** @internal */
export const GetLibraryResponse$outboundSchema: z.ZodType<
    GetLibraryResponse$Outbound,
    z.ZodTypeDef,
    GetLibraryResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        object: z.lazy(() => GetLibraryResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryResponse$ {
    /** @deprecated use `GetLibraryResponse$inboundSchema` instead. */
    export const inboundSchema = GetLibraryResponse$inboundSchema;
    /** @deprecated use `GetLibraryResponse$outboundSchema` instead. */
    export const outboundSchema = GetLibraryResponse$outboundSchema;
    /** @deprecated use `GetLibraryResponse$Outbound` instead. */
    export type Outbound = GetLibraryResponse$Outbound;
}
