/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

/**
 * Whether or not to include details for a section (types, filters, and sorts).
 *
 * @remarks
 * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
 *
 */
export enum IncludeDetails {
    Zero = 0,
    One = 1,
}

export type GetLibraryRequest = {
    /**
     * the Id of the library to query
     */
    sectionId: number;
    /**
     * Whether or not to include details for a section (types, filters, and sorts).
     *
     * @remarks
     * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     *
     */
    includeDetails?: IncludeDetails | undefined;
};

export type GetLibraryErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetLibraryLibraryResponseBodyData = {
    errors?: Array<GetLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetLibraryLibraryResponseBody extends Error {
    errors?: Array<GetLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetLibraryLibraryResponseBodyData;

    constructor(err: GetLibraryLibraryResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetLibraryLibraryResponseBody";
    }
}

export type GetLibraryDirectory = {
    key?: string | undefined;
    title?: string | undefined;
    secondary?: boolean | undefined;
    prompt?: string | undefined;
    search?: boolean | undefined;
};

export type GetLibraryFilter = {
    filter?: string | undefined;
    filterType?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
};

export type Sort = {
    default?: string | undefined;
    defaultDirection?: string | undefined;
    descKey?: string | undefined;
    firstCharacterKey?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
};

export type Field = {
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    subType?: string | undefined;
};

export type GetLibraryType = {
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    active?: boolean | undefined;
    filter?: Array<GetLibraryFilter> | undefined;
    sort?: Array<Sort> | undefined;
    field?: Array<Field> | undefined;
};

export type Operator = {
    key?: string | undefined;
    title?: string | undefined;
};

export type FieldType = {
    type?: string | undefined;
    operator?: Array<Operator> | undefined;
};

export type GetLibraryMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    art?: string | undefined;
    content?: string | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    thumb?: string | undefined;
    title1?: string | undefined;
    viewGroup?: string | undefined;
    viewMode?: number | undefined;
    directory?: Array<GetLibraryDirectory> | undefined;
    type?: Array<GetLibraryType> | undefined;
    fieldType?: Array<FieldType> | undefined;
};

/**
 * The details of the library
 */
export type GetLibraryResponseBody = {
    mediaContainer?: GetLibraryMediaContainer | undefined;
};

export type GetLibraryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The details of the library
     */
    object?: GetLibraryResponseBody | undefined;
};

/** @internal */
export namespace IncludeDetails$ {
    export const inboundSchema = z.nativeEnum(IncludeDetails);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetLibraryRequest$ {
    export const inboundSchema: z.ZodType<GetLibraryRequest, z.ZodTypeDef, unknown> = z.object({
        sectionId: z.number(),
        includeDetails: IncludeDetails$.inboundSchema.default(IncludeDetails.Zero),
    });

    export type Outbound = {
        sectionId: number;
        includeDetails: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryRequest> = z.object({
        sectionId: z.number(),
        includeDetails: IncludeDetails$.outboundSchema.default(IncludeDetails.Zero),
    });
}

/** @internal */
export namespace GetLibraryErrors$ {
    export const inboundSchema: z.ZodType<GetLibraryErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetLibraryLibraryResponseBody$ {
    export const inboundSchema: z.ZodType<GetLibraryLibraryResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.array(z.lazy(() => GetLibraryErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetLibraryLibraryResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetLibraryErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryLibraryResponseBody> =
        z
            .instanceof(GetLibraryLibraryResponseBody)
            .transform((v) => v.data$)
            .pipe(
                z
                    .object({
                        errors: z.array(z.lazy(() => GetLibraryErrors$.outboundSchema)).optional(),
                        rawResponse: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                    })
                    .transform((v) => {
                        return remap$(v, {
                            rawResponse: "RawResponse",
                        });
                    })
            );
}

/** @internal */
export namespace GetLibraryDirectory$ {
    export const inboundSchema: z.ZodType<GetLibraryDirectory, z.ZodTypeDef, unknown> = z.object({
        key: z.string().optional(),
        title: z.string().optional(),
        secondary: z.boolean().optional(),
        prompt: z.string().optional(),
        search: z.boolean().optional(),
    });

    export type Outbound = {
        key?: string | undefined;
        title?: string | undefined;
        secondary?: boolean | undefined;
        prompt?: string | undefined;
        search?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryDirectory> = z.object({
        key: z.string().optional(),
        title: z.string().optional(),
        secondary: z.boolean().optional(),
        prompt: z.string().optional(),
        search: z.boolean().optional(),
    });
}

/** @internal */
export namespace GetLibraryFilter$ {
    export const inboundSchema: z.ZodType<GetLibraryFilter, z.ZodTypeDef, unknown> = z.object({
        filter: z.string().optional(),
        filterType: z.string().optional(),
        key: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
    });

    export type Outbound = {
        filter?: string | undefined;
        filterType?: string | undefined;
        key?: string | undefined;
        title?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryFilter> = z.object({
        filter: z.string().optional(),
        filterType: z.string().optional(),
        key: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
    });
}

/** @internal */
export namespace Sort$ {
    export const inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z.object({
        default: z.string().optional(),
        defaultDirection: z.string().optional(),
        descKey: z.string().optional(),
        firstCharacterKey: z.string().optional(),
        key: z.string().optional(),
        title: z.string().optional(),
    });

    export type Outbound = {
        default?: string | undefined;
        defaultDirection?: string | undefined;
        descKey?: string | undefined;
        firstCharacterKey?: string | undefined;
        key?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Sort> = z.object({
        default: z.string().optional(),
        defaultDirection: z.string().optional(),
        descKey: z.string().optional(),
        firstCharacterKey: z.string().optional(),
        key: z.string().optional(),
        title: z.string().optional(),
    });
}

/** @internal */
export namespace Field$ {
    export const inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z.object({
        key: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
        subType: z.string().optional(),
    });

    export type Outbound = {
        key?: string | undefined;
        title?: string | undefined;
        type?: string | undefined;
        subType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Field> = z.object({
        key: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
        subType: z.string().optional(),
    });
}

/** @internal */
export namespace GetLibraryType$ {
    export const inboundSchema: z.ZodType<GetLibraryType, z.ZodTypeDef, unknown> = z
        .object({
            key: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            active: z.boolean().optional(),
            Filter: z.array(z.lazy(() => GetLibraryFilter$.inboundSchema)).optional(),
            Sort: z.array(z.lazy(() => Sort$.inboundSchema)).optional(),
            Field: z.array(z.lazy(() => Field$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Filter: "filter",
                Sort: "sort",
                Field: "field",
            });
        });

    export type Outbound = {
        key?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        active?: boolean | undefined;
        Filter?: Array<GetLibraryFilter$.Outbound> | undefined;
        Sort?: Array<Sort$.Outbound> | undefined;
        Field?: Array<Field$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryType> = z
        .object({
            key: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            active: z.boolean().optional(),
            filter: z.array(z.lazy(() => GetLibraryFilter$.outboundSchema)).optional(),
            sort: z.array(z.lazy(() => Sort$.outboundSchema)).optional(),
            field: z.array(z.lazy(() => Field$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                filter: "Filter",
                sort: "Sort",
                field: "Field",
            });
        });
}

/** @internal */
export namespace Operator$ {
    export const inboundSchema: z.ZodType<Operator, z.ZodTypeDef, unknown> = z.object({
        key: z.string().optional(),
        title: z.string().optional(),
    });

    export type Outbound = {
        key?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Operator> = z.object({
        key: z.string().optional(),
        title: z.string().optional(),
    });
}

/** @internal */
export namespace FieldType$ {
    export const inboundSchema: z.ZodType<FieldType, z.ZodTypeDef, unknown> = z
        .object({
            type: z.string().optional(),
            Operator: z.array(z.lazy(() => Operator$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Operator: "operator",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        Operator?: Array<Operator$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FieldType> = z
        .object({
            type: z.string().optional(),
            operator: z.array(z.lazy(() => Operator$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                operator: "Operator",
            });
        });
}

/** @internal */
export namespace GetLibraryMediaContainer$ {
    export const inboundSchema: z.ZodType<GetLibraryMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            art: z.string().optional(),
            content: z.string().optional(),
            identifier: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            thumb: z.string().optional(),
            title1: z.string().optional(),
            viewGroup: z.string().optional(),
            viewMode: z.number().int().optional(),
            Directory: z.array(z.lazy(() => GetLibraryDirectory$.inboundSchema)).optional(),
            Type: z.array(z.lazy(() => GetLibraryType$.inboundSchema)).optional(),
            FieldType: z.array(z.lazy(() => FieldType$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Directory: "directory",
                Type: "type",
                FieldType: "fieldType",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        art?: string | undefined;
        content?: string | undefined;
        identifier?: string | undefined;
        librarySectionID?: number | undefined;
        mediaTagPrefix?: string | undefined;
        mediaTagVersion?: number | undefined;
        thumb?: string | undefined;
        title1?: string | undefined;
        viewGroup?: string | undefined;
        viewMode?: number | undefined;
        Directory?: Array<GetLibraryDirectory$.Outbound> | undefined;
        Type?: Array<GetLibraryType$.Outbound> | undefined;
        FieldType?: Array<FieldType$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            art: z.string().optional(),
            content: z.string().optional(),
            identifier: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            thumb: z.string().optional(),
            title1: z.string().optional(),
            viewGroup: z.string().optional(),
            viewMode: z.number().int().optional(),
            directory: z.array(z.lazy(() => GetLibraryDirectory$.outboundSchema)).optional(),
            type: z.array(z.lazy(() => GetLibraryType$.outboundSchema)).optional(),
            fieldType: z.array(z.lazy(() => FieldType$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                directory: "Directory",
                type: "Type",
                fieldType: "FieldType",
            });
        });
}

/** @internal */
export namespace GetLibraryResponseBody$ {
    export const inboundSchema: z.ZodType<GetLibraryResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetLibraryMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetLibraryMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetLibraryMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetLibraryResponse$ {
    export const inboundSchema: z.ZodType<GetLibraryResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetLibraryResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetLibraryResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetLibraryResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
