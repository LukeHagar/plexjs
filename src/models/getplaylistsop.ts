/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * limit to a type of playlist.
 */
export enum PlaylistType {
    Audio = "audio",
    Video = "video",
    Photo = "photo",
}

/**
 * type of playlists to return (default is all).
 */
export enum QueryParamSmart {
    Zero = 0,
    One = 1,
}

export type GetPlaylistsRequest = {
    /**
     * limit to a type of playlist.
     */
    playlistType?: PlaylistType | undefined;
    /**
     * type of playlists to return (default is all).
     */
    smart?: QueryParamSmart | undefined;
};

export type GetPlaylistsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetPlaylistsPlaylistsResponseBodyData = {
    errors?: Array<GetPlaylistsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetPlaylistsPlaylistsResponseBody extends Error {
    errors?: Array<GetPlaylistsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetPlaylistsPlaylistsResponseBodyData;

    constructor(err: GetPlaylistsPlaylistsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetPlaylistsPlaylistsResponseBody";
    }
}

export type GetPlaylistsMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    summary?: string | undefined;
    smart?: boolean | undefined;
    playlistType?: string | undefined;
    composite?: string | undefined;
    icon?: string | undefined;
    viewCount?: number | undefined;
    lastViewedAt?: number | undefined;
    duration?: number | undefined;
    leafCount?: number | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
};

export type GetPlaylistsMediaContainer = {
    size?: number | undefined;
    metadata?: Array<GetPlaylistsMetadata> | undefined;
};

/**
 * returns all playlists
 */
export type GetPlaylistsResponseBody = {
    mediaContainer?: GetPlaylistsMediaContainer | undefined;
};

export type GetPlaylistsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * returns all playlists
     */
    object?: GetPlaylistsResponseBody | undefined;
};

/** @internal */
export namespace PlaylistType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof PlaylistType> = z.nativeEnum(PlaylistType);
    export const outboundSchema: z.ZodNativeEnum<typeof PlaylistType> = inboundSchema;
}

/** @internal */
export namespace QueryParamSmart$ {
    export const inboundSchema: z.ZodNativeEnum<typeof QueryParamSmart> =
        z.nativeEnum(QueryParamSmart);
    export const outboundSchema: z.ZodNativeEnum<typeof QueryParamSmart> = inboundSchema;
}

/** @internal */
export namespace GetPlaylistsRequest$ {
    export const inboundSchema: z.ZodType<GetPlaylistsRequest, z.ZodTypeDef, unknown> = z.object({
        playlistType: PlaylistType$.inboundSchema.optional(),
        smart: QueryParamSmart$.inboundSchema.optional(),
    });

    export type Outbound = {
        playlistType?: string | undefined;
        smart?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsRequest> = z.object({
        playlistType: PlaylistType$.outboundSchema.optional(),
        smart: QueryParamSmart$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace GetPlaylistsErrors$ {
    export const inboundSchema: z.ZodType<GetPlaylistsErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetPlaylistsPlaylistsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetPlaylistsPlaylistsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => GetPlaylistsErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetPlaylistsPlaylistsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetPlaylistsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPlaylistsPlaylistsResponseBody
    > = z
        .instanceof(GetPlaylistsPlaylistsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => GetPlaylistsErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetPlaylistsMetadata$ {
    export const inboundSchema: z.ZodType<GetPlaylistsMetadata, z.ZodTypeDef, unknown> = z.object({
        ratingKey: z.string().optional(),
        key: z.string().optional(),
        guid: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        summary: z.string().optional(),
        smart: z.boolean().optional(),
        playlistType: z.string().optional(),
        composite: z.string().optional(),
        icon: z.string().optional(),
        viewCount: z.number().int().optional(),
        lastViewedAt: z.number().int().optional(),
        duration: z.number().int().optional(),
        leafCount: z.number().int().optional(),
        addedAt: z.number().int().optional(),
        updatedAt: z.number().int().optional(),
    });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        summary?: string | undefined;
        smart?: boolean | undefined;
        playlistType?: string | undefined;
        composite?: string | undefined;
        icon?: string | undefined;
        viewCount?: number | undefined;
        lastViewedAt?: number | undefined;
        duration?: number | undefined;
        leafCount?: number | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsMetadata> = z.object(
        {
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            summary: z.string().optional(),
            smart: z.boolean().optional(),
            playlistType: z.string().optional(),
            composite: z.string().optional(),
            icon: z.string().optional(),
            viewCount: z.number().int().optional(),
            lastViewedAt: z.number().int().optional(),
            duration: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
        }
    );
}

/** @internal */
export namespace GetPlaylistsMediaContainer$ {
    export const inboundSchema: z.ZodType<GetPlaylistsMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            Metadata: z.array(z.lazy(() => GetPlaylistsMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Metadata?: Array<GetPlaylistsMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            metadata: z.array(z.lazy(() => GetPlaylistsMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace GetPlaylistsResponseBody$ {
    export const inboundSchema: z.ZodType<GetPlaylistsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetPlaylistsMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetPlaylistsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetPlaylistsMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetPlaylistsResponse$ {
    export const inboundSchema: z.ZodType<GetPlaylistsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetPlaylistsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetPlaylistsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetPlaylistsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
