/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetLibrariesErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetLibrariesLibraryResponseBodyData = {
    errors?: Array<GetLibrariesErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetLibrariesLibraryResponseBody extends Error {
    errors?: Array<GetLibrariesErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetLibrariesLibraryResponseBodyData;

    constructor(err: GetLibrariesLibraryResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetLibrariesLibraryResponseBody";
    }
}

export type Location = {
    id?: number | undefined;
    path?: string | undefined;
};

export type GetLibrariesDirectory = {
    allowSync?: boolean | undefined;
    art?: string | undefined;
    composite?: string | undefined;
    filters?: boolean | undefined;
    refreshing?: boolean | undefined;
    thumb?: string | undefined;
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    agent?: string | undefined;
    scanner?: string | undefined;
    language?: string | undefined;
    uuid?: string | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    scannedAt?: number | undefined;
    content?: boolean | undefined;
    directory?: boolean | undefined;
    contentChangedAt?: number | undefined;
    hidden?: number | undefined;
    location?: Array<Location> | undefined;
};

export type GetLibrariesMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    title1?: string | undefined;
    directory?: Array<GetLibrariesDirectory> | undefined;
};

/**
 * The libraries available on the Server
 */
export type GetLibrariesResponseBody = {
    mediaContainer?: GetLibrariesMediaContainer | undefined;
};

export type GetLibrariesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The libraries available on the Server
     */
    object?: GetLibrariesResponseBody | undefined;
};

/** @internal */
export const GetLibrariesErrors$inboundSchema: z.ZodType<
    GetLibrariesErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type GetLibrariesErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetLibrariesErrors$outboundSchema: z.ZodType<
    GetLibrariesErrors$Outbound,
    z.ZodTypeDef,
    GetLibrariesErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrariesErrors$ {
    /** @deprecated use `GetLibrariesErrors$inboundSchema` instead. */
    export const inboundSchema = GetLibrariesErrors$inboundSchema;
    /** @deprecated use `GetLibrariesErrors$outboundSchema` instead. */
    export const outboundSchema = GetLibrariesErrors$outboundSchema;
    /** @deprecated use `GetLibrariesErrors$Outbound` instead. */
    export type Outbound = GetLibrariesErrors$Outbound;
}

/** @internal */
export const GetLibrariesLibraryResponseBody$inboundSchema: z.ZodType<
    GetLibrariesLibraryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetLibrariesErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetLibrariesLibraryResponseBody(remapped);
    });

/** @internal */
export type GetLibrariesLibraryResponseBody$Outbound = {
    errors?: Array<GetLibrariesErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetLibrariesLibraryResponseBody$outboundSchema: z.ZodType<
    GetLibrariesLibraryResponseBody$Outbound,
    z.ZodTypeDef,
    GetLibrariesLibraryResponseBody
> = z
    .instanceof(GetLibrariesLibraryResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetLibrariesErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrariesLibraryResponseBody$ {
    /** @deprecated use `GetLibrariesLibraryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetLibrariesLibraryResponseBody$inboundSchema;
    /** @deprecated use `GetLibrariesLibraryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetLibrariesLibraryResponseBody$outboundSchema;
    /** @deprecated use `GetLibrariesLibraryResponseBody$Outbound` instead. */
    export type Outbound = GetLibrariesLibraryResponseBody$Outbound;
}

/** @internal */
export const Location$inboundSchema: z.ZodType<Location, z.ZodTypeDef, unknown> = z.object({
    id: z.number().int().optional(),
    path: z.string().optional(),
});

/** @internal */
export type Location$Outbound = {
    id?: number | undefined;
    path?: string | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<Location$Outbound, z.ZodTypeDef, Location> =
    z.object({
        id: z.number().int().optional(),
        path: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
    /** @deprecated use `Location$inboundSchema` instead. */
    export const inboundSchema = Location$inboundSchema;
    /** @deprecated use `Location$outboundSchema` instead. */
    export const outboundSchema = Location$outboundSchema;
    /** @deprecated use `Location$Outbound` instead. */
    export type Outbound = Location$Outbound;
}

/** @internal */
export const GetLibrariesDirectory$inboundSchema: z.ZodType<
    GetLibrariesDirectory,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        allowSync: z.boolean().optional(),
        art: z.string().optional(),
        composite: z.string().optional(),
        filters: z.boolean().optional(),
        refreshing: z.boolean().optional(),
        thumb: z.string().optional(),
        key: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        agent: z.string().optional(),
        scanner: z.string().optional(),
        language: z.string().optional(),
        uuid: z.string().optional(),
        updatedAt: z.number().int().optional(),
        createdAt: z.number().int().optional(),
        scannedAt: z.number().int().optional(),
        content: z.boolean().optional(),
        directory: z.boolean().optional(),
        contentChangedAt: z.number().int().optional(),
        hidden: z.number().int().optional(),
        Location: z.array(z.lazy(() => Location$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Location: "location",
        });
    });

/** @internal */
export type GetLibrariesDirectory$Outbound = {
    allowSync?: boolean | undefined;
    art?: string | undefined;
    composite?: string | undefined;
    filters?: boolean | undefined;
    refreshing?: boolean | undefined;
    thumb?: string | undefined;
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    agent?: string | undefined;
    scanner?: string | undefined;
    language?: string | undefined;
    uuid?: string | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    scannedAt?: number | undefined;
    content?: boolean | undefined;
    directory?: boolean | undefined;
    contentChangedAt?: number | undefined;
    hidden?: number | undefined;
    Location?: Array<Location$Outbound> | undefined;
};

/** @internal */
export const GetLibrariesDirectory$outboundSchema: z.ZodType<
    GetLibrariesDirectory$Outbound,
    z.ZodTypeDef,
    GetLibrariesDirectory
> = z
    .object({
        allowSync: z.boolean().optional(),
        art: z.string().optional(),
        composite: z.string().optional(),
        filters: z.boolean().optional(),
        refreshing: z.boolean().optional(),
        thumb: z.string().optional(),
        key: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        agent: z.string().optional(),
        scanner: z.string().optional(),
        language: z.string().optional(),
        uuid: z.string().optional(),
        updatedAt: z.number().int().optional(),
        createdAt: z.number().int().optional(),
        scannedAt: z.number().int().optional(),
        content: z.boolean().optional(),
        directory: z.boolean().optional(),
        contentChangedAt: z.number().int().optional(),
        hidden: z.number().int().optional(),
        location: z.array(z.lazy(() => Location$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            location: "Location",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrariesDirectory$ {
    /** @deprecated use `GetLibrariesDirectory$inboundSchema` instead. */
    export const inboundSchema = GetLibrariesDirectory$inboundSchema;
    /** @deprecated use `GetLibrariesDirectory$outboundSchema` instead. */
    export const outboundSchema = GetLibrariesDirectory$outboundSchema;
    /** @deprecated use `GetLibrariesDirectory$Outbound` instead. */
    export type Outbound = GetLibrariesDirectory$Outbound;
}

/** @internal */
export const GetLibrariesMediaContainer$inboundSchema: z.ZodType<
    GetLibrariesMediaContainer,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        title1: z.string().optional(),
        Directory: z.array(z.lazy(() => GetLibrariesDirectory$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Directory: "directory",
        });
    });

/** @internal */
export type GetLibrariesMediaContainer$Outbound = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    title1?: string | undefined;
    Directory?: Array<GetLibrariesDirectory$Outbound> | undefined;
};

/** @internal */
export const GetLibrariesMediaContainer$outboundSchema: z.ZodType<
    GetLibrariesMediaContainer$Outbound,
    z.ZodTypeDef,
    GetLibrariesMediaContainer
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        title1: z.string().optional(),
        directory: z.array(z.lazy(() => GetLibrariesDirectory$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            directory: "Directory",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrariesMediaContainer$ {
    /** @deprecated use `GetLibrariesMediaContainer$inboundSchema` instead. */
    export const inboundSchema = GetLibrariesMediaContainer$inboundSchema;
    /** @deprecated use `GetLibrariesMediaContainer$outboundSchema` instead. */
    export const outboundSchema = GetLibrariesMediaContainer$outboundSchema;
    /** @deprecated use `GetLibrariesMediaContainer$Outbound` instead. */
    export type Outbound = GetLibrariesMediaContainer$Outbound;
}

/** @internal */
export const GetLibrariesResponseBody$inboundSchema: z.ZodType<
    GetLibrariesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        MediaContainer: z.lazy(() => GetLibrariesMediaContainer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            MediaContainer: "mediaContainer",
        });
    });

/** @internal */
export type GetLibrariesResponseBody$Outbound = {
    MediaContainer?: GetLibrariesMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetLibrariesResponseBody$outboundSchema: z.ZodType<
    GetLibrariesResponseBody$Outbound,
    z.ZodTypeDef,
    GetLibrariesResponseBody
> = z
    .object({
        mediaContainer: z.lazy(() => GetLibrariesMediaContainer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            mediaContainer: "MediaContainer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrariesResponseBody$ {
    /** @deprecated use `GetLibrariesResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetLibrariesResponseBody$inboundSchema;
    /** @deprecated use `GetLibrariesResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetLibrariesResponseBody$outboundSchema;
    /** @deprecated use `GetLibrariesResponseBody$Outbound` instead. */
    export type Outbound = GetLibrariesResponseBody$Outbound;
}

/** @internal */
export const GetLibrariesResponse$inboundSchema: z.ZodType<
    GetLibrariesResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        object: z.lazy(() => GetLibrariesResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetLibrariesResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: GetLibrariesResponseBody$Outbound | undefined;
};

/** @internal */
export const GetLibrariesResponse$outboundSchema: z.ZodType<
    GetLibrariesResponse$Outbound,
    z.ZodTypeDef,
    GetLibrariesResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        object: z.lazy(() => GetLibrariesResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrariesResponse$ {
    /** @deprecated use `GetLibrariesResponse$inboundSchema` instead. */
    export const inboundSchema = GetLibrariesResponse$inboundSchema;
    /** @deprecated use `GetLibrariesResponse$outboundSchema` instead. */
    export const outboundSchema = GetLibrariesResponse$outboundSchema;
    /** @deprecated use `GetLibrariesResponse$Outbound` instead. */
    export type Outbound = GetLibrariesResponse$Outbound;
}
