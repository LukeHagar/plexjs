/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TranscodeSession = {
    key?: string | undefined;
    throttled?: boolean | undefined;
    complete?: boolean | undefined;
    progress?: number | undefined;
    size?: number | undefined;
    speed?: number | undefined;
    error?: boolean | undefined;
    duration?: number | undefined;
    remaining?: number | undefined;
    context?: string | undefined;
    sourceVideoCodec?: string | undefined;
    sourceAudioCodec?: string | undefined;
    videoDecision?: string | undefined;
    audioDecision?: string | undefined;
    subtitleDecision?: string | undefined;
    protocol?: string | undefined;
    container?: string | undefined;
    videoCodec?: string | undefined;
    audioCodec?: string | undefined;
    audioChannels?: number | undefined;
    transcodeHwRequested?: boolean | undefined;
    timeStamp?: number | undefined;
    maxOffsetAvailable?: number | undefined;
    minOffsetAvailable?: number | undefined;
};

export type GetTranscodeSessionsMediaContainer = {
    size?: number | undefined;
    transcodeSession?: Array<TranscodeSession> | undefined;
};

/**
 * The Transcode Sessions
 */
export type GetTranscodeSessionsResponseBody = {
    mediaContainer?: GetTranscodeSessionsMediaContainer | undefined;
};

export type GetTranscodeSessionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The Transcode Sessions
     */
    object?: GetTranscodeSessionsResponseBody | undefined;
};

/** @internal */
export namespace TranscodeSession$ {
    export type Inbound = {
        key?: string | undefined;
        throttled?: boolean | undefined;
        complete?: boolean | undefined;
        progress?: number | undefined;
        size?: number | undefined;
        speed?: number | undefined;
        error?: boolean | undefined;
        duration?: number | undefined;
        remaining?: number | undefined;
        context?: string | undefined;
        sourceVideoCodec?: string | undefined;
        sourceAudioCodec?: string | undefined;
        videoDecision?: string | undefined;
        audioDecision?: string | undefined;
        subtitleDecision?: string | undefined;
        protocol?: string | undefined;
        container?: string | undefined;
        videoCodec?: string | undefined;
        audioCodec?: string | undefined;
        audioChannels?: number | undefined;
        transcodeHwRequested?: boolean | undefined;
        timeStamp?: number | undefined;
        maxOffsetAvailable?: number | undefined;
        minOffsetAvailable?: number | undefined;
    };

    export const inboundSchema: z.ZodType<TranscodeSession, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string().optional(),
            throttled: z.boolean().optional(),
            complete: z.boolean().optional(),
            progress: z.number().optional(),
            size: z.number().int().optional(),
            speed: z.number().optional(),
            error: z.boolean().optional(),
            duration: z.number().int().optional(),
            remaining: z.number().int().optional(),
            context: z.string().optional(),
            sourceVideoCodec: z.string().optional(),
            sourceAudioCodec: z.string().optional(),
            videoDecision: z.string().optional(),
            audioDecision: z.string().optional(),
            subtitleDecision: z.string().optional(),
            protocol: z.string().optional(),
            container: z.string().optional(),
            videoCodec: z.string().optional(),
            audioCodec: z.string().optional(),
            audioChannels: z.number().int().optional(),
            transcodeHwRequested: z.boolean().optional(),
            timeStamp: z.number().optional(),
            maxOffsetAvailable: z.number().optional(),
            minOffsetAvailable: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.throttled === undefined ? null : { throttled: v.throttled }),
                ...(v.complete === undefined ? null : { complete: v.complete }),
                ...(v.progress === undefined ? null : { progress: v.progress }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
                ...(v.context === undefined ? null : { context: v.context }),
                ...(v.sourceVideoCodec === undefined
                    ? null
                    : { sourceVideoCodec: v.sourceVideoCodec }),
                ...(v.sourceAudioCodec === undefined
                    ? null
                    : { sourceAudioCodec: v.sourceAudioCodec }),
                ...(v.videoDecision === undefined ? null : { videoDecision: v.videoDecision }),
                ...(v.audioDecision === undefined ? null : { audioDecision: v.audioDecision }),
                ...(v.subtitleDecision === undefined
                    ? null
                    : { subtitleDecision: v.subtitleDecision }),
                ...(v.protocol === undefined ? null : { protocol: v.protocol }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoCodec === undefined ? null : { videoCodec: v.videoCodec }),
                ...(v.audioCodec === undefined ? null : { audioCodec: v.audioCodec }),
                ...(v.audioChannels === undefined ? null : { audioChannels: v.audioChannels }),
                ...(v.transcodeHwRequested === undefined
                    ? null
                    : { transcodeHwRequested: v.transcodeHwRequested }),
                ...(v.timeStamp === undefined ? null : { timeStamp: v.timeStamp }),
                ...(v.maxOffsetAvailable === undefined
                    ? null
                    : { maxOffsetAvailable: v.maxOffsetAvailable }),
                ...(v.minOffsetAvailable === undefined
                    ? null
                    : { minOffsetAvailable: v.minOffsetAvailable }),
            };
        });

    export type Outbound = {
        key?: string | undefined;
        throttled?: boolean | undefined;
        complete?: boolean | undefined;
        progress?: number | undefined;
        size?: number | undefined;
        speed?: number | undefined;
        error?: boolean | undefined;
        duration?: number | undefined;
        remaining?: number | undefined;
        context?: string | undefined;
        sourceVideoCodec?: string | undefined;
        sourceAudioCodec?: string | undefined;
        videoDecision?: string | undefined;
        audioDecision?: string | undefined;
        subtitleDecision?: string | undefined;
        protocol?: string | undefined;
        container?: string | undefined;
        videoCodec?: string | undefined;
        audioCodec?: string | undefined;
        audioChannels?: number | undefined;
        transcodeHwRequested?: boolean | undefined;
        timeStamp?: number | undefined;
        maxOffsetAvailable?: number | undefined;
        minOffsetAvailable?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TranscodeSession> = z
        .object({
            key: z.string().optional(),
            throttled: z.boolean().optional(),
            complete: z.boolean().optional(),
            progress: z.number().optional(),
            size: z.number().int().optional(),
            speed: z.number().optional(),
            error: z.boolean().optional(),
            duration: z.number().int().optional(),
            remaining: z.number().int().optional(),
            context: z.string().optional(),
            sourceVideoCodec: z.string().optional(),
            sourceAudioCodec: z.string().optional(),
            videoDecision: z.string().optional(),
            audioDecision: z.string().optional(),
            subtitleDecision: z.string().optional(),
            protocol: z.string().optional(),
            container: z.string().optional(),
            videoCodec: z.string().optional(),
            audioCodec: z.string().optional(),
            audioChannels: z.number().int().optional(),
            transcodeHwRequested: z.boolean().optional(),
            timeStamp: z.number().optional(),
            maxOffsetAvailable: z.number().optional(),
            minOffsetAvailable: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.throttled === undefined ? null : { throttled: v.throttled }),
                ...(v.complete === undefined ? null : { complete: v.complete }),
                ...(v.progress === undefined ? null : { progress: v.progress }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
                ...(v.context === undefined ? null : { context: v.context }),
                ...(v.sourceVideoCodec === undefined
                    ? null
                    : { sourceVideoCodec: v.sourceVideoCodec }),
                ...(v.sourceAudioCodec === undefined
                    ? null
                    : { sourceAudioCodec: v.sourceAudioCodec }),
                ...(v.videoDecision === undefined ? null : { videoDecision: v.videoDecision }),
                ...(v.audioDecision === undefined ? null : { audioDecision: v.audioDecision }),
                ...(v.subtitleDecision === undefined
                    ? null
                    : { subtitleDecision: v.subtitleDecision }),
                ...(v.protocol === undefined ? null : { protocol: v.protocol }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoCodec === undefined ? null : { videoCodec: v.videoCodec }),
                ...(v.audioCodec === undefined ? null : { audioCodec: v.audioCodec }),
                ...(v.audioChannels === undefined ? null : { audioChannels: v.audioChannels }),
                ...(v.transcodeHwRequested === undefined
                    ? null
                    : { transcodeHwRequested: v.transcodeHwRequested }),
                ...(v.timeStamp === undefined ? null : { timeStamp: v.timeStamp }),
                ...(v.maxOffsetAvailable === undefined
                    ? null
                    : { maxOffsetAvailable: v.maxOffsetAvailable }),
                ...(v.minOffsetAvailable === undefined
                    ? null
                    : { minOffsetAvailable: v.minOffsetAvailable }),
            };
        });
}

/** @internal */
export namespace GetTranscodeSessionsMediaContainer$ {
    export type Inbound = {
        size?: number | undefined;
        TranscodeSession?: Array<TranscodeSession$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetTranscodeSessionsMediaContainer,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            size: z.number().int().optional(),
            TranscodeSession: z.array(z.lazy(() => TranscodeSession$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.TranscodeSession === undefined
                    ? null
                    : { transcodeSession: v.TranscodeSession }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        TranscodeSession?: Array<TranscodeSession$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTranscodeSessionsMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            transcodeSession: z.array(z.lazy(() => TranscodeSession$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.transcodeSession === undefined
                    ? null
                    : { TranscodeSession: v.transcodeSession }),
            };
        });
}

/** @internal */
export namespace GetTranscodeSessionsResponseBody$ {
    export type Inbound = {
        MediaContainer?: GetTranscodeSessionsMediaContainer$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTranscodeSessionsResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetTranscodeSessionsMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.MediaContainer === undefined
                        ? null
                        : { mediaContainer: v.MediaContainer }),
                };
            });

    export type Outbound = {
        MediaContainer?: GetTranscodeSessionsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTranscodeSessionsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetTranscodeSessionsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetTranscodeSessionsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetTranscodeSessionsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTranscodeSessionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetTranscodeSessionsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetTranscodeSessionsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTranscodeSessionsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetTranscodeSessionsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
