/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type TranscodeSession = {
    key?: string | undefined;
    throttled?: boolean | undefined;
    complete?: boolean | undefined;
    progress?: number | undefined;
    size?: number | undefined;
    speed?: number | undefined;
    error?: boolean | undefined;
    duration?: number | undefined;
    remaining?: number | undefined;
    context?: string | undefined;
    sourceVideoCodec?: string | undefined;
    sourceAudioCodec?: string | undefined;
    videoDecision?: string | undefined;
    audioDecision?: string | undefined;
    subtitleDecision?: string | undefined;
    protocol?: string | undefined;
    container?: string | undefined;
    videoCodec?: string | undefined;
    audioCodec?: string | undefined;
    audioChannels?: number | undefined;
    transcodeHwRequested?: boolean | undefined;
    timeStamp?: number | undefined;
    maxOffsetAvailable?: number | undefined;
    minOffsetAvailable?: number | undefined;
};

export type GetTranscodeSessionsMediaContainer = {
    size?: number | undefined;
    transcodeSession?: Array<TranscodeSession> | undefined;
};

/**
 * The Transcode Sessions
 */
export type GetTranscodeSessionsResponseBody = {
    mediaContainer?: GetTranscodeSessionsMediaContainer | undefined;
};

export type GetTranscodeSessionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The Transcode Sessions
     */
    object?: GetTranscodeSessionsResponseBody | undefined;
};

/** @internal */
export namespace TranscodeSession$ {
    export const inboundSchema: z.ZodType<TranscodeSession, z.ZodTypeDef, unknown> = z.object({
        key: z.string().optional(),
        throttled: z.boolean().optional(),
        complete: z.boolean().optional(),
        progress: z.number().optional(),
        size: z.number().int().optional(),
        speed: z.number().optional(),
        error: z.boolean().optional(),
        duration: z.number().int().optional(),
        remaining: z.number().int().optional(),
        context: z.string().optional(),
        sourceVideoCodec: z.string().optional(),
        sourceAudioCodec: z.string().optional(),
        videoDecision: z.string().optional(),
        audioDecision: z.string().optional(),
        subtitleDecision: z.string().optional(),
        protocol: z.string().optional(),
        container: z.string().optional(),
        videoCodec: z.string().optional(),
        audioCodec: z.string().optional(),
        audioChannels: z.number().int().optional(),
        transcodeHwRequested: z.boolean().optional(),
        timeStamp: z.number().optional(),
        maxOffsetAvailable: z.number().optional(),
        minOffsetAvailable: z.number().optional(),
    });

    export type Outbound = {
        key?: string | undefined;
        throttled?: boolean | undefined;
        complete?: boolean | undefined;
        progress?: number | undefined;
        size?: number | undefined;
        speed?: number | undefined;
        error?: boolean | undefined;
        duration?: number | undefined;
        remaining?: number | undefined;
        context?: string | undefined;
        sourceVideoCodec?: string | undefined;
        sourceAudioCodec?: string | undefined;
        videoDecision?: string | undefined;
        audioDecision?: string | undefined;
        subtitleDecision?: string | undefined;
        protocol?: string | undefined;
        container?: string | undefined;
        videoCodec?: string | undefined;
        audioCodec?: string | undefined;
        audioChannels?: number | undefined;
        transcodeHwRequested?: boolean | undefined;
        timeStamp?: number | undefined;
        maxOffsetAvailable?: number | undefined;
        minOffsetAvailable?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TranscodeSession> = z.object({
        key: z.string().optional(),
        throttled: z.boolean().optional(),
        complete: z.boolean().optional(),
        progress: z.number().optional(),
        size: z.number().int().optional(),
        speed: z.number().optional(),
        error: z.boolean().optional(),
        duration: z.number().int().optional(),
        remaining: z.number().int().optional(),
        context: z.string().optional(),
        sourceVideoCodec: z.string().optional(),
        sourceAudioCodec: z.string().optional(),
        videoDecision: z.string().optional(),
        audioDecision: z.string().optional(),
        subtitleDecision: z.string().optional(),
        protocol: z.string().optional(),
        container: z.string().optional(),
        videoCodec: z.string().optional(),
        audioCodec: z.string().optional(),
        audioChannels: z.number().int().optional(),
        transcodeHwRequested: z.boolean().optional(),
        timeStamp: z.number().optional(),
        maxOffsetAvailable: z.number().optional(),
        minOffsetAvailable: z.number().optional(),
    });
}

/** @internal */
export namespace GetTranscodeSessionsMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetTranscodeSessionsMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            TranscodeSession: z.array(z.lazy(() => TranscodeSession$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                TranscodeSession: "transcodeSession",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        TranscodeSession?: Array<TranscodeSession$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTranscodeSessionsMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            transcodeSession: z.array(z.lazy(() => TranscodeSession$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                transcodeSession: "TranscodeSession",
            });
        });
}

/** @internal */
export namespace GetTranscodeSessionsResponseBody$ {
    export const inboundSchema: z.ZodType<GetTranscodeSessionsResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetTranscodeSessionsMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    MediaContainer: "mediaContainer",
                });
            });

    export type Outbound = {
        MediaContainer?: GetTranscodeSessionsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTranscodeSessionsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetTranscodeSessionsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetTranscodeSessionsResponse$ {
    export const inboundSchema: z.ZodType<GetTranscodeSessionsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetTranscodeSessionsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetTranscodeSessionsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTranscodeSessionsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetTranscodeSessionsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
