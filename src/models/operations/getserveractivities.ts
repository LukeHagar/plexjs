/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type Context = {
    librarySectionID?: string | undefined;
};

export type Activity = {
    uuid?: string | undefined;
    type?: string | undefined;
    cancellable?: boolean | undefined;
    userID?: number | undefined;
    title?: string | undefined;
    subtitle?: string | undefined;
    progress?: number | undefined;
    context?: Context | undefined;
};

export type GetServerActivitiesMediaContainer = {
    size?: number | undefined;
    activity?: Array<Activity> | undefined;
};

/**
 * The Server Activities
 */
export type GetServerActivitiesResponseBody = {
    mediaContainer?: GetServerActivitiesMediaContainer | undefined;
};

export type GetServerActivitiesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The Server Activities
     */
    object?: GetServerActivitiesResponseBody | undefined;
};

/** @internal */
export namespace Context$ {
    export const inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> = z.object({
        librarySectionID: z.string().optional(),
    });

    export type Outbound = {
        librarySectionID?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Context> = z.object({
        librarySectionID: z.string().optional(),
    });
}

/** @internal */
export namespace Activity$ {
    export const inboundSchema: z.ZodType<Activity, z.ZodTypeDef, unknown> = z
        .object({
            uuid: z.string().optional(),
            type: z.string().optional(),
            cancellable: z.boolean().optional(),
            userID: z.number().optional(),
            title: z.string().optional(),
            subtitle: z.string().optional(),
            progress: z.number().optional(),
            Context: z.lazy(() => Context$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Context: "context",
            });
        });

    export type Outbound = {
        uuid?: string | undefined;
        type?: string | undefined;
        cancellable?: boolean | undefined;
        userID?: number | undefined;
        title?: string | undefined;
        subtitle?: string | undefined;
        progress?: number | undefined;
        Context?: Context$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Activity> = z
        .object({
            uuid: z.string().optional(),
            type: z.string().optional(),
            cancellable: z.boolean().optional(),
            userID: z.number().optional(),
            title: z.string().optional(),
            subtitle: z.string().optional(),
            progress: z.number().optional(),
            context: z.lazy(() => Context$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                context: "Context",
            });
        });
}

/** @internal */
export namespace GetServerActivitiesMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetServerActivitiesMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().optional(),
            Activity: z.array(z.lazy(() => Activity$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Activity: "activity",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Activity?: Array<Activity$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetServerActivitiesMediaContainer
    > = z
        .object({
            size: z.number().optional(),
            activity: z.array(z.lazy(() => Activity$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                activity: "Activity",
            });
        });
}

/** @internal */
export namespace GetServerActivitiesResponseBody$ {
    export const inboundSchema: z.ZodType<GetServerActivitiesResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetServerActivitiesMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    MediaContainer: "mediaContainer",
                });
            });

    export type Outbound = {
        MediaContainer?: GetServerActivitiesMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetServerActivitiesResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetServerActivitiesMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetServerActivitiesResponse$ {
    export const inboundSchema: z.ZodType<GetServerActivitiesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetServerActivitiesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetServerActivitiesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerActivitiesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetServerActivitiesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
