/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type Setting = {
    id?: string | undefined;
    label?: string | undefined;
    summary?: string | undefined;
    type?: string | undefined;
    default?: boolean | undefined;
    value?: boolean | undefined;
    hidden?: boolean | undefined;
    advanced?: boolean | undefined;
    group?: string | undefined;
    enumValues?: string | undefined;
};

export type GetServerPreferencesMediaContainer = {
    size?: number | undefined;
    setting?: Array<Setting> | undefined;
};

/**
 * Server Preferences
 */
export type GetServerPreferencesResponseBody = {
    mediaContainer?: GetServerPreferencesMediaContainer | undefined;
};

export type GetServerPreferencesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Server Preferences
     */
    object?: GetServerPreferencesResponseBody | undefined;
};

/** @internal */
export namespace Setting$ {
    export const inboundSchema: z.ZodType<Setting, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        label: z.string().optional(),
        summary: z.string().optional(),
        type: z.string().optional(),
        default: z.boolean().optional(),
        value: z.boolean().optional(),
        hidden: z.boolean().optional(),
        advanced: z.boolean().optional(),
        group: z.string().optional(),
        enumValues: z.string().optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        label?: string | undefined;
        summary?: string | undefined;
        type?: string | undefined;
        default?: boolean | undefined;
        value?: boolean | undefined;
        hidden?: boolean | undefined;
        advanced?: boolean | undefined;
        group?: string | undefined;
        enumValues?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Setting> = z.object({
        id: z.string().optional(),
        label: z.string().optional(),
        summary: z.string().optional(),
        type: z.string().optional(),
        default: z.boolean().optional(),
        value: z.boolean().optional(),
        hidden: z.boolean().optional(),
        advanced: z.boolean().optional(),
        group: z.string().optional(),
        enumValues: z.string().optional(),
    });
}

/** @internal */
export namespace GetServerPreferencesMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetServerPreferencesMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            Setting: z.array(z.lazy(() => Setting$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Setting: "setting",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Setting?: Array<Setting$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetServerPreferencesMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            setting: z.array(z.lazy(() => Setting$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                setting: "Setting",
            });
        });
}

/** @internal */
export namespace GetServerPreferencesResponseBody$ {
    export const inboundSchema: z.ZodType<GetServerPreferencesResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetServerPreferencesMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    MediaContainer: "mediaContainer",
                });
            });

    export type Outbound = {
        MediaContainer?: GetServerPreferencesMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetServerPreferencesResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetServerPreferencesMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetServerPreferencesResponse$ {
    export const inboundSchema: z.ZodType<GetServerPreferencesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetServerPreferencesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetServerPreferencesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerPreferencesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetServerPreferencesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
