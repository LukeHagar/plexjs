/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * `delegation` - This is the only supported `type` parameter.
 */
export enum GetTransientTokenQueryParamType {
    Delegation = "delegation",
}

/**
 * `all` - This is the only supported `scope` parameter.
 */
export enum Scope {
    All = "all",
}

export type GetTransientTokenRequest = {
    /**
     * `delegation` - This is the only supported `type` parameter.
     */
    type: GetTransientTokenQueryParamType;
    /**
     * `all` - This is the only supported `scope` parameter.
     */
    scope: Scope;
};

export type GetTransientTokenResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetTransientTokenQueryParamType$ {
    export const inboundSchema = z.nativeEnum(GetTransientTokenQueryParamType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Scope$ {
    export const inboundSchema = z.nativeEnum(Scope);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetTransientTokenRequest$ {
    export const inboundSchema: z.ZodType<GetTransientTokenRequest, z.ZodTypeDef, unknown> =
        z.object({
            type: GetTransientTokenQueryParamType$.inboundSchema,
            scope: Scope$.inboundSchema,
        });

    export type Outbound = {
        type: string;
        scope: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransientTokenRequest> =
        z.object({
            type: GetTransientTokenQueryParamType$.outboundSchema,
            scope: Scope$.outboundSchema,
        });
}

/** @internal */
export namespace GetTransientTokenResponse$ {
    export const inboundSchema: z.ZodType<GetTransientTokenResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransientTokenResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
