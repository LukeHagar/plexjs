/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetStatisticsRequest = {
    /**
     * The timespan to retrieve statistics for
     *
     * @remarks
     * the exact meaning of this parameter is not known
     *
     */
    timespan?: number | undefined;
};

export type GetStatisticsDevice = {
    id?: number | undefined;
    name?: string | undefined;
    platform?: string | undefined;
    clientIdentifier?: string | undefined;
    createdAt?: number | undefined;
};

export type Account = {
    id?: number | undefined;
    key?: string | undefined;
    name?: string | undefined;
    defaultAudioLanguage?: string | undefined;
    autoSelectAudio?: boolean | undefined;
    defaultSubtitleLanguage?: string | undefined;
    subtitleMode?: number | undefined;
    thumb?: string | undefined;
};

export type StatisticsMedia = {
    accountID?: number | undefined;
    deviceID?: number | undefined;
    timespan?: number | undefined;
    at?: number | undefined;
    metadataType?: number | undefined;
    count?: number | undefined;
    duration?: number | undefined;
};

export type GetStatisticsMediaContainer = {
    size?: number | undefined;
    device?: Array<GetStatisticsDevice> | undefined;
    account?: Array<Account> | undefined;
    statisticsMedia?: Array<StatisticsMedia> | undefined;
};

/**
 * Media Statistics
 */
export type GetStatisticsResponseBody = {
    mediaContainer?: GetStatisticsMediaContainer | undefined;
};

export type GetStatisticsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Media Statistics
     */
    object?: GetStatisticsResponseBody | undefined;
};

/** @internal */
export namespace GetStatisticsRequest$ {
    export type Inbound = {
        Timespan?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetStatisticsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            Timespan: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.Timespan === undefined ? null : { timespan: v.Timespan }),
            };
        });

    export type Outbound = {
        Timespan?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsRequest> = z
        .object({
            timespan: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timespan === undefined ? null : { Timespan: v.timespan }),
            };
        });
}

/** @internal */
export namespace GetStatisticsDevice$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetStatisticsDevice, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            platform: z.string().optional(),
            clientIdentifier: z.string().optional(),
            createdAt: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.clientIdentifier === undefined
                    ? null
                    : { clientIdentifier: v.clientIdentifier }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsDevice> = z
        .object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            platform: z.string().optional(),
            clientIdentifier: z.string().optional(),
            createdAt: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.clientIdentifier === undefined
                    ? null
                    : { clientIdentifier: v.clientIdentifier }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
            };
        });
}

/** @internal */
export namespace Account$ {
    export type Inbound = {
        id?: number | undefined;
        key?: string | undefined;
        name?: string | undefined;
        defaultAudioLanguage?: string | undefined;
        autoSelectAudio?: boolean | undefined;
        defaultSubtitleLanguage?: string | undefined;
        subtitleMode?: number | undefined;
        thumb?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            name: z.string().optional(),
            defaultAudioLanguage: z.string().optional(),
            autoSelectAudio: z.boolean().optional(),
            defaultSubtitleLanguage: z.string().optional(),
            subtitleMode: z.number().int().optional(),
            thumb: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.defaultAudioLanguage === undefined
                    ? null
                    : { defaultAudioLanguage: v.defaultAudioLanguage }),
                ...(v.autoSelectAudio === undefined
                    ? null
                    : { autoSelectAudio: v.autoSelectAudio }),
                ...(v.defaultSubtitleLanguage === undefined
                    ? null
                    : { defaultSubtitleLanguage: v.defaultSubtitleLanguage }),
                ...(v.subtitleMode === undefined ? null : { subtitleMode: v.subtitleMode }),
                ...(v.thumb === undefined ? null : { thumb: v.thumb }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        name?: string | undefined;
        defaultAudioLanguage?: string | undefined;
        autoSelectAudio?: boolean | undefined;
        defaultSubtitleLanguage?: string | undefined;
        subtitleMode?: number | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z
        .object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            name: z.string().optional(),
            defaultAudioLanguage: z.string().optional(),
            autoSelectAudio: z.boolean().optional(),
            defaultSubtitleLanguage: z.string().optional(),
            subtitleMode: z.number().int().optional(),
            thumb: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.defaultAudioLanguage === undefined
                    ? null
                    : { defaultAudioLanguage: v.defaultAudioLanguage }),
                ...(v.autoSelectAudio === undefined
                    ? null
                    : { autoSelectAudio: v.autoSelectAudio }),
                ...(v.defaultSubtitleLanguage === undefined
                    ? null
                    : { defaultSubtitleLanguage: v.defaultSubtitleLanguage }),
                ...(v.subtitleMode === undefined ? null : { subtitleMode: v.subtitleMode }),
                ...(v.thumb === undefined ? null : { thumb: v.thumb }),
            };
        });
}

/** @internal */
export namespace StatisticsMedia$ {
    export type Inbound = {
        accountID?: number | undefined;
        deviceID?: number | undefined;
        timespan?: number | undefined;
        at?: number | undefined;
        metadataType?: number | undefined;
        count?: number | undefined;
        duration?: number | undefined;
    };

    export const inboundSchema: z.ZodType<StatisticsMedia, z.ZodTypeDef, Inbound> = z
        .object({
            accountID: z.number().int().optional(),
            deviceID: z.number().int().optional(),
            timespan: z.number().int().optional(),
            at: z.number().int().optional(),
            metadataType: z.number().int().optional(),
            count: z.number().int().optional(),
            duration: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountID === undefined ? null : { accountID: v.accountID }),
                ...(v.deviceID === undefined ? null : { deviceID: v.deviceID }),
                ...(v.timespan === undefined ? null : { timespan: v.timespan }),
                ...(v.at === undefined ? null : { at: v.at }),
                ...(v.metadataType === undefined ? null : { metadataType: v.metadataType }),
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
            };
        });

    export type Outbound = {
        accountID?: number | undefined;
        deviceID?: number | undefined;
        timespan?: number | undefined;
        at?: number | undefined;
        metadataType?: number | undefined;
        count?: number | undefined;
        duration?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StatisticsMedia> = z
        .object({
            accountID: z.number().int().optional(),
            deviceID: z.number().int().optional(),
            timespan: z.number().int().optional(),
            at: z.number().int().optional(),
            metadataType: z.number().int().optional(),
            count: z.number().int().optional(),
            duration: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountID === undefined ? null : { accountID: v.accountID }),
                ...(v.deviceID === undefined ? null : { deviceID: v.deviceID }),
                ...(v.timespan === undefined ? null : { timespan: v.timespan }),
                ...(v.at === undefined ? null : { at: v.at }),
                ...(v.metadataType === undefined ? null : { metadataType: v.metadataType }),
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
            };
        });
}

/** @internal */
export namespace GetStatisticsMediaContainer$ {
    export type Inbound = {
        size?: number | undefined;
        Device?: Array<GetStatisticsDevice$.Inbound> | undefined;
        Account?: Array<Account$.Inbound> | undefined;
        StatisticsMedia?: Array<StatisticsMedia$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetStatisticsMediaContainer, z.ZodTypeDef, Inbound> = z
        .object({
            size: z.number().int().optional(),
            Device: z.array(z.lazy(() => GetStatisticsDevice$.inboundSchema)).optional(),
            Account: z.array(z.lazy(() => Account$.inboundSchema)).optional(),
            StatisticsMedia: z.array(z.lazy(() => StatisticsMedia$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.Device === undefined ? null : { device: v.Device }),
                ...(v.Account === undefined ? null : { account: v.Account }),
                ...(v.StatisticsMedia === undefined
                    ? null
                    : { statisticsMedia: v.StatisticsMedia }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        Device?: Array<GetStatisticsDevice$.Outbound> | undefined;
        Account?: Array<Account$.Outbound> | undefined;
        StatisticsMedia?: Array<StatisticsMedia$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            device: z.array(z.lazy(() => GetStatisticsDevice$.outboundSchema)).optional(),
            account: z.array(z.lazy(() => Account$.outboundSchema)).optional(),
            statisticsMedia: z.array(z.lazy(() => StatisticsMedia$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.device === undefined ? null : { Device: v.device }),
                ...(v.account === undefined ? null : { Account: v.account }),
                ...(v.statisticsMedia === undefined
                    ? null
                    : { StatisticsMedia: v.statisticsMedia }),
            };
        });
}

/** @internal */
export namespace GetStatisticsResponseBody$ {
    export type Inbound = {
        MediaContainer?: GetStatisticsMediaContainer$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetStatisticsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            MediaContainer: z.lazy(() => GetStatisticsMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.MediaContainer === undefined ? null : { mediaContainer: v.MediaContainer }),
            };
        });

    export type Outbound = {
        MediaContainer?: GetStatisticsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetStatisticsMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetStatisticsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetStatisticsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetStatisticsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetStatisticsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetStatisticsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetStatisticsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
