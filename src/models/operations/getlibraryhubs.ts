/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
 */
export enum QueryParamOnlyTransient {
    Zero = 0,
    One = 1,
}

export type GetLibraryHubsRequest = {
    /**
     * the Id of the library to query
     */
    sectionId: number;
    /**
     * The number of items to return with each hub.
     */
    count?: number | undefined;
    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    onlyTransient?: QueryParamOnlyTransient | undefined;
};

export type GetLibraryHubsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const QueryParamOnlyTransient$ = z.nativeEnum(QueryParamOnlyTransient);

/** @internal */
export namespace GetLibraryHubsRequest$ {
    export type Inbound = {
        sectionId: number;
        count?: number | undefined;
        onlyTransient?: QueryParamOnlyTransient | undefined;
    };

    export const inboundSchema: z.ZodType<GetLibraryHubsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            sectionId: z.number(),
            count: z.number().optional(),
            onlyTransient: QueryParamOnlyTransient$.optional(),
        })
        .transform((v) => {
            return {
                sectionId: v.sectionId,
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.onlyTransient === undefined ? null : { onlyTransient: v.onlyTransient }),
            };
        });

    export type Outbound = {
        sectionId: number;
        count?: number | undefined;
        onlyTransient?: QueryParamOnlyTransient | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryHubsRequest> = z
        .object({
            sectionId: z.number(),
            count: z.number().optional(),
            onlyTransient: QueryParamOnlyTransient$.optional(),
        })
        .transform((v) => {
            return {
                sectionId: v.sectionId,
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.onlyTransient === undefined ? null : { onlyTransient: v.onlyTransient }),
            };
        });
}

/** @internal */
export namespace GetLibraryHubsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetLibraryHubsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryHubsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
