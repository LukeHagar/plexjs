/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * limit to a type of playlist.
 */
export enum PlaylistType {
    Audio = "audio",
    Video = "video",
    Photo = "photo",
}

/**
 * type of playlists to return (default is all).
 */
export enum QueryParamSmart {
    Zero = 0,
    One = 1,
}

export type GetPlaylistsRequest = {
    /**
     * limit to a type of playlist.
     */
    playlistType?: PlaylistType | undefined;
    /**
     * type of playlists to return (default is all).
     */
    smart?: QueryParamSmart | undefined;
};

export type GetPlaylistsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const PlaylistType$ = z.nativeEnum(PlaylistType);

/** @internal */
export const QueryParamSmart$ = z.nativeEnum(QueryParamSmart);

/** @internal */
export namespace GetPlaylistsRequest$ {
    export type Inbound = {
        playlistType?: PlaylistType | undefined;
        smart?: QueryParamSmart | undefined;
    };

    export const inboundSchema: z.ZodType<GetPlaylistsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            playlistType: PlaylistType$.optional(),
            smart: QueryParamSmart$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.playlistType === undefined ? null : { playlistType: v.playlistType }),
                ...(v.smart === undefined ? null : { smart: v.smart }),
            };
        });

    export type Outbound = {
        playlistType?: PlaylistType | undefined;
        smart?: QueryParamSmart | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsRequest> = z
        .object({
            playlistType: PlaylistType$.optional(),
            smart: QueryParamSmart$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.playlistType === undefined ? null : { playlistType: v.playlistType }),
                ...(v.smart === undefined ? null : { smart: v.smart }),
            };
        });
}

/** @internal */
export namespace GetPlaylistsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetPlaylistsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
