/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Directory = {
    count?: number | undefined;
    key?: string | undefined;
    title?: string | undefined;
};

export type MediaContainer = {
    size?: number | undefined;
    allowCameraUpload?: boolean | undefined;
    allowChannelAccess?: boolean | undefined;
    allowMediaDeletion?: boolean | undefined;
    allowSharing?: boolean | undefined;
    allowSync?: boolean | undefined;
    allowTuners?: boolean | undefined;
    backgroundProcessing?: boolean | undefined;
    certificate?: boolean | undefined;
    companionProxy?: boolean | undefined;
    countryCode?: string | undefined;
    diagnostics?: string | undefined;
    eventStream?: boolean | undefined;
    friendlyName?: string | undefined;
    hubSearch?: boolean | undefined;
    itemClusters?: boolean | undefined;
    livetv?: number | undefined;
    machineIdentifier?: string | undefined;
    mediaProviders?: boolean | undefined;
    multiuser?: boolean | undefined;
    musicAnalysis?: number | undefined;
    myPlex?: boolean | undefined;
    myPlexMappingState?: string | undefined;
    myPlexSigninState?: string | undefined;
    myPlexSubscription?: boolean | undefined;
    myPlexUsername?: string | undefined;
    offlineTranscode?: number | undefined;
    ownerFeatures?: string | undefined;
    photoAutoTag?: boolean | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    pluginHost?: boolean | undefined;
    pushNotifications?: boolean | undefined;
    readOnlyLibraries?: boolean | undefined;
    streamingBrainABRVersion?: number | undefined;
    streamingBrainVersion?: number | undefined;
    sync?: boolean | undefined;
    transcoderActiveVideoSessions?: number | undefined;
    transcoderAudio?: boolean | undefined;
    transcoderLyrics?: boolean | undefined;
    transcoderPhoto?: boolean | undefined;
    transcoderSubtitles?: boolean | undefined;
    transcoderVideo?: boolean | undefined;
    transcoderVideoBitrates?: string | undefined;
    transcoderVideoQualities?: string | undefined;
    transcoderVideoResolutions?: string | undefined;
    updatedAt?: number | undefined;
    updater?: boolean | undefined;
    version?: string | undefined;
    voiceSearch?: boolean | undefined;
    directory?: Array<Directory> | undefined;
};

/**
 * The Server Capabilities
 */
export type GetServerCapabilitiesResponseBody = {
    mediaContainer?: MediaContainer | undefined;
};

export type GetServerCapabilitiesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The Server Capabilities
     */
    object?: GetServerCapabilitiesResponseBody | undefined;
};

/** @internal */
export namespace Directory$ {
    export const inboundSchema: z.ZodType<Directory, z.ZodTypeDef, unknown> = z
        .object({
            count: z.number().optional(),
            key: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
        key?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Directory> = z
        .object({
            count: z.number().optional(),
            key: z.string().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}

/** @internal */
export namespace MediaContainer$ {
    export const inboundSchema: z.ZodType<MediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().optional(),
            allowCameraUpload: z.boolean().optional(),
            allowChannelAccess: z.boolean().optional(),
            allowMediaDeletion: z.boolean().optional(),
            allowSharing: z.boolean().optional(),
            allowSync: z.boolean().optional(),
            allowTuners: z.boolean().optional(),
            backgroundProcessing: z.boolean().optional(),
            certificate: z.boolean().optional(),
            companionProxy: z.boolean().optional(),
            countryCode: z.string().optional(),
            diagnostics: z.string().optional(),
            eventStream: z.boolean().optional(),
            friendlyName: z.string().optional(),
            hubSearch: z.boolean().optional(),
            itemClusters: z.boolean().optional(),
            livetv: z.number().optional(),
            machineIdentifier: z.string().optional(),
            mediaProviders: z.boolean().optional(),
            multiuser: z.boolean().optional(),
            musicAnalysis: z.number().optional(),
            myPlex: z.boolean().optional(),
            myPlexMappingState: z.string().optional(),
            myPlexSigninState: z.string().optional(),
            myPlexSubscription: z.boolean().optional(),
            myPlexUsername: z.string().optional(),
            offlineTranscode: z.number().optional(),
            ownerFeatures: z.string().optional(),
            photoAutoTag: z.boolean().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            pluginHost: z.boolean().optional(),
            pushNotifications: z.boolean().optional(),
            readOnlyLibraries: z.boolean().optional(),
            streamingBrainABRVersion: z.number().optional(),
            streamingBrainVersion: z.number().optional(),
            sync: z.boolean().optional(),
            transcoderActiveVideoSessions: z.number().optional(),
            transcoderAudio: z.boolean().optional(),
            transcoderLyrics: z.boolean().optional(),
            transcoderPhoto: z.boolean().optional(),
            transcoderSubtitles: z.boolean().optional(),
            transcoderVideo: z.boolean().optional(),
            transcoderVideoBitrates: z.string().optional(),
            transcoderVideoQualities: z.string().optional(),
            transcoderVideoResolutions: z.string().optional(),
            updatedAt: z.number().optional(),
            updater: z.boolean().optional(),
            version: z.string().optional(),
            voiceSearch: z.boolean().optional(),
            Directory: z.array(z.lazy(() => Directory$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.allowCameraUpload === undefined
                    ? null
                    : { allowCameraUpload: v.allowCameraUpload }),
                ...(v.allowChannelAccess === undefined
                    ? null
                    : { allowChannelAccess: v.allowChannelAccess }),
                ...(v.allowMediaDeletion === undefined
                    ? null
                    : { allowMediaDeletion: v.allowMediaDeletion }),
                ...(v.allowSharing === undefined ? null : { allowSharing: v.allowSharing }),
                ...(v.allowSync === undefined ? null : { allowSync: v.allowSync }),
                ...(v.allowTuners === undefined ? null : { allowTuners: v.allowTuners }),
                ...(v.backgroundProcessing === undefined
                    ? null
                    : { backgroundProcessing: v.backgroundProcessing }),
                ...(v.certificate === undefined ? null : { certificate: v.certificate }),
                ...(v.companionProxy === undefined ? null : { companionProxy: v.companionProxy }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.diagnostics === undefined ? null : { diagnostics: v.diagnostics }),
                ...(v.eventStream === undefined ? null : { eventStream: v.eventStream }),
                ...(v.friendlyName === undefined ? null : { friendlyName: v.friendlyName }),
                ...(v.hubSearch === undefined ? null : { hubSearch: v.hubSearch }),
                ...(v.itemClusters === undefined ? null : { itemClusters: v.itemClusters }),
                ...(v.livetv === undefined ? null : { livetv: v.livetv }),
                ...(v.machineIdentifier === undefined
                    ? null
                    : { machineIdentifier: v.machineIdentifier }),
                ...(v.mediaProviders === undefined ? null : { mediaProviders: v.mediaProviders }),
                ...(v.multiuser === undefined ? null : { multiuser: v.multiuser }),
                ...(v.musicAnalysis === undefined ? null : { musicAnalysis: v.musicAnalysis }),
                ...(v.myPlex === undefined ? null : { myPlex: v.myPlex }),
                ...(v.myPlexMappingState === undefined
                    ? null
                    : { myPlexMappingState: v.myPlexMappingState }),
                ...(v.myPlexSigninState === undefined
                    ? null
                    : { myPlexSigninState: v.myPlexSigninState }),
                ...(v.myPlexSubscription === undefined
                    ? null
                    : { myPlexSubscription: v.myPlexSubscription }),
                ...(v.myPlexUsername === undefined ? null : { myPlexUsername: v.myPlexUsername }),
                ...(v.offlineTranscode === undefined
                    ? null
                    : { offlineTranscode: v.offlineTranscode }),
                ...(v.ownerFeatures === undefined ? null : { ownerFeatures: v.ownerFeatures }),
                ...(v.photoAutoTag === undefined ? null : { photoAutoTag: v.photoAutoTag }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.pluginHost === undefined ? null : { pluginHost: v.pluginHost }),
                ...(v.pushNotifications === undefined
                    ? null
                    : { pushNotifications: v.pushNotifications }),
                ...(v.readOnlyLibraries === undefined
                    ? null
                    : { readOnlyLibraries: v.readOnlyLibraries }),
                ...(v.streamingBrainABRVersion === undefined
                    ? null
                    : { streamingBrainABRVersion: v.streamingBrainABRVersion }),
                ...(v.streamingBrainVersion === undefined
                    ? null
                    : { streamingBrainVersion: v.streamingBrainVersion }),
                ...(v.sync === undefined ? null : { sync: v.sync }),
                ...(v.transcoderActiveVideoSessions === undefined
                    ? null
                    : { transcoderActiveVideoSessions: v.transcoderActiveVideoSessions }),
                ...(v.transcoderAudio === undefined
                    ? null
                    : { transcoderAudio: v.transcoderAudio }),
                ...(v.transcoderLyrics === undefined
                    ? null
                    : { transcoderLyrics: v.transcoderLyrics }),
                ...(v.transcoderPhoto === undefined
                    ? null
                    : { transcoderPhoto: v.transcoderPhoto }),
                ...(v.transcoderSubtitles === undefined
                    ? null
                    : { transcoderSubtitles: v.transcoderSubtitles }),
                ...(v.transcoderVideo === undefined
                    ? null
                    : { transcoderVideo: v.transcoderVideo }),
                ...(v.transcoderVideoBitrates === undefined
                    ? null
                    : { transcoderVideoBitrates: v.transcoderVideoBitrates }),
                ...(v.transcoderVideoQualities === undefined
                    ? null
                    : { transcoderVideoQualities: v.transcoderVideoQualities }),
                ...(v.transcoderVideoResolutions === undefined
                    ? null
                    : { transcoderVideoResolutions: v.transcoderVideoResolutions }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.updater === undefined ? null : { updater: v.updater }),
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.voiceSearch === undefined ? null : { voiceSearch: v.voiceSearch }),
                ...(v.Directory === undefined ? null : { directory: v.Directory }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        allowCameraUpload?: boolean | undefined;
        allowChannelAccess?: boolean | undefined;
        allowMediaDeletion?: boolean | undefined;
        allowSharing?: boolean | undefined;
        allowSync?: boolean | undefined;
        allowTuners?: boolean | undefined;
        backgroundProcessing?: boolean | undefined;
        certificate?: boolean | undefined;
        companionProxy?: boolean | undefined;
        countryCode?: string | undefined;
        diagnostics?: string | undefined;
        eventStream?: boolean | undefined;
        friendlyName?: string | undefined;
        hubSearch?: boolean | undefined;
        itemClusters?: boolean | undefined;
        livetv?: number | undefined;
        machineIdentifier?: string | undefined;
        mediaProviders?: boolean | undefined;
        multiuser?: boolean | undefined;
        musicAnalysis?: number | undefined;
        myPlex?: boolean | undefined;
        myPlexMappingState?: string | undefined;
        myPlexSigninState?: string | undefined;
        myPlexSubscription?: boolean | undefined;
        myPlexUsername?: string | undefined;
        offlineTranscode?: number | undefined;
        ownerFeatures?: string | undefined;
        photoAutoTag?: boolean | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        pluginHost?: boolean | undefined;
        pushNotifications?: boolean | undefined;
        readOnlyLibraries?: boolean | undefined;
        streamingBrainABRVersion?: number | undefined;
        streamingBrainVersion?: number | undefined;
        sync?: boolean | undefined;
        transcoderActiveVideoSessions?: number | undefined;
        transcoderAudio?: boolean | undefined;
        transcoderLyrics?: boolean | undefined;
        transcoderPhoto?: boolean | undefined;
        transcoderSubtitles?: boolean | undefined;
        transcoderVideo?: boolean | undefined;
        transcoderVideoBitrates?: string | undefined;
        transcoderVideoQualities?: string | undefined;
        transcoderVideoResolutions?: string | undefined;
        updatedAt?: number | undefined;
        updater?: boolean | undefined;
        version?: string | undefined;
        voiceSearch?: boolean | undefined;
        Directory?: Array<Directory$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MediaContainer> = z
        .object({
            size: z.number().optional(),
            allowCameraUpload: z.boolean().optional(),
            allowChannelAccess: z.boolean().optional(),
            allowMediaDeletion: z.boolean().optional(),
            allowSharing: z.boolean().optional(),
            allowSync: z.boolean().optional(),
            allowTuners: z.boolean().optional(),
            backgroundProcessing: z.boolean().optional(),
            certificate: z.boolean().optional(),
            companionProxy: z.boolean().optional(),
            countryCode: z.string().optional(),
            diagnostics: z.string().optional(),
            eventStream: z.boolean().optional(),
            friendlyName: z.string().optional(),
            hubSearch: z.boolean().optional(),
            itemClusters: z.boolean().optional(),
            livetv: z.number().optional(),
            machineIdentifier: z.string().optional(),
            mediaProviders: z.boolean().optional(),
            multiuser: z.boolean().optional(),
            musicAnalysis: z.number().optional(),
            myPlex: z.boolean().optional(),
            myPlexMappingState: z.string().optional(),
            myPlexSigninState: z.string().optional(),
            myPlexSubscription: z.boolean().optional(),
            myPlexUsername: z.string().optional(),
            offlineTranscode: z.number().optional(),
            ownerFeatures: z.string().optional(),
            photoAutoTag: z.boolean().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            pluginHost: z.boolean().optional(),
            pushNotifications: z.boolean().optional(),
            readOnlyLibraries: z.boolean().optional(),
            streamingBrainABRVersion: z.number().optional(),
            streamingBrainVersion: z.number().optional(),
            sync: z.boolean().optional(),
            transcoderActiveVideoSessions: z.number().optional(),
            transcoderAudio: z.boolean().optional(),
            transcoderLyrics: z.boolean().optional(),
            transcoderPhoto: z.boolean().optional(),
            transcoderSubtitles: z.boolean().optional(),
            transcoderVideo: z.boolean().optional(),
            transcoderVideoBitrates: z.string().optional(),
            transcoderVideoQualities: z.string().optional(),
            transcoderVideoResolutions: z.string().optional(),
            updatedAt: z.number().optional(),
            updater: z.boolean().optional(),
            version: z.string().optional(),
            voiceSearch: z.boolean().optional(),
            directory: z.array(z.lazy(() => Directory$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.allowCameraUpload === undefined
                    ? null
                    : { allowCameraUpload: v.allowCameraUpload }),
                ...(v.allowChannelAccess === undefined
                    ? null
                    : { allowChannelAccess: v.allowChannelAccess }),
                ...(v.allowMediaDeletion === undefined
                    ? null
                    : { allowMediaDeletion: v.allowMediaDeletion }),
                ...(v.allowSharing === undefined ? null : { allowSharing: v.allowSharing }),
                ...(v.allowSync === undefined ? null : { allowSync: v.allowSync }),
                ...(v.allowTuners === undefined ? null : { allowTuners: v.allowTuners }),
                ...(v.backgroundProcessing === undefined
                    ? null
                    : { backgroundProcessing: v.backgroundProcessing }),
                ...(v.certificate === undefined ? null : { certificate: v.certificate }),
                ...(v.companionProxy === undefined ? null : { companionProxy: v.companionProxy }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.diagnostics === undefined ? null : { diagnostics: v.diagnostics }),
                ...(v.eventStream === undefined ? null : { eventStream: v.eventStream }),
                ...(v.friendlyName === undefined ? null : { friendlyName: v.friendlyName }),
                ...(v.hubSearch === undefined ? null : { hubSearch: v.hubSearch }),
                ...(v.itemClusters === undefined ? null : { itemClusters: v.itemClusters }),
                ...(v.livetv === undefined ? null : { livetv: v.livetv }),
                ...(v.machineIdentifier === undefined
                    ? null
                    : { machineIdentifier: v.machineIdentifier }),
                ...(v.mediaProviders === undefined ? null : { mediaProviders: v.mediaProviders }),
                ...(v.multiuser === undefined ? null : { multiuser: v.multiuser }),
                ...(v.musicAnalysis === undefined ? null : { musicAnalysis: v.musicAnalysis }),
                ...(v.myPlex === undefined ? null : { myPlex: v.myPlex }),
                ...(v.myPlexMappingState === undefined
                    ? null
                    : { myPlexMappingState: v.myPlexMappingState }),
                ...(v.myPlexSigninState === undefined
                    ? null
                    : { myPlexSigninState: v.myPlexSigninState }),
                ...(v.myPlexSubscription === undefined
                    ? null
                    : { myPlexSubscription: v.myPlexSubscription }),
                ...(v.myPlexUsername === undefined ? null : { myPlexUsername: v.myPlexUsername }),
                ...(v.offlineTranscode === undefined
                    ? null
                    : { offlineTranscode: v.offlineTranscode }),
                ...(v.ownerFeatures === undefined ? null : { ownerFeatures: v.ownerFeatures }),
                ...(v.photoAutoTag === undefined ? null : { photoAutoTag: v.photoAutoTag }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.pluginHost === undefined ? null : { pluginHost: v.pluginHost }),
                ...(v.pushNotifications === undefined
                    ? null
                    : { pushNotifications: v.pushNotifications }),
                ...(v.readOnlyLibraries === undefined
                    ? null
                    : { readOnlyLibraries: v.readOnlyLibraries }),
                ...(v.streamingBrainABRVersion === undefined
                    ? null
                    : { streamingBrainABRVersion: v.streamingBrainABRVersion }),
                ...(v.streamingBrainVersion === undefined
                    ? null
                    : { streamingBrainVersion: v.streamingBrainVersion }),
                ...(v.sync === undefined ? null : { sync: v.sync }),
                ...(v.transcoderActiveVideoSessions === undefined
                    ? null
                    : { transcoderActiveVideoSessions: v.transcoderActiveVideoSessions }),
                ...(v.transcoderAudio === undefined
                    ? null
                    : { transcoderAudio: v.transcoderAudio }),
                ...(v.transcoderLyrics === undefined
                    ? null
                    : { transcoderLyrics: v.transcoderLyrics }),
                ...(v.transcoderPhoto === undefined
                    ? null
                    : { transcoderPhoto: v.transcoderPhoto }),
                ...(v.transcoderSubtitles === undefined
                    ? null
                    : { transcoderSubtitles: v.transcoderSubtitles }),
                ...(v.transcoderVideo === undefined
                    ? null
                    : { transcoderVideo: v.transcoderVideo }),
                ...(v.transcoderVideoBitrates === undefined
                    ? null
                    : { transcoderVideoBitrates: v.transcoderVideoBitrates }),
                ...(v.transcoderVideoQualities === undefined
                    ? null
                    : { transcoderVideoQualities: v.transcoderVideoQualities }),
                ...(v.transcoderVideoResolutions === undefined
                    ? null
                    : { transcoderVideoResolutions: v.transcoderVideoResolutions }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.updater === undefined ? null : { updater: v.updater }),
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.voiceSearch === undefined ? null : { voiceSearch: v.voiceSearch }),
                ...(v.directory === undefined ? null : { Directory: v.directory }),
            };
        });
}

/** @internal */
export namespace GetServerCapabilitiesResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetServerCapabilitiesResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            MediaContainer: z.lazy(() => MediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.MediaContainer === undefined ? null : { mediaContainer: v.MediaContainer }),
            };
        });

    export type Outbound = {
        MediaContainer?: MediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetServerCapabilitiesResponseBody
    > = z
        .object({
            mediaContainer: z.lazy(() => MediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetServerCapabilitiesResponse$ {
    export const inboundSchema: z.ZodType<GetServerCapabilitiesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetServerCapabilitiesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetServerCapabilitiesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerCapabilitiesResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => GetServerCapabilitiesResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
