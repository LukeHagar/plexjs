/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type Release = {
    key?: string | undefined;
    version?: string | undefined;
    added?: string | undefined;
    fixed?: string | undefined;
    downloadURL?: string | undefined;
    state?: string | undefined;
};

export type GetUpdateStatusMediaContainer = {
    size?: number | undefined;
    canInstall?: boolean | undefined;
    checkedAt?: number | undefined;
    downloadURL?: string | undefined;
    status?: number | undefined;
    release?: Array<Release> | undefined;
};

/**
 * The Server Updates
 */
export type GetUpdateStatusResponseBody = {
    mediaContainer?: GetUpdateStatusMediaContainer | undefined;
};

export type GetUpdateStatusResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The Server Updates
     */
    object?: GetUpdateStatusResponseBody | undefined;
};

/** @internal */
export namespace Release$ {
    export const inboundSchema: z.ZodType<Release, z.ZodTypeDef, unknown> = z.object({
        key: z.string().optional(),
        version: z.string().optional(),
        added: z.string().optional(),
        fixed: z.string().optional(),
        downloadURL: z.string().optional(),
        state: z.string().optional(),
    });

    export type Outbound = {
        key?: string | undefined;
        version?: string | undefined;
        added?: string | undefined;
        fixed?: string | undefined;
        downloadURL?: string | undefined;
        state?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Release> = z.object({
        key: z.string().optional(),
        version: z.string().optional(),
        added: z.string().optional(),
        fixed: z.string().optional(),
        downloadURL: z.string().optional(),
        state: z.string().optional(),
    });
}

/** @internal */
export namespace GetUpdateStatusMediaContainer$ {
    export const inboundSchema: z.ZodType<GetUpdateStatusMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            canInstall: z.boolean().optional(),
            checkedAt: z.number().int().optional(),
            downloadURL: z.string().optional(),
            status: z.number().int().optional(),
            Release: z.array(z.lazy(() => Release$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Release: "release",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        canInstall?: boolean | undefined;
        checkedAt?: number | undefined;
        downloadURL?: string | undefined;
        status?: number | undefined;
        Release?: Array<Release$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUpdateStatusMediaContainer> =
        z
            .object({
                size: z.number().int().optional(),
                canInstall: z.boolean().optional(),
                checkedAt: z.number().int().optional(),
                downloadURL: z.string().optional(),
                status: z.number().int().optional(),
                release: z.array(z.lazy(() => Release$.outboundSchema)).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    release: "Release",
                });
            });
}

/** @internal */
export namespace GetUpdateStatusResponseBody$ {
    export const inboundSchema: z.ZodType<GetUpdateStatusResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetUpdateStatusMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetUpdateStatusMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUpdateStatusResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetUpdateStatusMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetUpdateStatusResponse$ {
    export const inboundSchema: z.ZodType<GetUpdateStatusResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetUpdateStatusResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetUpdateStatusResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUpdateStatusResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetUpdateStatusResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
