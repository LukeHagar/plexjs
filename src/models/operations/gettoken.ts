/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export const GetTokenServerList = ["https://plex.tv/api/v2"] as const;

export type GetTokenGlobals = {
    /**
     * The unique identifier for the client application
     *
     * @remarks
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier: string;
};

export type GetTokenRequest = {
    /**
     * The PinID to retrieve an access token for
     */
    pinID: string;
    /**
     * The unique identifier for the client application
     *
     * @remarks
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier?: string | undefined;
};

export type GetTokenResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetTokenGlobals$ {
    export const inboundSchema: z.ZodType<GetTokenGlobals, z.ZodTypeDef, unknown> = z
        .object({
            "X-Plex-Client-Identifier": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Plex-Client-Identifier": "xPlexClientIdentifier",
            });
        });

    export type Outbound = {
        "X-Plex-Client-Identifier": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTokenGlobals> = z
        .object({
            xPlexClientIdentifier: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                xPlexClientIdentifier: "X-Plex-Client-Identifier",
            });
        });
}

/** @internal */
export namespace GetTokenRequest$ {
    export const inboundSchema: z.ZodType<GetTokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            pinID: z.string(),
            "X-Plex-Client-Identifier": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Plex-Client-Identifier": "xPlexClientIdentifier",
            });
        });

    export type Outbound = {
        pinID: string;
        "X-Plex-Client-Identifier"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTokenRequest> = z
        .object({
            pinID: z.string(),
            xPlexClientIdentifier: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                xPlexClientIdentifier: "X-Plex-Client-Identifier",
            });
        });
}

/** @internal */
export namespace GetTokenResponse$ {
    export const inboundSchema: z.ZodType<GetTokenResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTokenResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
