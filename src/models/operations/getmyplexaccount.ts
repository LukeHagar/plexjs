/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type MyPlex = {
    authToken?: string | undefined;
    username?: string | undefined;
    mappingState?: string | undefined;
    mappingError?: string | undefined;
    signInState?: string | undefined;
    publicAddress?: string | undefined;
    publicPort?: number | undefined;
    privateAddress?: string | undefined;
    privatePort?: number | undefined;
    subscriptionFeatures?: string | undefined;
    subscriptionActive?: boolean | undefined;
    subscriptionState?: string | undefined;
};

/**
 * MyPlex Account
 */
export type GetMyPlexAccountResponseBody = {
    myPlex?: MyPlex | undefined;
};

export type GetMyPlexAccountResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * MyPlex Account
     */
    object?: GetMyPlexAccountResponseBody | undefined;
};

/** @internal */
export namespace MyPlex$ {
    export const inboundSchema: z.ZodType<MyPlex, z.ZodTypeDef, unknown> = z
        .object({
            authToken: z.string().optional(),
            username: z.string().optional(),
            mappingState: z.string().optional(),
            mappingError: z.string().optional(),
            signInState: z.string().optional(),
            publicAddress: z.string().optional(),
            publicPort: z.number().optional(),
            privateAddress: z.string().optional(),
            privatePort: z.number().optional(),
            subscriptionFeatures: z.string().optional(),
            subscriptionActive: z.boolean().optional(),
            subscriptionState: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.authToken === undefined ? null : { authToken: v.authToken }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.mappingState === undefined ? null : { mappingState: v.mappingState }),
                ...(v.mappingError === undefined ? null : { mappingError: v.mappingError }),
                ...(v.signInState === undefined ? null : { signInState: v.signInState }),
                ...(v.publicAddress === undefined ? null : { publicAddress: v.publicAddress }),
                ...(v.publicPort === undefined ? null : { publicPort: v.publicPort }),
                ...(v.privateAddress === undefined ? null : { privateAddress: v.privateAddress }),
                ...(v.privatePort === undefined ? null : { privatePort: v.privatePort }),
                ...(v.subscriptionFeatures === undefined
                    ? null
                    : { subscriptionFeatures: v.subscriptionFeatures }),
                ...(v.subscriptionActive === undefined
                    ? null
                    : { subscriptionActive: v.subscriptionActive }),
                ...(v.subscriptionState === undefined
                    ? null
                    : { subscriptionState: v.subscriptionState }),
            };
        });

    export type Outbound = {
        authToken?: string | undefined;
        username?: string | undefined;
        mappingState?: string | undefined;
        mappingError?: string | undefined;
        signInState?: string | undefined;
        publicAddress?: string | undefined;
        publicPort?: number | undefined;
        privateAddress?: string | undefined;
        privatePort?: number | undefined;
        subscriptionFeatures?: string | undefined;
        subscriptionActive?: boolean | undefined;
        subscriptionState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MyPlex> = z
        .object({
            authToken: z.string().optional(),
            username: z.string().optional(),
            mappingState: z.string().optional(),
            mappingError: z.string().optional(),
            signInState: z.string().optional(),
            publicAddress: z.string().optional(),
            publicPort: z.number().optional(),
            privateAddress: z.string().optional(),
            privatePort: z.number().optional(),
            subscriptionFeatures: z.string().optional(),
            subscriptionActive: z.boolean().optional(),
            subscriptionState: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.authToken === undefined ? null : { authToken: v.authToken }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.mappingState === undefined ? null : { mappingState: v.mappingState }),
                ...(v.mappingError === undefined ? null : { mappingError: v.mappingError }),
                ...(v.signInState === undefined ? null : { signInState: v.signInState }),
                ...(v.publicAddress === undefined ? null : { publicAddress: v.publicAddress }),
                ...(v.publicPort === undefined ? null : { publicPort: v.publicPort }),
                ...(v.privateAddress === undefined ? null : { privateAddress: v.privateAddress }),
                ...(v.privatePort === undefined ? null : { privatePort: v.privatePort }),
                ...(v.subscriptionFeatures === undefined
                    ? null
                    : { subscriptionFeatures: v.subscriptionFeatures }),
                ...(v.subscriptionActive === undefined
                    ? null
                    : { subscriptionActive: v.subscriptionActive }),
                ...(v.subscriptionState === undefined
                    ? null
                    : { subscriptionState: v.subscriptionState }),
            };
        });
}

/** @internal */
export namespace GetMyPlexAccountResponseBody$ {
    export const inboundSchema: z.ZodType<GetMyPlexAccountResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MyPlex: z.lazy(() => MyPlex$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.MyPlex === undefined ? null : { myPlex: v.MyPlex }),
            };
        });

    export type Outbound = {
        MyPlex?: MyPlex$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMyPlexAccountResponseBody> = z
        .object({
            myPlex: z.lazy(() => MyPlex$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.myPlex === undefined ? null : { MyPlex: v.myPlex }),
            };
        });
}

/** @internal */
export namespace GetMyPlexAccountResponse$ {
    export const inboundSchema: z.ZodType<GetMyPlexAccountResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetMyPlexAccountResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetMyPlexAccountResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMyPlexAccountResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetMyPlexAccountResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
