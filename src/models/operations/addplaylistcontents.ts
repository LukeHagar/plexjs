/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type AddPlaylistContentsRequest = {
    /**
     * the ID of the playlist
     */
    playlistID: number;
    /**
     * the content URI for the playlist
     */
    uri: string;
    /**
     * the play queue to add to a playlist
     */
    playQueueID?: number | undefined;
};

export type AddPlaylistContentsMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    summary?: string | undefined;
    smart?: boolean | undefined;
    playlistType?: string | undefined;
    composite?: string | undefined;
    duration?: number | undefined;
    leafCount?: number | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
};

export type AddPlaylistContentsMediaContainer = {
    size?: number | undefined;
    leafCountAdded?: number | undefined;
    leafCountRequested?: number | undefined;
    metadata?: Array<AddPlaylistContentsMetadata> | undefined;
};

/**
 * Playlist Updated
 */
export type AddPlaylistContentsResponseBody = {
    mediaContainer?: AddPlaylistContentsMediaContainer | undefined;
};

export type AddPlaylistContentsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Playlist Updated
     */
    object?: AddPlaylistContentsResponseBody | undefined;
};

/** @internal */
export namespace AddPlaylistContentsRequest$ {
    export const inboundSchema: z.ZodType<AddPlaylistContentsRequest, z.ZodTypeDef, unknown> =
        z.object({
            playlistID: z.number(),
            uri: z.string(),
            playQueueID: z.number().optional(),
        });

    export type Outbound = {
        playlistID: number;
        uri: string;
        playQueueID?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPlaylistContentsRequest> =
        z.object({
            playlistID: z.number(),
            uri: z.string(),
            playQueueID: z.number().optional(),
        });
}

/** @internal */
export namespace AddPlaylistContentsMetadata$ {
    export const inboundSchema: z.ZodType<AddPlaylistContentsMetadata, z.ZodTypeDef, unknown> =
        z.object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            summary: z.string().optional(),
            smart: z.boolean().optional(),
            playlistType: z.string().optional(),
            composite: z.string().optional(),
            duration: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
        });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        summary?: string | undefined;
        smart?: boolean | undefined;
        playlistType?: string | undefined;
        composite?: string | undefined;
        duration?: number | undefined;
        leafCount?: number | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPlaylistContentsMetadata> =
        z.object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            summary: z.string().optional(),
            smart: z.boolean().optional(),
            playlistType: z.string().optional(),
            composite: z.string().optional(),
            duration: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
        });
}

/** @internal */
export namespace AddPlaylistContentsMediaContainer$ {
    export const inboundSchema: z.ZodType<
        AddPlaylistContentsMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            leafCountAdded: z.number().int().optional(),
            leafCountRequested: z.number().int().optional(),
            Metadata: z.array(z.lazy(() => AddPlaylistContentsMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        leafCountAdded?: number | undefined;
        leafCountRequested?: number | undefined;
        Metadata?: Array<AddPlaylistContentsMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddPlaylistContentsMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            leafCountAdded: z.number().int().optional(),
            leafCountRequested: z.number().int().optional(),
            metadata: z.array(z.lazy(() => AddPlaylistContentsMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace AddPlaylistContentsResponseBody$ {
    export const inboundSchema: z.ZodType<AddPlaylistContentsResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => AddPlaylistContentsMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    MediaContainer: "mediaContainer",
                });
            });

    export type Outbound = {
        MediaContainer?: AddPlaylistContentsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddPlaylistContentsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => AddPlaylistContentsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace AddPlaylistContentsResponse$ {
    export const inboundSchema: z.ZodType<AddPlaylistContentsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => AddPlaylistContentsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: AddPlaylistContentsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPlaylistContentsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => AddPlaylistContentsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
