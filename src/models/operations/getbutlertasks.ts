/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ButlerTask = {
    name?: string | undefined;
    interval?: number | undefined;
    scheduleRandomized?: boolean | undefined;
    enabled?: boolean | undefined;
    title?: string | undefined;
    description?: string | undefined;
};

export type ButlerTasks = {
    butlerTask?: Array<ButlerTask> | undefined;
};

/**
 * All butler tasks
 */
export type GetButlerTasksResponseBody = {
    butlerTasks?: ButlerTasks | undefined;
};

export type GetButlerTasksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * All butler tasks
     */
    object?: GetButlerTasksResponseBody | undefined;
};

/** @internal */
export namespace ButlerTask$ {
    export type Inbound = {
        name?: string | undefined;
        interval?: number | undefined;
        scheduleRandomized?: boolean | undefined;
        enabled?: boolean | undefined;
        title?: string | undefined;
        description?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ButlerTask, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            interval: z.number().optional(),
            scheduleRandomized: z.boolean().optional(),
            enabled: z.boolean().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.interval === undefined ? null : { interval: v.interval }),
                ...(v.scheduleRandomized === undefined
                    ? null
                    : { scheduleRandomized: v.scheduleRandomized }),
                ...(v.enabled === undefined ? null : { enabled: v.enabled }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        interval?: number | undefined;
        scheduleRandomized?: boolean | undefined;
        enabled?: boolean | undefined;
        title?: string | undefined;
        description?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ButlerTask> = z
        .object({
            name: z.string().optional(),
            interval: z.number().optional(),
            scheduleRandomized: z.boolean().optional(),
            enabled: z.boolean().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.interval === undefined ? null : { interval: v.interval }),
                ...(v.scheduleRandomized === undefined
                    ? null
                    : { scheduleRandomized: v.scheduleRandomized }),
                ...(v.enabled === undefined ? null : { enabled: v.enabled }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });
}

/** @internal */
export namespace ButlerTasks$ {
    export type Inbound = {
        ButlerTask?: Array<ButlerTask$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ButlerTasks, z.ZodTypeDef, Inbound> = z
        .object({
            ButlerTask: z.array(z.lazy(() => ButlerTask$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ButlerTask === undefined ? null : { butlerTask: v.ButlerTask }),
            };
        });

    export type Outbound = {
        ButlerTask?: Array<ButlerTask$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ButlerTasks> = z
        .object({
            butlerTask: z.array(z.lazy(() => ButlerTask$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.butlerTask === undefined ? null : { ButlerTask: v.butlerTask }),
            };
        });
}

/** @internal */
export namespace GetButlerTasksResponseBody$ {
    export type Inbound = {
        ButlerTasks?: ButlerTasks$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetButlerTasksResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            ButlerTasks: z.lazy(() => ButlerTasks$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ButlerTasks === undefined ? null : { butlerTasks: v.ButlerTasks }),
            };
        });

    export type Outbound = {
        ButlerTasks?: ButlerTasks$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetButlerTasksResponseBody> = z
        .object({
            butlerTasks: z.lazy(() => ButlerTasks$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.butlerTasks === undefined ? null : { ButlerTasks: v.butlerTasks }),
            };
        });
}

/** @internal */
export namespace GetButlerTasksResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetButlerTasksResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetButlerTasksResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetButlerTasksResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetButlerTasksResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetButlerTasksResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetButlerTasksResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
