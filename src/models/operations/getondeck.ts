/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetOnDeckStream = {
    id?: number | undefined;
    streamType?: number | undefined;
    default?: boolean | undefined;
    codec?: string | undefined;
    index?: number | undefined;
    bitrate?: number | undefined;
    language?: string | undefined;
    languageTag?: string | undefined;
    languageCode?: string | undefined;
    bitDepth?: number | undefined;
    chromaLocation?: string | undefined;
    chromaSubsampling?: string | undefined;
    codedHeight?: number | undefined;
    codedWidth?: number | undefined;
    colorRange?: string | undefined;
    frameRate?: number | undefined;
    height?: number | undefined;
    level?: number | undefined;
    profile?: string | undefined;
    refFrames?: number | undefined;
    width?: number | undefined;
    displayTitle?: string | undefined;
    extendedDisplayTitle?: string | undefined;
};

export type GetOnDeckPart = {
    id?: number | undefined;
    key?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    size?: number | undefined;
    audioProfile?: string | undefined;
    container?: string | undefined;
    videoProfile?: string | undefined;
    stream?: Array<GetOnDeckStream> | undefined;
};

export type GetOnDeckMedia = {
    id?: number | undefined;
    duration?: number | undefined;
    bitrate?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    aspectRatio?: number | undefined;
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    videoCodec?: string | undefined;
    videoResolution?: string | undefined;
    container?: string | undefined;
    videoFrameRate?: string | undefined;
    audioProfile?: string | undefined;
    videoProfile?: string | undefined;
    part?: Array<GetOnDeckPart> | undefined;
};

export type GetOnDeckGuids = {
    id?: string | undefined;
};

export type GetOnDeckMetadata = {
    allowSync?: boolean | undefined;
    librarySectionID?: number | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionUUID?: string | undefined;
    ratingKey?: number | undefined;
    key?: string | undefined;
    parentRatingKey?: number | undefined;
    grandparentRatingKey?: number | undefined;
    guid?: string | undefined;
    parentGuid?: string | undefined;
    grandparentGuid?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    grandparentKey?: string | undefined;
    parentKey?: string | undefined;
    librarySectionKey?: string | undefined;
    grandparentTitle?: string | undefined;
    parentTitle?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    index?: number | undefined;
    parentIndex?: number | undefined;
    lastViewedAt?: number | undefined;
    year?: number | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    parentThumb?: string | undefined;
    grandparentThumb?: string | undefined;
    grandparentArt?: string | undefined;
    grandparentTheme?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: Date | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    media?: Array<GetOnDeckMedia> | undefined;
    guids?: Array<GetOnDeckGuids> | undefined;
};

export type GetOnDeckMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    identifier?: string | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    mixedParents?: boolean | undefined;
    metadata?: Array<GetOnDeckMetadata> | undefined;
};

/**
 * The on Deck content
 */
export type GetOnDeckResponseBody = {
    mediaContainer?: GetOnDeckMediaContainer | undefined;
};

export type GetOnDeckResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The on Deck content
     */
    object?: GetOnDeckResponseBody | undefined;
};

/** @internal */
export namespace GetOnDeckStream$ {
    export type Inbound = {
        id?: number | undefined;
        streamType?: number | undefined;
        default?: boolean | undefined;
        codec?: string | undefined;
        index?: number | undefined;
        bitrate?: number | undefined;
        language?: string | undefined;
        languageTag?: string | undefined;
        languageCode?: string | undefined;
        bitDepth?: number | undefined;
        chromaLocation?: string | undefined;
        chromaSubsampling?: string | undefined;
        codedHeight?: number | undefined;
        codedWidth?: number | undefined;
        colorRange?: string | undefined;
        frameRate?: number | undefined;
        height?: number | undefined;
        level?: number | undefined;
        profile?: string | undefined;
        refFrames?: number | undefined;
        width?: number | undefined;
        displayTitle?: string | undefined;
        extendedDisplayTitle?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckStream, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().optional(),
            streamType: z.number().optional(),
            default: z.boolean().optional(),
            codec: z.string().optional(),
            index: z.number().optional(),
            bitrate: z.number().optional(),
            language: z.string().optional(),
            languageTag: z.string().optional(),
            languageCode: z.string().optional(),
            bitDepth: z.number().optional(),
            chromaLocation: z.string().optional(),
            chromaSubsampling: z.string().optional(),
            codedHeight: z.number().optional(),
            codedWidth: z.number().optional(),
            colorRange: z.string().optional(),
            frameRate: z.number().optional(),
            height: z.number().optional(),
            level: z.number().optional(),
            profile: z.string().optional(),
            refFrames: z.number().optional(),
            width: z.number().optional(),
            displayTitle: z.string().optional(),
            extendedDisplayTitle: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.streamType === undefined ? null : { streamType: v.streamType }),
                ...(v.default === undefined ? null : { default: v.default }),
                ...(v.codec === undefined ? null : { codec: v.codec }),
                ...(v.index === undefined ? null : { index: v.index }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.languageTag === undefined ? null : { languageTag: v.languageTag }),
                ...(v.languageCode === undefined ? null : { languageCode: v.languageCode }),
                ...(v.bitDepth === undefined ? null : { bitDepth: v.bitDepth }),
                ...(v.chromaLocation === undefined ? null : { chromaLocation: v.chromaLocation }),
                ...(v.chromaSubsampling === undefined
                    ? null
                    : { chromaSubsampling: v.chromaSubsampling }),
                ...(v.codedHeight === undefined ? null : { codedHeight: v.codedHeight }),
                ...(v.codedWidth === undefined ? null : { codedWidth: v.codedWidth }),
                ...(v.colorRange === undefined ? null : { colorRange: v.colorRange }),
                ...(v.frameRate === undefined ? null : { frameRate: v.frameRate }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.level === undefined ? null : { level: v.level }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.refFrames === undefined ? null : { refFrames: v.refFrames }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.displayTitle === undefined ? null : { displayTitle: v.displayTitle }),
                ...(v.extendedDisplayTitle === undefined
                    ? null
                    : { extendedDisplayTitle: v.extendedDisplayTitle }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        streamType?: number | undefined;
        default?: boolean | undefined;
        codec?: string | undefined;
        index?: number | undefined;
        bitrate?: number | undefined;
        language?: string | undefined;
        languageTag?: string | undefined;
        languageCode?: string | undefined;
        bitDepth?: number | undefined;
        chromaLocation?: string | undefined;
        chromaSubsampling?: string | undefined;
        codedHeight?: number | undefined;
        codedWidth?: number | undefined;
        colorRange?: string | undefined;
        frameRate?: number | undefined;
        height?: number | undefined;
        level?: number | undefined;
        profile?: string | undefined;
        refFrames?: number | undefined;
        width?: number | undefined;
        displayTitle?: string | undefined;
        extendedDisplayTitle?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckStream> = z
        .object({
            id: z.number().optional(),
            streamType: z.number().optional(),
            default: z.boolean().optional(),
            codec: z.string().optional(),
            index: z.number().optional(),
            bitrate: z.number().optional(),
            language: z.string().optional(),
            languageTag: z.string().optional(),
            languageCode: z.string().optional(),
            bitDepth: z.number().optional(),
            chromaLocation: z.string().optional(),
            chromaSubsampling: z.string().optional(),
            codedHeight: z.number().optional(),
            codedWidth: z.number().optional(),
            colorRange: z.string().optional(),
            frameRate: z.number().optional(),
            height: z.number().optional(),
            level: z.number().optional(),
            profile: z.string().optional(),
            refFrames: z.number().optional(),
            width: z.number().optional(),
            displayTitle: z.string().optional(),
            extendedDisplayTitle: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.streamType === undefined ? null : { streamType: v.streamType }),
                ...(v.default === undefined ? null : { default: v.default }),
                ...(v.codec === undefined ? null : { codec: v.codec }),
                ...(v.index === undefined ? null : { index: v.index }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.languageTag === undefined ? null : { languageTag: v.languageTag }),
                ...(v.languageCode === undefined ? null : { languageCode: v.languageCode }),
                ...(v.bitDepth === undefined ? null : { bitDepth: v.bitDepth }),
                ...(v.chromaLocation === undefined ? null : { chromaLocation: v.chromaLocation }),
                ...(v.chromaSubsampling === undefined
                    ? null
                    : { chromaSubsampling: v.chromaSubsampling }),
                ...(v.codedHeight === undefined ? null : { codedHeight: v.codedHeight }),
                ...(v.codedWidth === undefined ? null : { codedWidth: v.codedWidth }),
                ...(v.colorRange === undefined ? null : { colorRange: v.colorRange }),
                ...(v.frameRate === undefined ? null : { frameRate: v.frameRate }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.level === undefined ? null : { level: v.level }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.refFrames === undefined ? null : { refFrames: v.refFrames }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.displayTitle === undefined ? null : { displayTitle: v.displayTitle }),
                ...(v.extendedDisplayTitle === undefined
                    ? null
                    : { extendedDisplayTitle: v.extendedDisplayTitle }),
            };
        });
}

/** @internal */
export namespace GetOnDeckPart$ {
    export type Inbound = {
        id?: number | undefined;
        key?: string | undefined;
        duration?: number | undefined;
        file?: string | undefined;
        size?: number | undefined;
        audioProfile?: string | undefined;
        container?: string | undefined;
        videoProfile?: string | undefined;
        Stream?: Array<GetOnDeckStream$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckPart, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().optional(),
            key: z.string().optional(),
            duration: z.number().optional(),
            file: z.string().optional(),
            size: z.number().optional(),
            audioProfile: z.string().optional(),
            container: z.string().optional(),
            videoProfile: z.string().optional(),
            Stream: z.array(z.lazy(() => GetOnDeckStream$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.file === undefined ? null : { file: v.file }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
                ...(v.Stream === undefined ? null : { stream: v.Stream }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        duration?: number | undefined;
        file?: string | undefined;
        size?: number | undefined;
        audioProfile?: string | undefined;
        container?: string | undefined;
        videoProfile?: string | undefined;
        Stream?: Array<GetOnDeckStream$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckPart> = z
        .object({
            id: z.number().optional(),
            key: z.string().optional(),
            duration: z.number().optional(),
            file: z.string().optional(),
            size: z.number().optional(),
            audioProfile: z.string().optional(),
            container: z.string().optional(),
            videoProfile: z.string().optional(),
            stream: z.array(z.lazy(() => GetOnDeckStream$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.file === undefined ? null : { file: v.file }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
                ...(v.stream === undefined ? null : { Stream: v.stream }),
            };
        });
}

/** @internal */
export namespace GetOnDeckMedia$ {
    export type Inbound = {
        id?: number | undefined;
        duration?: number | undefined;
        bitrate?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        aspectRatio?: number | undefined;
        audioChannels?: number | undefined;
        audioCodec?: string | undefined;
        videoCodec?: string | undefined;
        videoResolution?: string | undefined;
        container?: string | undefined;
        videoFrameRate?: string | undefined;
        audioProfile?: string | undefined;
        videoProfile?: string | undefined;
        Part?: Array<GetOnDeckPart$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckMedia, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().optional(),
            duration: z.number().optional(),
            bitrate: z.number().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            audioProfile: z.string().optional(),
            videoProfile: z.string().optional(),
            Part: z.array(z.lazy(() => GetOnDeckPart$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.aspectRatio === undefined ? null : { aspectRatio: v.aspectRatio }),
                ...(v.audioChannels === undefined ? null : { audioChannels: v.audioChannels }),
                ...(v.audioCodec === undefined ? null : { audioCodec: v.audioCodec }),
                ...(v.videoCodec === undefined ? null : { videoCodec: v.videoCodec }),
                ...(v.videoResolution === undefined
                    ? null
                    : { videoResolution: v.videoResolution }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoFrameRate === undefined ? null : { videoFrameRate: v.videoFrameRate }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
                ...(v.Part === undefined ? null : { part: v.Part }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        duration?: number | undefined;
        bitrate?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        aspectRatio?: number | undefined;
        audioChannels?: number | undefined;
        audioCodec?: string | undefined;
        videoCodec?: string | undefined;
        videoResolution?: string | undefined;
        container?: string | undefined;
        videoFrameRate?: string | undefined;
        audioProfile?: string | undefined;
        videoProfile?: string | undefined;
        Part?: Array<GetOnDeckPart$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckMedia> = z
        .object({
            id: z.number().optional(),
            duration: z.number().optional(),
            bitrate: z.number().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            audioProfile: z.string().optional(),
            videoProfile: z.string().optional(),
            part: z.array(z.lazy(() => GetOnDeckPart$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.aspectRatio === undefined ? null : { aspectRatio: v.aspectRatio }),
                ...(v.audioChannels === undefined ? null : { audioChannels: v.audioChannels }),
                ...(v.audioCodec === undefined ? null : { audioCodec: v.audioCodec }),
                ...(v.videoCodec === undefined ? null : { videoCodec: v.videoCodec }),
                ...(v.videoResolution === undefined
                    ? null
                    : { videoResolution: v.videoResolution }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoFrameRate === undefined ? null : { videoFrameRate: v.videoFrameRate }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
                ...(v.part === undefined ? null : { Part: v.part }),
            };
        });
}

/** @internal */
export namespace GetOnDeckGuids$ {
    export type Inbound = {
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckGuids, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckGuids> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace GetOnDeckMetadata$ {
    export type Inbound = {
        allowSync?: boolean | undefined;
        librarySectionID?: number | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionUUID?: string | undefined;
        ratingKey?: number | undefined;
        key?: string | undefined;
        parentRatingKey?: number | undefined;
        grandparentRatingKey?: number | undefined;
        guid?: string | undefined;
        parentGuid?: string | undefined;
        grandparentGuid?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        grandparentKey?: string | undefined;
        parentKey?: string | undefined;
        librarySectionKey?: string | undefined;
        grandparentTitle?: string | undefined;
        parentTitle?: string | undefined;
        contentRating?: string | undefined;
        summary?: string | undefined;
        index?: number | undefined;
        parentIndex?: number | undefined;
        lastViewedAt?: number | undefined;
        year?: number | undefined;
        thumb?: string | undefined;
        art?: string | undefined;
        parentThumb?: string | undefined;
        grandparentThumb?: string | undefined;
        grandparentArt?: string | undefined;
        grandparentTheme?: string | undefined;
        duration?: number | undefined;
        originallyAvailableAt?: string | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        Media?: Array<GetOnDeckMedia$.Inbound> | undefined;
        guids?: Array<GetOnDeckGuids$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            allowSync: z.boolean().optional(),
            librarySectionID: z.number().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionUUID: z.string().optional(),
            ratingKey: z.number().optional(),
            key: z.string().optional(),
            parentRatingKey: z.number().optional(),
            grandparentRatingKey: z.number().optional(),
            guid: z.string().optional(),
            parentGuid: z.string().optional(),
            grandparentGuid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            grandparentKey: z.string().optional(),
            parentKey: z.string().optional(),
            librarySectionKey: z.string().optional(),
            grandparentTitle: z.string().optional(),
            parentTitle: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            index: z.number().optional(),
            parentIndex: z.number().optional(),
            lastViewedAt: z.number().optional(),
            year: z.number().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            parentThumb: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentArt: z.string().optional(),
            grandparentTheme: z.string().optional(),
            duration: z.number().optional(),
            originallyAvailableAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            addedAt: z.number().optional(),
            updatedAt: z.number().optional(),
            Media: z.array(z.lazy(() => GetOnDeckMedia$.inboundSchema)).optional(),
            guids: z.array(z.lazy(() => GetOnDeckGuids$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSync === undefined ? null : { allowSync: v.allowSync }),
                ...(v.librarySectionID === undefined
                    ? null
                    : { librarySectionID: v.librarySectionID }),
                ...(v.librarySectionTitle === undefined
                    ? null
                    : { librarySectionTitle: v.librarySectionTitle }),
                ...(v.librarySectionUUID === undefined
                    ? null
                    : { librarySectionUUID: v.librarySectionUUID }),
                ...(v.ratingKey === undefined ? null : { ratingKey: v.ratingKey }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.parentRatingKey === undefined
                    ? null
                    : { parentRatingKey: v.parentRatingKey }),
                ...(v.grandparentRatingKey === undefined
                    ? null
                    : { grandparentRatingKey: v.grandparentRatingKey }),
                ...(v.guid === undefined ? null : { guid: v.guid }),
                ...(v.parentGuid === undefined ? null : { parentGuid: v.parentGuid }),
                ...(v.grandparentGuid === undefined
                    ? null
                    : { grandparentGuid: v.grandparentGuid }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.grandparentKey === undefined ? null : { grandparentKey: v.grandparentKey }),
                ...(v.parentKey === undefined ? null : { parentKey: v.parentKey }),
                ...(v.librarySectionKey === undefined
                    ? null
                    : { librarySectionKey: v.librarySectionKey }),
                ...(v.grandparentTitle === undefined
                    ? null
                    : { grandparentTitle: v.grandparentTitle }),
                ...(v.parentTitle === undefined ? null : { parentTitle: v.parentTitle }),
                ...(v.contentRating === undefined ? null : { contentRating: v.contentRating }),
                ...(v.summary === undefined ? null : { summary: v.summary }),
                ...(v.index === undefined ? null : { index: v.index }),
                ...(v.parentIndex === undefined ? null : { parentIndex: v.parentIndex }),
                ...(v.lastViewedAt === undefined ? null : { lastViewedAt: v.lastViewedAt }),
                ...(v.year === undefined ? null : { year: v.year }),
                ...(v.thumb === undefined ? null : { thumb: v.thumb }),
                ...(v.art === undefined ? null : { art: v.art }),
                ...(v.parentThumb === undefined ? null : { parentThumb: v.parentThumb }),
                ...(v.grandparentThumb === undefined
                    ? null
                    : { grandparentThumb: v.grandparentThumb }),
                ...(v.grandparentArt === undefined ? null : { grandparentArt: v.grandparentArt }),
                ...(v.grandparentTheme === undefined
                    ? null
                    : { grandparentTheme: v.grandparentTheme }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.originallyAvailableAt === undefined
                    ? null
                    : { originallyAvailableAt: v.originallyAvailableAt }),
                ...(v.addedAt === undefined ? null : { addedAt: v.addedAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.Media === undefined ? null : { media: v.Media }),
                ...(v.guids === undefined ? null : { guids: v.guids }),
            };
        });

    export type Outbound = {
        allowSync?: boolean | undefined;
        librarySectionID?: number | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionUUID?: string | undefined;
        ratingKey?: number | undefined;
        key?: string | undefined;
        parentRatingKey?: number | undefined;
        grandparentRatingKey?: number | undefined;
        guid?: string | undefined;
        parentGuid?: string | undefined;
        grandparentGuid?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        grandparentKey?: string | undefined;
        parentKey?: string | undefined;
        librarySectionKey?: string | undefined;
        grandparentTitle?: string | undefined;
        parentTitle?: string | undefined;
        contentRating?: string | undefined;
        summary?: string | undefined;
        index?: number | undefined;
        parentIndex?: number | undefined;
        lastViewedAt?: number | undefined;
        year?: number | undefined;
        thumb?: string | undefined;
        art?: string | undefined;
        parentThumb?: string | undefined;
        grandparentThumb?: string | undefined;
        grandparentArt?: string | undefined;
        grandparentTheme?: string | undefined;
        duration?: number | undefined;
        originallyAvailableAt?: string | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        Media?: Array<GetOnDeckMedia$.Outbound> | undefined;
        guids?: Array<GetOnDeckGuids$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckMetadata> = z
        .object({
            allowSync: z.boolean().optional(),
            librarySectionID: z.number().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionUUID: z.string().optional(),
            ratingKey: z.number().optional(),
            key: z.string().optional(),
            parentRatingKey: z.number().optional(),
            grandparentRatingKey: z.number().optional(),
            guid: z.string().optional(),
            parentGuid: z.string().optional(),
            grandparentGuid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            grandparentKey: z.string().optional(),
            parentKey: z.string().optional(),
            librarySectionKey: z.string().optional(),
            grandparentTitle: z.string().optional(),
            parentTitle: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            index: z.number().optional(),
            parentIndex: z.number().optional(),
            lastViewedAt: z.number().optional(),
            year: z.number().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            parentThumb: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentArt: z.string().optional(),
            grandparentTheme: z.string().optional(),
            duration: z.number().optional(),
            originallyAvailableAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            addedAt: z.number().optional(),
            updatedAt: z.number().optional(),
            media: z.array(z.lazy(() => GetOnDeckMedia$.outboundSchema)).optional(),
            guids: z.array(z.lazy(() => GetOnDeckGuids$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSync === undefined ? null : { allowSync: v.allowSync }),
                ...(v.librarySectionID === undefined
                    ? null
                    : { librarySectionID: v.librarySectionID }),
                ...(v.librarySectionTitle === undefined
                    ? null
                    : { librarySectionTitle: v.librarySectionTitle }),
                ...(v.librarySectionUUID === undefined
                    ? null
                    : { librarySectionUUID: v.librarySectionUUID }),
                ...(v.ratingKey === undefined ? null : { ratingKey: v.ratingKey }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.parentRatingKey === undefined
                    ? null
                    : { parentRatingKey: v.parentRatingKey }),
                ...(v.grandparentRatingKey === undefined
                    ? null
                    : { grandparentRatingKey: v.grandparentRatingKey }),
                ...(v.guid === undefined ? null : { guid: v.guid }),
                ...(v.parentGuid === undefined ? null : { parentGuid: v.parentGuid }),
                ...(v.grandparentGuid === undefined
                    ? null
                    : { grandparentGuid: v.grandparentGuid }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.grandparentKey === undefined ? null : { grandparentKey: v.grandparentKey }),
                ...(v.parentKey === undefined ? null : { parentKey: v.parentKey }),
                ...(v.librarySectionKey === undefined
                    ? null
                    : { librarySectionKey: v.librarySectionKey }),
                ...(v.grandparentTitle === undefined
                    ? null
                    : { grandparentTitle: v.grandparentTitle }),
                ...(v.parentTitle === undefined ? null : { parentTitle: v.parentTitle }),
                ...(v.contentRating === undefined ? null : { contentRating: v.contentRating }),
                ...(v.summary === undefined ? null : { summary: v.summary }),
                ...(v.index === undefined ? null : { index: v.index }),
                ...(v.parentIndex === undefined ? null : { parentIndex: v.parentIndex }),
                ...(v.lastViewedAt === undefined ? null : { lastViewedAt: v.lastViewedAt }),
                ...(v.year === undefined ? null : { year: v.year }),
                ...(v.thumb === undefined ? null : { thumb: v.thumb }),
                ...(v.art === undefined ? null : { art: v.art }),
                ...(v.parentThumb === undefined ? null : { parentThumb: v.parentThumb }),
                ...(v.grandparentThumb === undefined
                    ? null
                    : { grandparentThumb: v.grandparentThumb }),
                ...(v.grandparentArt === undefined ? null : { grandparentArt: v.grandparentArt }),
                ...(v.grandparentTheme === undefined
                    ? null
                    : { grandparentTheme: v.grandparentTheme }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.originallyAvailableAt === undefined
                    ? null
                    : { originallyAvailableAt: v.originallyAvailableAt }),
                ...(v.addedAt === undefined ? null : { addedAt: v.addedAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.media === undefined ? null : { Media: v.media }),
                ...(v.guids === undefined ? null : { guids: v.guids }),
            };
        });
}

/** @internal */
export namespace GetOnDeckMediaContainer$ {
    export type Inbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        identifier?: string | undefined;
        mediaTagPrefix?: string | undefined;
        mediaTagVersion?: number | undefined;
        mixedParents?: boolean | undefined;
        Metadata?: Array<GetOnDeckMetadata$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckMediaContainer, z.ZodTypeDef, Inbound> = z
        .object({
            size: z.number().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().optional(),
            mixedParents: z.boolean().optional(),
            Metadata: z.array(z.lazy(() => GetOnDeckMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.allowSync === undefined ? null : { allowSync: v.allowSync }),
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.mediaTagPrefix === undefined ? null : { mediaTagPrefix: v.mediaTagPrefix }),
                ...(v.mediaTagVersion === undefined
                    ? null
                    : { mediaTagVersion: v.mediaTagVersion }),
                ...(v.mixedParents === undefined ? null : { mixedParents: v.mixedParents }),
                ...(v.Metadata === undefined ? null : { metadata: v.Metadata }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        identifier?: string | undefined;
        mediaTagPrefix?: string | undefined;
        mediaTagVersion?: number | undefined;
        mixedParents?: boolean | undefined;
        Metadata?: Array<GetOnDeckMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckMediaContainer> = z
        .object({
            size: z.number().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().optional(),
            mixedParents: z.boolean().optional(),
            metadata: z.array(z.lazy(() => GetOnDeckMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.allowSync === undefined ? null : { allowSync: v.allowSync }),
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.mediaTagPrefix === undefined ? null : { mediaTagPrefix: v.mediaTagPrefix }),
                ...(v.mediaTagVersion === undefined
                    ? null
                    : { mediaTagVersion: v.mediaTagVersion }),
                ...(v.mixedParents === undefined ? null : { mixedParents: v.mixedParents }),
                ...(v.metadata === undefined ? null : { Metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace GetOnDeckResponseBody$ {
    export type Inbound = {
        MediaContainer?: GetOnDeckMediaContainer$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            MediaContainer: z.lazy(() => GetOnDeckMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.MediaContainer === undefined ? null : { mediaContainer: v.MediaContainer }),
            };
        });

    export type Outbound = {
        MediaContainer?: GetOnDeckMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetOnDeckMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetOnDeckResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetOnDeckResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOnDeckResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetOnDeckResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetOnDeckResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOnDeckResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetOnDeckResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
