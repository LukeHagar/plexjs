/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type Server = {
    name?: string | undefined;
    host?: string | undefined;
    address?: string | undefined;
    port?: number | undefined;
    machineIdentifier?: string | undefined;
    version?: string | undefined;
    protocol?: string | undefined;
    product?: string | undefined;
    deviceClass?: string | undefined;
    protocolVersion?: number | undefined;
    protocolCapabilities?: string | undefined;
};

export type GetAvailableClientsMediaContainer = {
    size?: number | undefined;
    server?: Array<Server> | undefined;
};

/**
 * Available Clients
 */
export type GetAvailableClientsResponseBody = {
    mediaContainer?: GetAvailableClientsMediaContainer | undefined;
};

export type GetAvailableClientsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Available Clients
     */
    object?: GetAvailableClientsResponseBody | undefined;
};

/** @internal */
export namespace Server$ {
    export const inboundSchema: z.ZodType<Server, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
        host: z.string().optional(),
        address: z.string().optional(),
        port: z.number().optional(),
        machineIdentifier: z.string().optional(),
        version: z.string().optional(),
        protocol: z.string().optional(),
        product: z.string().optional(),
        deviceClass: z.string().optional(),
        protocolVersion: z.number().optional(),
        protocolCapabilities: z.string().optional(),
    });

    export type Outbound = {
        name?: string | undefined;
        host?: string | undefined;
        address?: string | undefined;
        port?: number | undefined;
        machineIdentifier?: string | undefined;
        version?: string | undefined;
        protocol?: string | undefined;
        product?: string | undefined;
        deviceClass?: string | undefined;
        protocolVersion?: number | undefined;
        protocolCapabilities?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Server> = z.object({
        name: z.string().optional(),
        host: z.string().optional(),
        address: z.string().optional(),
        port: z.number().optional(),
        machineIdentifier: z.string().optional(),
        version: z.string().optional(),
        protocol: z.string().optional(),
        product: z.string().optional(),
        deviceClass: z.string().optional(),
        protocolVersion: z.number().optional(),
        protocolCapabilities: z.string().optional(),
    });
}

/** @internal */
export namespace GetAvailableClientsMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetAvailableClientsMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().optional(),
            Server: z.array(z.lazy(() => Server$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Server: "server",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Server?: Array<Server$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAvailableClientsMediaContainer
    > = z
        .object({
            size: z.number().optional(),
            server: z.array(z.lazy(() => Server$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                server: "Server",
            });
        });
}

/** @internal */
export namespace GetAvailableClientsResponseBody$ {
    export const inboundSchema: z.ZodType<GetAvailableClientsResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetAvailableClientsMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    MediaContainer: "mediaContainer",
                });
            });

    export type Outbound = {
        MediaContainer?: GetAvailableClientsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAvailableClientsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetAvailableClientsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetAvailableClientsResponse$ {
    export const inboundSchema: z.ZodType<GetAvailableClientsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetAvailableClientsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetAvailableClientsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAvailableClientsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetAvailableClientsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
