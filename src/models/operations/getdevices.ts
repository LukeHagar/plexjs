/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Device = {
    id?: number | undefined;
    name?: string | undefined;
    platform?: string | undefined;
    clientIdentifier?: string | undefined;
    createdAt?: number | undefined;
};

export type GetDevicesMediaContainer = {
    size?: number | undefined;
    identifier?: string | undefined;
    device?: Array<Device> | undefined;
};

/**
 * Devices
 */
export type GetDevicesResponseBody = {
    mediaContainer?: GetDevicesMediaContainer | undefined;
};

export type GetDevicesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Devices
     */
    object?: GetDevicesResponseBody | undefined;
};

/** @internal */
export namespace Device$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Device, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().optional(),
            name: z.string().optional(),
            platform: z.string().optional(),
            clientIdentifier: z.string().optional(),
            createdAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.clientIdentifier === undefined
                    ? null
                    : { clientIdentifier: v.clientIdentifier }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Device> = z
        .object({
            id: z.number().optional(),
            name: z.string().optional(),
            platform: z.string().optional(),
            clientIdentifier: z.string().optional(),
            createdAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.clientIdentifier === undefined
                    ? null
                    : { clientIdentifier: v.clientIdentifier }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
            };
        });
}

/** @internal */
export namespace GetDevicesMediaContainer$ {
    export type Inbound = {
        size?: number | undefined;
        identifier?: string | undefined;
        Device?: Array<Device$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetDevicesMediaContainer, z.ZodTypeDef, Inbound> = z
        .object({
            size: z.number().optional(),
            identifier: z.string().optional(),
            Device: z.array(z.lazy(() => Device$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.Device === undefined ? null : { device: v.Device }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        identifier?: string | undefined;
        Device?: Array<Device$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDevicesMediaContainer> = z
        .object({
            size: z.number().optional(),
            identifier: z.string().optional(),
            device: z.array(z.lazy(() => Device$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.device === undefined ? null : { Device: v.device }),
            };
        });
}

/** @internal */
export namespace GetDevicesResponseBody$ {
    export type Inbound = {
        MediaContainer?: GetDevicesMediaContainer$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetDevicesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            MediaContainer: z.lazy(() => GetDevicesMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.MediaContainer === undefined ? null : { mediaContainer: v.MediaContainer }),
            };
        });

    export type Outbound = {
        MediaContainer?: GetDevicesMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDevicesResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetDevicesMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetDevicesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetDevicesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetDevicesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetDevicesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetDevicesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDevicesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetDevicesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
