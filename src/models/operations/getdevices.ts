/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type Device = {
    id?: number | undefined;
    name?: string | undefined;
    platform?: string | undefined;
    clientIdentifier?: string | undefined;
    createdAt?: number | undefined;
};

export type GetDevicesMediaContainer = {
    size?: number | undefined;
    identifier?: string | undefined;
    device?: Array<Device> | undefined;
};

/**
 * Devices
 */
export type GetDevicesResponseBody = {
    mediaContainer?: GetDevicesMediaContainer | undefined;
};

export type GetDevicesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Devices
     */
    object?: GetDevicesResponseBody | undefined;
};

/** @internal */
export namespace Device$ {
    export const inboundSchema: z.ZodType<Device, z.ZodTypeDef, unknown> = z.object({
        id: z.number().optional(),
        name: z.string().optional(),
        platform: z.string().optional(),
        clientIdentifier: z.string().optional(),
        createdAt: z.number().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Device> = z.object({
        id: z.number().optional(),
        name: z.string().optional(),
        platform: z.string().optional(),
        clientIdentifier: z.string().optional(),
        createdAt: z.number().optional(),
    });
}

/** @internal */
export namespace GetDevicesMediaContainer$ {
    export const inboundSchema: z.ZodType<GetDevicesMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().optional(),
            identifier: z.string().optional(),
            Device: z.array(z.lazy(() => Device$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Device: "device",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        identifier?: string | undefined;
        Device?: Array<Device$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDevicesMediaContainer> = z
        .object({
            size: z.number().optional(),
            identifier: z.string().optional(),
            device: z.array(z.lazy(() => Device$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                device: "Device",
            });
        });
}

/** @internal */
export namespace GetDevicesResponseBody$ {
    export const inboundSchema: z.ZodType<GetDevicesResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetDevicesMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetDevicesMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDevicesResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetDevicesMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetDevicesResponse$ {
    export const inboundSchema: z.ZodType<GetDevicesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetDevicesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetDevicesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDevicesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetDevicesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
