/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as z from "zod";

export type GetPlaylistContentsRequest = {
    /**
     * the ID of the playlist
     */
    playlistID: number;
    /**
     * the metadata type of the item to return
     */
    type: number;
};

export type GetPlaylistContentsPart = {
    id?: number | undefined;
    key?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    size?: number | undefined;
    audioProfile?: string | undefined;
    container?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    optimizedForStreaming?: boolean | undefined;
    videoProfile?: string | undefined;
};

export type GetPlaylistContentsMedia = {
    id?: number | undefined;
    duration?: number | undefined;
    bitrate?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    aspectRatio?: number | undefined;
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    videoCodec?: string | undefined;
    videoResolution?: string | undefined;
    container?: string | undefined;
    videoFrameRate?: string | undefined;
    optimizedForStreaming?: number | undefined;
    audioProfile?: string | undefined;
    has64bitOffsets?: boolean | undefined;
    videoProfile?: string | undefined;
    part?: Array<GetPlaylistContentsPart> | undefined;
};

export type GetPlaylistContentsGenre = {
    tag?: string | undefined;
};

export type GetPlaylistContentsCountry = {
    tag?: string | undefined;
};

export type GetPlaylistContentsDirector = {
    tag?: string | undefined;
};

export type GetPlaylistContentsWriter = {
    tag?: string | undefined;
};

export type GetPlaylistContentsRole = {
    tag?: string | undefined;
};

export type GetPlaylistContentsMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    studio?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    titleSort?: string | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionKey?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    rating?: number | undefined;
    audienceRating?: number | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: RFCDate | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    audienceRatingImage?: string | undefined;
    hasPremiumExtras?: string | undefined;
    hasPremiumPrimaryExtra?: string | undefined;
    ratingImage?: string | undefined;
    media?: Array<GetPlaylistContentsMedia> | undefined;
    genre?: Array<GetPlaylistContentsGenre> | undefined;
    country?: Array<GetPlaylistContentsCountry> | undefined;
    director?: Array<GetPlaylistContentsDirector> | undefined;
    writer?: Array<GetPlaylistContentsWriter> | undefined;
    role?: Array<GetPlaylistContentsRole> | undefined;
};

export type GetPlaylistContentsMediaContainer = {
    size?: number | undefined;
    composite?: string | undefined;
    duration?: number | undefined;
    leafCount?: number | undefined;
    playlistType?: string | undefined;
    ratingKey?: string | undefined;
    smart?: boolean | undefined;
    title?: string | undefined;
    metadata?: Array<GetPlaylistContentsMetadata> | undefined;
};

/**
 * The playlist contents
 */
export type GetPlaylistContentsResponseBody = {
    mediaContainer?: GetPlaylistContentsMediaContainer | undefined;
};

export type GetPlaylistContentsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The playlist contents
     */
    object?: GetPlaylistContentsResponseBody | undefined;
};

/** @internal */
export namespace GetPlaylistContentsRequest$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsRequest, z.ZodTypeDef, unknown> = z
        .object({
            playlistID: z.number(),
            type: z.number(),
        })
        .transform((v) => {
            return {
                playlistID: v.playlistID,
                type: v.type,
            };
        });

    export type Outbound = {
        playlistID: number;
        type: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsRequest> = z
        .object({
            playlistID: z.number(),
            type: z.number(),
        })
        .transform((v) => {
            return {
                playlistID: v.playlistID,
                type: v.type,
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsPart$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsPart, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            duration: z.number().int().optional(),
            file: z.string().optional(),
            size: z.number().int().optional(),
            audioProfile: z.string().optional(),
            container: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            optimizedForStreaming: z.boolean().optional(),
            videoProfile: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.file === undefined ? null : { file: v.file }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.has64bitOffsets === undefined
                    ? null
                    : { has64bitOffsets: v.has64bitOffsets }),
                ...(v.optimizedForStreaming === undefined
                    ? null
                    : { optimizedForStreaming: v.optimizedForStreaming }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        duration?: number | undefined;
        file?: string | undefined;
        size?: number | undefined;
        audioProfile?: string | undefined;
        container?: string | undefined;
        has64bitOffsets?: boolean | undefined;
        optimizedForStreaming?: boolean | undefined;
        videoProfile?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsPart> = z
        .object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            duration: z.number().int().optional(),
            file: z.string().optional(),
            size: z.number().int().optional(),
            audioProfile: z.string().optional(),
            container: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            optimizedForStreaming: z.boolean().optional(),
            videoProfile: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.file === undefined ? null : { file: v.file }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.has64bitOffsets === undefined
                    ? null
                    : { has64bitOffsets: v.has64bitOffsets }),
                ...(v.optimizedForStreaming === undefined
                    ? null
                    : { optimizedForStreaming: v.optimizedForStreaming }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsMedia$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsMedia, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int().optional(),
            duration: z.number().int().optional(),
            bitrate: z.number().int().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            optimizedForStreaming: z.number().int().optional(),
            audioProfile: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            videoProfile: z.string().optional(),
            Part: z.array(z.lazy(() => GetPlaylistContentsPart$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.aspectRatio === undefined ? null : { aspectRatio: v.aspectRatio }),
                ...(v.audioChannels === undefined ? null : { audioChannels: v.audioChannels }),
                ...(v.audioCodec === undefined ? null : { audioCodec: v.audioCodec }),
                ...(v.videoCodec === undefined ? null : { videoCodec: v.videoCodec }),
                ...(v.videoResolution === undefined
                    ? null
                    : { videoResolution: v.videoResolution }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoFrameRate === undefined ? null : { videoFrameRate: v.videoFrameRate }),
                ...(v.optimizedForStreaming === undefined
                    ? null
                    : { optimizedForStreaming: v.optimizedForStreaming }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.has64bitOffsets === undefined
                    ? null
                    : { has64bitOffsets: v.has64bitOffsets }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
                ...(v.Part === undefined ? null : { part: v.Part }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        duration?: number | undefined;
        bitrate?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        aspectRatio?: number | undefined;
        audioChannels?: number | undefined;
        audioCodec?: string | undefined;
        videoCodec?: string | undefined;
        videoResolution?: string | undefined;
        container?: string | undefined;
        videoFrameRate?: string | undefined;
        optimizedForStreaming?: number | undefined;
        audioProfile?: string | undefined;
        has64bitOffsets?: boolean | undefined;
        videoProfile?: string | undefined;
        Part?: Array<GetPlaylistContentsPart$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsMedia> = z
        .object({
            id: z.number().int().optional(),
            duration: z.number().int().optional(),
            bitrate: z.number().int().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            optimizedForStreaming: z.number().int().optional(),
            audioProfile: z.string().optional(),
            has64bitOffsets: z.boolean().optional(),
            videoProfile: z.string().optional(),
            part: z.array(z.lazy(() => GetPlaylistContentsPart$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.aspectRatio === undefined ? null : { aspectRatio: v.aspectRatio }),
                ...(v.audioChannels === undefined ? null : { audioChannels: v.audioChannels }),
                ...(v.audioCodec === undefined ? null : { audioCodec: v.audioCodec }),
                ...(v.videoCodec === undefined ? null : { videoCodec: v.videoCodec }),
                ...(v.videoResolution === undefined
                    ? null
                    : { videoResolution: v.videoResolution }),
                ...(v.container === undefined ? null : { container: v.container }),
                ...(v.videoFrameRate === undefined ? null : { videoFrameRate: v.videoFrameRate }),
                ...(v.optimizedForStreaming === undefined
                    ? null
                    : { optimizedForStreaming: v.optimizedForStreaming }),
                ...(v.audioProfile === undefined ? null : { audioProfile: v.audioProfile }),
                ...(v.has64bitOffsets === undefined
                    ? null
                    : { has64bitOffsets: v.has64bitOffsets }),
                ...(v.videoProfile === undefined ? null : { videoProfile: v.videoProfile }),
                ...(v.part === undefined ? null : { Part: v.part }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsGenre$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsGenre, z.ZodTypeDef, unknown> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsGenre> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsCountry$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsCountry, z.ZodTypeDef, unknown> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsCountry> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsDirector$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsDirector, z.ZodTypeDef, unknown> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsDirector> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsWriter$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsWriter, z.ZodTypeDef, unknown> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsWriter> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsRole$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsRole, z.ZodTypeDef, unknown> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsRole> = z
        .object({
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsMetadata$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsMetadata, z.ZodTypeDef, unknown> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            titleSort: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionKey: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            rating: z.number().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            hasPremiumExtras: z.string().optional(),
            hasPremiumPrimaryExtra: z.string().optional(),
            ratingImage: z.string().optional(),
            Media: z.array(z.lazy(() => GetPlaylistContentsMedia$.inboundSchema)).optional(),
            Genre: z.array(z.lazy(() => GetPlaylistContentsGenre$.inboundSchema)).optional(),
            Country: z.array(z.lazy(() => GetPlaylistContentsCountry$.inboundSchema)).optional(),
            Director: z.array(z.lazy(() => GetPlaylistContentsDirector$.inboundSchema)).optional(),
            Writer: z.array(z.lazy(() => GetPlaylistContentsWriter$.inboundSchema)).optional(),
            Role: z.array(z.lazy(() => GetPlaylistContentsRole$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ratingKey === undefined ? null : { ratingKey: v.ratingKey }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.guid === undefined ? null : { guid: v.guid }),
                ...(v.studio === undefined ? null : { studio: v.studio }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.titleSort === undefined ? null : { titleSort: v.titleSort }),
                ...(v.librarySectionTitle === undefined
                    ? null
                    : { librarySectionTitle: v.librarySectionTitle }),
                ...(v.librarySectionID === undefined
                    ? null
                    : { librarySectionID: v.librarySectionID }),
                ...(v.librarySectionKey === undefined
                    ? null
                    : { librarySectionKey: v.librarySectionKey }),
                ...(v.contentRating === undefined ? null : { contentRating: v.contentRating }),
                ...(v.summary === undefined ? null : { summary: v.summary }),
                ...(v.rating === undefined ? null : { rating: v.rating }),
                ...(v.audienceRating === undefined ? null : { audienceRating: v.audienceRating }),
                ...(v.year === undefined ? null : { year: v.year }),
                ...(v.tagline === undefined ? null : { tagline: v.tagline }),
                ...(v.thumb === undefined ? null : { thumb: v.thumb }),
                ...(v.art === undefined ? null : { art: v.art }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.originallyAvailableAt === undefined
                    ? null
                    : { originallyAvailableAt: v.originallyAvailableAt }),
                ...(v.addedAt === undefined ? null : { addedAt: v.addedAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.audienceRatingImage === undefined
                    ? null
                    : { audienceRatingImage: v.audienceRatingImage }),
                ...(v.hasPremiumExtras === undefined
                    ? null
                    : { hasPremiumExtras: v.hasPremiumExtras }),
                ...(v.hasPremiumPrimaryExtra === undefined
                    ? null
                    : { hasPremiumPrimaryExtra: v.hasPremiumPrimaryExtra }),
                ...(v.ratingImage === undefined ? null : { ratingImage: v.ratingImage }),
                ...(v.Media === undefined ? null : { media: v.Media }),
                ...(v.Genre === undefined ? null : { genre: v.Genre }),
                ...(v.Country === undefined ? null : { country: v.Country }),
                ...(v.Director === undefined ? null : { director: v.Director }),
                ...(v.Writer === undefined ? null : { writer: v.Writer }),
                ...(v.Role === undefined ? null : { role: v.Role }),
            };
        });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        studio?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        titleSort?: string | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionID?: number | undefined;
        librarySectionKey?: string | undefined;
        contentRating?: string | undefined;
        summary?: string | undefined;
        rating?: number | undefined;
        audienceRating?: number | undefined;
        year?: number | undefined;
        tagline?: string | undefined;
        thumb?: string | undefined;
        art?: string | undefined;
        duration?: number | undefined;
        originallyAvailableAt?: string | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        audienceRatingImage?: string | undefined;
        hasPremiumExtras?: string | undefined;
        hasPremiumPrimaryExtra?: string | undefined;
        ratingImage?: string | undefined;
        Media?: Array<GetPlaylistContentsMedia$.Outbound> | undefined;
        Genre?: Array<GetPlaylistContentsGenre$.Outbound> | undefined;
        Country?: Array<GetPlaylistContentsCountry$.Outbound> | undefined;
        Director?: Array<GetPlaylistContentsDirector$.Outbound> | undefined;
        Writer?: Array<GetPlaylistContentsWriter$.Outbound> | undefined;
        Role?: Array<GetPlaylistContentsRole$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsMetadata> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            titleSort: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionKey: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            rating: z.number().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            hasPremiumExtras: z.string().optional(),
            hasPremiumPrimaryExtra: z.string().optional(),
            ratingImage: z.string().optional(),
            media: z.array(z.lazy(() => GetPlaylistContentsMedia$.outboundSchema)).optional(),
            genre: z.array(z.lazy(() => GetPlaylistContentsGenre$.outboundSchema)).optional(),
            country: z.array(z.lazy(() => GetPlaylistContentsCountry$.outboundSchema)).optional(),
            director: z.array(z.lazy(() => GetPlaylistContentsDirector$.outboundSchema)).optional(),
            writer: z.array(z.lazy(() => GetPlaylistContentsWriter$.outboundSchema)).optional(),
            role: z.array(z.lazy(() => GetPlaylistContentsRole$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ratingKey === undefined ? null : { ratingKey: v.ratingKey }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.guid === undefined ? null : { guid: v.guid }),
                ...(v.studio === undefined ? null : { studio: v.studio }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.titleSort === undefined ? null : { titleSort: v.titleSort }),
                ...(v.librarySectionTitle === undefined
                    ? null
                    : { librarySectionTitle: v.librarySectionTitle }),
                ...(v.librarySectionID === undefined
                    ? null
                    : { librarySectionID: v.librarySectionID }),
                ...(v.librarySectionKey === undefined
                    ? null
                    : { librarySectionKey: v.librarySectionKey }),
                ...(v.contentRating === undefined ? null : { contentRating: v.contentRating }),
                ...(v.summary === undefined ? null : { summary: v.summary }),
                ...(v.rating === undefined ? null : { rating: v.rating }),
                ...(v.audienceRating === undefined ? null : { audienceRating: v.audienceRating }),
                ...(v.year === undefined ? null : { year: v.year }),
                ...(v.tagline === undefined ? null : { tagline: v.tagline }),
                ...(v.thumb === undefined ? null : { thumb: v.thumb }),
                ...(v.art === undefined ? null : { art: v.art }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.originallyAvailableAt === undefined
                    ? null
                    : { originallyAvailableAt: v.originallyAvailableAt }),
                ...(v.addedAt === undefined ? null : { addedAt: v.addedAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.audienceRatingImage === undefined
                    ? null
                    : { audienceRatingImage: v.audienceRatingImage }),
                ...(v.hasPremiumExtras === undefined
                    ? null
                    : { hasPremiumExtras: v.hasPremiumExtras }),
                ...(v.hasPremiumPrimaryExtra === undefined
                    ? null
                    : { hasPremiumPrimaryExtra: v.hasPremiumPrimaryExtra }),
                ...(v.ratingImage === undefined ? null : { ratingImage: v.ratingImage }),
                ...(v.media === undefined ? null : { Media: v.media }),
                ...(v.genre === undefined ? null : { Genre: v.genre }),
                ...(v.country === undefined ? null : { Country: v.country }),
                ...(v.director === undefined ? null : { Director: v.director }),
                ...(v.writer === undefined ? null : { Writer: v.writer }),
                ...(v.role === undefined ? null : { Role: v.role }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetPlaylistContentsMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            composite: z.string().optional(),
            duration: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            playlistType: z.string().optional(),
            ratingKey: z.string().optional(),
            smart: z.boolean().optional(),
            title: z.string().optional(),
            Metadata: z.array(z.lazy(() => GetPlaylistContentsMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.composite === undefined ? null : { composite: v.composite }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.leafCount === undefined ? null : { leafCount: v.leafCount }),
                ...(v.playlistType === undefined ? null : { playlistType: v.playlistType }),
                ...(v.ratingKey === undefined ? null : { ratingKey: v.ratingKey }),
                ...(v.smart === undefined ? null : { smart: v.smart }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.Metadata === undefined ? null : { metadata: v.Metadata }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        composite?: string | undefined;
        duration?: number | undefined;
        leafCount?: number | undefined;
        playlistType?: string | undefined;
        ratingKey?: string | undefined;
        smart?: boolean | undefined;
        title?: string | undefined;
        Metadata?: Array<GetPlaylistContentsMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPlaylistContentsMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            composite: z.string().optional(),
            duration: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            playlistType: z.string().optional(),
            ratingKey: z.string().optional(),
            smart: z.boolean().optional(),
            title: z.string().optional(),
            metadata: z.array(z.lazy(() => GetPlaylistContentsMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.composite === undefined ? null : { composite: v.composite }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.leafCount === undefined ? null : { leafCount: v.leafCount }),
                ...(v.playlistType === undefined ? null : { playlistType: v.playlistType }),
                ...(v.ratingKey === undefined ? null : { ratingKey: v.ratingKey }),
                ...(v.smart === undefined ? null : { smart: v.smart }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.metadata === undefined ? null : { Metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsResponseBody$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetPlaylistContentsMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.MediaContainer === undefined
                        ? null
                        : { mediaContainer: v.MediaContainer }),
                };
            });

    export type Outbound = {
        MediaContainer?: GetPlaylistContentsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPlaylistContentsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetPlaylistContentsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetPlaylistContentsResponse$ {
    export const inboundSchema: z.ZodType<GetPlaylistContentsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetPlaylistContentsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetPlaylistContentsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaylistContentsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetPlaylistContentsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
