/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * Indicate that you want to start download any updates found.
 */
export enum Download {
    Zero = 0,
    One = 1,
}

export type CheckForUpdatesRequest = {
    /**
     * Indicate that you want to start download any updates found.
     */
    download?: Download | undefined;
};

export type CheckForUpdatesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace Download$ {
    export const inboundSchema = z.nativeEnum(Download);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CheckForUpdatesRequest$ {
    export const inboundSchema: z.ZodType<CheckForUpdatesRequest, z.ZodTypeDef, unknown> = z.object(
        {
            download: Download$.inboundSchema.optional(),
        }
    );

    export type Outbound = {
        download?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckForUpdatesRequest> =
        z.object({
            download: Download$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace CheckForUpdatesResponse$ {
    export const inboundSchema: z.ZodType<CheckForUpdatesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckForUpdatesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
