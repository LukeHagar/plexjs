/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * the name of the task to be started.
 */
export enum TaskName {
    BackupDatabase = "BackupDatabase",
    BuildGracenoteCollections = "BuildGracenoteCollections",
    CheckForUpdates = "CheckForUpdates",
    CleanOldBundles = "CleanOldBundles",
    CleanOldCacheFiles = "CleanOldCacheFiles",
    DeepMediaAnalysis = "DeepMediaAnalysis",
    GenerateAutoTags = "GenerateAutoTags",
    GenerateChapterThumbs = "GenerateChapterThumbs",
    GenerateMediaIndexFiles = "GenerateMediaIndexFiles",
    OptimizeDatabase = "OptimizeDatabase",
    RefreshLibraries = "RefreshLibraries",
    RefreshLocalMedia = "RefreshLocalMedia",
    RefreshPeriodicMetadata = "RefreshPeriodicMetadata",
    UpgradeMediaAnalysis = "UpgradeMediaAnalysis",
}

export type StartTaskRequest = {
    /**
     * the name of the task to be started.
     */
    taskName: TaskName;
};

export type StartTaskResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace TaskName$ {
    export const inboundSchema = z.nativeEnum(TaskName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace StartTaskRequest$ {
    export const inboundSchema: z.ZodType<StartTaskRequest, z.ZodTypeDef, unknown> = z.object({
        taskName: TaskName$.inboundSchema,
    });

    export type Outbound = {
        taskName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StartTaskRequest> = z.object({
        taskName: TaskName$.outboundSchema,
    });
}

/** @internal */
export namespace StartTaskResponse$ {
    export const inboundSchema: z.ZodType<StartTaskResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StartTaskResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
