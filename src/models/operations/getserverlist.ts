/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetServerListServer = {
    name?: string | undefined;
    host?: string | undefined;
    address?: string | undefined;
    port?: number | undefined;
    machineIdentifier?: string | undefined;
    version?: string | undefined;
};

export type GetServerListMediaContainer = {
    size?: number | undefined;
    server?: Array<GetServerListServer> | undefined;
};

/**
 * List of Servers
 */
export type GetServerListResponseBody = {
    mediaContainer?: GetServerListMediaContainer | undefined;
};

export type GetServerListResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of Servers
     */
    object?: GetServerListResponseBody | undefined;
};

/** @internal */
export namespace GetServerListServer$ {
    export type Inbound = {
        name?: string | undefined;
        host?: string | undefined;
        address?: string | undefined;
        port?: number | undefined;
        machineIdentifier?: string | undefined;
        version?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetServerListServer, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            host: z.string().optional(),
            address: z.string().optional(),
            port: z.number().optional(),
            machineIdentifier: z.string().optional(),
            version: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.host === undefined ? null : { host: v.host }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.port === undefined ? null : { port: v.port }),
                ...(v.machineIdentifier === undefined
                    ? null
                    : { machineIdentifier: v.machineIdentifier }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        host?: string | undefined;
        address?: string | undefined;
        port?: number | undefined;
        machineIdentifier?: string | undefined;
        version?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerListServer> = z
        .object({
            name: z.string().optional(),
            host: z.string().optional(),
            address: z.string().optional(),
            port: z.number().optional(),
            machineIdentifier: z.string().optional(),
            version: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.host === undefined ? null : { host: v.host }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.port === undefined ? null : { port: v.port }),
                ...(v.machineIdentifier === undefined
                    ? null
                    : { machineIdentifier: v.machineIdentifier }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}

/** @internal */
export namespace GetServerListMediaContainer$ {
    export type Inbound = {
        size?: number | undefined;
        Server?: Array<GetServerListServer$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetServerListMediaContainer, z.ZodTypeDef, Inbound> = z
        .object({
            size: z.number().optional(),
            Server: z.array(z.lazy(() => GetServerListServer$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.Server === undefined ? null : { server: v.Server }),
            };
        });

    export type Outbound = {
        size?: number | undefined;
        Server?: Array<GetServerListServer$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerListMediaContainer> = z
        .object({
            size: z.number().optional(),
            server: z.array(z.lazy(() => GetServerListServer$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.server === undefined ? null : { Server: v.server }),
            };
        });
}

/** @internal */
export namespace GetServerListResponseBody$ {
    export type Inbound = {
        MediaContainer?: GetServerListMediaContainer$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetServerListResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            MediaContainer: z.lazy(() => GetServerListMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.MediaContainer === undefined ? null : { mediaContainer: v.MediaContainer }),
            };
        });

    export type Outbound = {
        MediaContainer?: GetServerListMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerListResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetServerListMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.mediaContainer === undefined ? null : { MediaContainer: v.mediaContainer }),
            };
        });
}

/** @internal */
export namespace GetServerListResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetServerListResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetServerListResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetServerListResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetServerListResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetServerListResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetServerListResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
