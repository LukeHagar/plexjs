/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetBandwidthStatisticsRequest = {
    /**
     * The timespan to retrieve statistics for
     *
     * @remarks
     * the exact meaning of this parameter is not known
     *
     */
    timespan?: number | undefined;
};

export type GetBandwidthStatisticsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetBandwidthStatisticsStatisticsResponseBodyData = {
    errors?: Array<GetBandwidthStatisticsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetBandwidthStatisticsStatisticsResponseBody extends Error {
    errors?: Array<GetBandwidthStatisticsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetBandwidthStatisticsStatisticsResponseBodyData;

    constructor(err: GetBandwidthStatisticsStatisticsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetBandwidthStatisticsStatisticsResponseBody";
    }
}

export type GetBandwidthStatisticsDevice = {
    id?: number | undefined;
    name?: string | undefined;
    platform?: string | undefined;
    clientIdentifier?: string | undefined;
    createdAt?: number | undefined;
};

export type GetBandwidthStatisticsAccount = {
    id?: number | undefined;
    key?: string | undefined;
    name?: string | undefined;
    defaultAudioLanguage?: string | undefined;
    autoSelectAudio?: boolean | undefined;
    defaultSubtitleLanguage?: string | undefined;
    subtitleMode?: number | undefined;
    thumb?: string | undefined;
};

export type StatisticsBandwidth = {
    accountID?: number | undefined;
    deviceID?: number | undefined;
    timespan?: number | undefined;
    at?: number | undefined;
    lan?: boolean | undefined;
    bytes?: number | undefined;
};

export type GetBandwidthStatisticsMediaContainer = {
    size?: number | undefined;
    device?: Array<GetBandwidthStatisticsDevice> | undefined;
    account?: Array<GetBandwidthStatisticsAccount> | undefined;
    statisticsBandwidth?: Array<StatisticsBandwidth> | undefined;
};

/**
 * Bandwidth Statistics
 */
export type GetBandwidthStatisticsResponseBody = {
    mediaContainer?: GetBandwidthStatisticsMediaContainer | undefined;
};

export type GetBandwidthStatisticsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Bandwidth Statistics
     */
    object?: GetBandwidthStatisticsResponseBody | undefined;
};

/** @internal */
export namespace GetBandwidthStatisticsRequest$ {
    export const inboundSchema: z.ZodType<GetBandwidthStatisticsRequest, z.ZodTypeDef, unknown> = z
        .object({
            Timespan: z.number().int().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Timespan: "timespan",
            });
        });

    export type Outbound = {
        Timespan?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBandwidthStatisticsRequest> =
        z
            .object({
                timespan: z.number().int().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    timespan: "Timespan",
                });
            });
}

/** @internal */
export namespace GetBandwidthStatisticsErrors$ {
    export const inboundSchema: z.ZodType<GetBandwidthStatisticsErrors, z.ZodTypeDef, unknown> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBandwidthStatisticsErrors> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });
}

/** @internal */
export namespace GetBandwidthStatisticsStatisticsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetBandwidthStatisticsStatisticsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => GetBandwidthStatisticsErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetBandwidthStatisticsStatisticsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetBandwidthStatisticsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetBandwidthStatisticsStatisticsResponseBody
    > = z
        .instanceof(GetBandwidthStatisticsStatisticsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z
                        .array(z.lazy(() => GetBandwidthStatisticsErrors$.outboundSchema))
                        .optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetBandwidthStatisticsDevice$ {
    export const inboundSchema: z.ZodType<GetBandwidthStatisticsDevice, z.ZodTypeDef, unknown> =
        z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            platform: z.string().optional(),
            clientIdentifier: z.string().optional(),
            createdAt: z.number().int().optional(),
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBandwidthStatisticsDevice> =
        z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            platform: z.string().optional(),
            clientIdentifier: z.string().optional(),
            createdAt: z.number().int().optional(),
        });
}

/** @internal */
export namespace GetBandwidthStatisticsAccount$ {
    export const inboundSchema: z.ZodType<GetBandwidthStatisticsAccount, z.ZodTypeDef, unknown> =
        z.object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            name: z.string().optional(),
            defaultAudioLanguage: z.string().optional(),
            autoSelectAudio: z.boolean().optional(),
            defaultSubtitleLanguage: z.string().optional(),
            subtitleMode: z.number().int().optional(),
            thumb: z.string().optional(),
        });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        name?: string | undefined;
        defaultAudioLanguage?: string | undefined;
        autoSelectAudio?: boolean | undefined;
        defaultSubtitleLanguage?: string | undefined;
        subtitleMode?: number | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBandwidthStatisticsAccount> =
        z.object({
            id: z.number().int().optional(),
            key: z.string().optional(),
            name: z.string().optional(),
            defaultAudioLanguage: z.string().optional(),
            autoSelectAudio: z.boolean().optional(),
            defaultSubtitleLanguage: z.string().optional(),
            subtitleMode: z.number().int().optional(),
            thumb: z.string().optional(),
        });
}

/** @internal */
export namespace StatisticsBandwidth$ {
    export const inboundSchema: z.ZodType<StatisticsBandwidth, z.ZodTypeDef, unknown> = z.object({
        accountID: z.number().int().optional(),
        deviceID: z.number().int().optional(),
        timespan: z.number().int().optional(),
        at: z.number().int().optional(),
        lan: z.boolean().optional(),
        bytes: z.number().int().optional(),
    });

    export type Outbound = {
        accountID?: number | undefined;
        deviceID?: number | undefined;
        timespan?: number | undefined;
        at?: number | undefined;
        lan?: boolean | undefined;
        bytes?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StatisticsBandwidth> = z.object({
        accountID: z.number().int().optional(),
        deviceID: z.number().int().optional(),
        timespan: z.number().int().optional(),
        at: z.number().int().optional(),
        lan: z.boolean().optional(),
        bytes: z.number().int().optional(),
    });
}

/** @internal */
export namespace GetBandwidthStatisticsMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetBandwidthStatisticsMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            Device: z.array(z.lazy(() => GetBandwidthStatisticsDevice$.inboundSchema)).optional(),
            Account: z.array(z.lazy(() => GetBandwidthStatisticsAccount$.inboundSchema)).optional(),
            StatisticsBandwidth: z
                .array(z.lazy(() => StatisticsBandwidth$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Device: "device",
                Account: "account",
                StatisticsBandwidth: "statisticsBandwidth",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Device?: Array<GetBandwidthStatisticsDevice$.Outbound> | undefined;
        Account?: Array<GetBandwidthStatisticsAccount$.Outbound> | undefined;
        StatisticsBandwidth?: Array<StatisticsBandwidth$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetBandwidthStatisticsMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            device: z.array(z.lazy(() => GetBandwidthStatisticsDevice$.outboundSchema)).optional(),
            account: z
                .array(z.lazy(() => GetBandwidthStatisticsAccount$.outboundSchema))
                .optional(),
            statisticsBandwidth: z
                .array(z.lazy(() => StatisticsBandwidth$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                device: "Device",
                account: "Account",
                statisticsBandwidth: "StatisticsBandwidth",
            });
        });
}

/** @internal */
export namespace GetBandwidthStatisticsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetBandwidthStatisticsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            MediaContainer: z
                .lazy(() => GetBandwidthStatisticsMediaContainer$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetBandwidthStatisticsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetBandwidthStatisticsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetBandwidthStatisticsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetBandwidthStatisticsResponse$ {
    export const inboundSchema: z.ZodType<GetBandwidthStatisticsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetBandwidthStatisticsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetBandwidthStatisticsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBandwidthStatisticsResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => GetBandwidthStatisticsResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
