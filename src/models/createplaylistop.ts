/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

/**
 * type of playlist to create
 */
export enum QueryParamType {
    Audio = "audio",
    Video = "video",
    Photo = "photo",
}

/**
 * whether the playlist is smart or not
 */
export enum Smart {
    Zero = 0,
    One = 1,
}

export type CreatePlaylistRequest = {
    /**
     * name of the playlist
     */
    title: string;
    /**
     * type of playlist to create
     */
    type: QueryParamType;
    /**
     * whether the playlist is smart or not
     */
    smart: Smart;
    /**
     * the content URI for the playlist
     */
    uri: string;
    /**
     * the play queue to copy to a playlist
     */
    playQueueID?: number | undefined;
};

export type CreatePlaylistErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type CreatePlaylistPlaylistsResponseBodyData = {
    errors?: Array<CreatePlaylistErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class CreatePlaylistPlaylistsResponseBody extends Error {
    errors?: Array<CreatePlaylistErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: CreatePlaylistPlaylistsResponseBodyData;

    constructor(err: CreatePlaylistPlaylistsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "CreatePlaylistPlaylistsResponseBody";
    }
}

export type CreatePlaylistMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    summary?: string | undefined;
    smart?: boolean | undefined;
    playlistType?: string | undefined;
    icon?: string | undefined;
    viewCount?: number | undefined;
    lastViewedAt?: number | undefined;
    leafCount?: number | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    composite?: string | undefined;
    duration?: number | undefined;
};

export type CreatePlaylistMediaContainer = {
    size?: number | undefined;
    metadata?: Array<CreatePlaylistMetadata> | undefined;
};

/**
 * returns all playlists
 */
export type CreatePlaylistResponseBody = {
    mediaContainer?: CreatePlaylistMediaContainer | undefined;
};

export type CreatePlaylistResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * returns all playlists
     */
    object?: CreatePlaylistResponseBody | undefined;
};

/** @internal */
export namespace QueryParamType$ {
    export const inboundSchema = z.nativeEnum(QueryParamType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Smart$ {
    export const inboundSchema = z.nativeEnum(Smart);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CreatePlaylistRequest$ {
    export const inboundSchema: z.ZodType<CreatePlaylistRequest, z.ZodTypeDef, unknown> = z.object({
        title: z.string(),
        type: QueryParamType$.inboundSchema,
        smart: Smart$.inboundSchema,
        uri: z.string(),
        playQueueID: z.number().optional(),
    });

    export type Outbound = {
        title: string;
        type: string;
        smart: number;
        uri: string;
        playQueueID?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePlaylistRequest> =
        z.object({
            title: z.string(),
            type: QueryParamType$.outboundSchema,
            smart: Smart$.outboundSchema,
            uri: z.string(),
            playQueueID: z.number().optional(),
        });
}

/** @internal */
export namespace CreatePlaylistErrors$ {
    export const inboundSchema: z.ZodType<CreatePlaylistErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePlaylistErrors> = z.object(
        {
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        }
    );
}

/** @internal */
export namespace CreatePlaylistPlaylistsResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreatePlaylistPlaylistsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => CreatePlaylistErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new CreatePlaylistPlaylistsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<CreatePlaylistErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreatePlaylistPlaylistsResponseBody
    > = z
        .instanceof(CreatePlaylistPlaylistsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => CreatePlaylistErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace CreatePlaylistMetadata$ {
    export const inboundSchema: z.ZodType<CreatePlaylistMetadata, z.ZodTypeDef, unknown> = z.object(
        {
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            summary: z.string().optional(),
            smart: z.boolean().optional(),
            playlistType: z.string().optional(),
            icon: z.string().optional(),
            viewCount: z.number().int().optional(),
            lastViewedAt: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            composite: z.string().optional(),
            duration: z.number().int().optional(),
        }
    );

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        summary?: string | undefined;
        smart?: boolean | undefined;
        playlistType?: string | undefined;
        icon?: string | undefined;
        viewCount?: number | undefined;
        lastViewedAt?: number | undefined;
        leafCount?: number | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        composite?: string | undefined;
        duration?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePlaylistMetadata> =
        z.object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            summary: z.string().optional(),
            smart: z.boolean().optional(),
            playlistType: z.string().optional(),
            icon: z.string().optional(),
            viewCount: z.number().int().optional(),
            lastViewedAt: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            composite: z.string().optional(),
            duration: z.number().int().optional(),
        });
}

/** @internal */
export namespace CreatePlaylistMediaContainer$ {
    export const inboundSchema: z.ZodType<CreatePlaylistMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            Metadata: z.array(z.lazy(() => CreatePlaylistMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Metadata?: Array<CreatePlaylistMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePlaylistMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            metadata: z.array(z.lazy(() => CreatePlaylistMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace CreatePlaylistResponseBody$ {
    export const inboundSchema: z.ZodType<CreatePlaylistResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => CreatePlaylistMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: CreatePlaylistMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePlaylistResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => CreatePlaylistMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace CreatePlaylistResponse$ {
    export const inboundSchema: z.ZodType<CreatePlaylistResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreatePlaylistResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreatePlaylistResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePlaylistResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreatePlaylistResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
