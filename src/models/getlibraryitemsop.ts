/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import { RFCDate } from "../types";
import * as z from "zod";

/**
 * A key representing a specific tag within the section.
 */
export enum Tag {
    All = "all",
    Unwatched = "unwatched",
    Newest = "newest",
    RecentlyAdded = "recentlyAdded",
    RecentlyViewed = "recentlyViewed",
    OnDeck = "onDeck",
    Collection = "collection",
    Edition = "edition",
    Genre = "genre",
    Year = "year",
    Decade = "decade",
    Director = "director",
    Actor = "actor",
    Country = "country",
    ContentRating = "contentRating",
    Rating = "rating",
    Resolution = "resolution",
    FirstCharacter = "firstCharacter",
    Folder = "folder",
}

export type GetLibraryItemsRequest = {
    /**
     * the Id of the library to query
     */
    sectionId?: any | undefined;
    /**
     * A key representing a specific tag within the section.
     */
    tag: Tag;
};

export type GetLibraryItemsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetLibraryItemsLibraryResponseBodyData = {
    errors?: Array<GetLibraryItemsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetLibraryItemsLibraryResponseBody extends Error {
    errors?: Array<GetLibraryItemsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetLibraryItemsLibraryResponseBodyData;

    constructor(err: GetLibraryItemsLibraryResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetLibraryItemsLibraryResponseBody";
    }
}

export type GetLibraryItemsPart = {
    id?: number | undefined;
    key?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    size?: number | undefined;
    container?: string | undefined;
    videoProfile?: string | undefined;
};

export type GetLibraryItemsMedia = {
    id?: number | undefined;
    duration?: number | undefined;
    bitrate?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    aspectRatio?: number | undefined;
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    videoCodec?: string | undefined;
    videoResolution?: string | undefined;
    container?: string | undefined;
    videoFrameRate?: string | undefined;
    videoProfile?: string | undefined;
    part?: Array<GetLibraryItemsPart> | undefined;
};

export type GetLibraryItemsGenre = {
    tag?: string | undefined;
};

export type GetLibraryItemsCountry = {
    tag?: string | undefined;
};

export type GetLibraryItemsDirector = {
    tag?: string | undefined;
};

export type GetLibraryItemsWriter = {
    tag?: string | undefined;
};

export type GetLibraryItemsRole = {
    tag?: string | undefined;
};

export type GetLibraryItemsMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    studio?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    rating?: number | undefined;
    audienceRating?: number | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: RFCDate | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    audienceRatingImage?: string | undefined;
    chapterSource?: string | undefined;
    primaryExtraKey?: string | undefined;
    ratingImage?: string | undefined;
    grandparentRatingKey?: string | undefined;
    grandparentGuid?: string | undefined;
    grandparentKey?: string | undefined;
    grandparentTitle?: string | undefined;
    grandparentThumb?: string | undefined;
    grandparentArt?: string | undefined;
    grandparentTheme?: string | undefined;
    media?: Array<GetLibraryItemsMedia> | undefined;
    genre?: Array<GetLibraryItemsGenre> | undefined;
    country?: Array<GetLibraryItemsCountry> | undefined;
    director?: Array<GetLibraryItemsDirector> | undefined;
    writer?: Array<GetLibraryItemsWriter> | undefined;
    role?: Array<GetLibraryItemsRole> | undefined;
    titleSort?: string | undefined;
    viewCount?: number | undefined;
    lastViewedAt?: number | undefined;
    originalTitle?: string | undefined;
    viewOffset?: number | undefined;
    skipCount?: number | undefined;
    index?: number | undefined;
    theme?: string | undefined;
    leafCount?: number | undefined;
    viewedLeafCount?: number | undefined;
    childCount?: number | undefined;
    hasPremiumExtras?: string | undefined;
    hasPremiumPrimaryExtra?: string | undefined;
    parentRatingKey?: string | undefined;
    parentGuid?: string | undefined;
    parentStudio?: string | undefined;
    parentKey?: string | undefined;
    parentTitle?: string | undefined;
    parentIndex?: number | undefined;
    parentYear?: number | undefined;
    parentThumb?: string | undefined;
    parentTheme?: string | undefined;
};

export type GetLibraryItemsMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    art?: string | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionUUID?: string | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    thumb?: string | undefined;
    title1?: string | undefined;
    title2?: string | undefined;
    viewGroup?: string | undefined;
    viewMode?: number | undefined;
    mixedParents?: boolean | undefined;
    metadata?: Array<GetLibraryItemsMetadata> | undefined;
};

/**
 * The contents of the library by section and tag
 */
export type GetLibraryItemsResponseBody = {
    mediaContainer?: GetLibraryItemsMediaContainer | undefined;
};

export type GetLibraryItemsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The contents of the library by section and tag
     */
    object?: GetLibraryItemsResponseBody | undefined;
};

/** @internal */
export namespace Tag$ {
    export const inboundSchema = z.nativeEnum(Tag);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetLibraryItemsRequest$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsRequest, z.ZodTypeDef, unknown> = z.object(
        {
            sectionId: z.any().optional(),
            tag: Tag$.inboundSchema,
        }
    );

    export type Outbound = {
        sectionId?: any | undefined;
        tag: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsRequest> =
        z.object({
            sectionId: z.any().optional(),
            tag: Tag$.outboundSchema,
        });
}

/** @internal */
export namespace GetLibraryItemsErrors$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsErrors> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });
}

/** @internal */
export namespace GetLibraryItemsLibraryResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetLibraryItemsLibraryResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => GetLibraryItemsErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetLibraryItemsLibraryResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetLibraryItemsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetLibraryItemsLibraryResponseBody
    > = z
        .instanceof(GetLibraryItemsLibraryResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => GetLibraryItemsErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetLibraryItemsPart$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsPart, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        key: z.string().optional(),
        duration: z.number().int().optional(),
        file: z.string().optional(),
        size: z.number().int().optional(),
        container: z.string().optional(),
        videoProfile: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        duration?: number | undefined;
        file?: string | undefined;
        size?: number | undefined;
        container?: string | undefined;
        videoProfile?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsPart> = z.object({
        id: z.number().int().optional(),
        key: z.string().optional(),
        duration: z.number().int().optional(),
        file: z.string().optional(),
        size: z.number().int().optional(),
        container: z.string().optional(),
        videoProfile: z.string().optional(),
    });
}

/** @internal */
export namespace GetLibraryItemsMedia$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsMedia, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int().optional(),
            duration: z.number().int().optional(),
            bitrate: z.number().int().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            videoProfile: z.string().optional(),
            Part: z.array(z.lazy(() => GetLibraryItemsPart$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Part: "part",
            });
        });

    export type Outbound = {
        id?: number | undefined;
        duration?: number | undefined;
        bitrate?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        aspectRatio?: number | undefined;
        audioChannels?: number | undefined;
        audioCodec?: string | undefined;
        videoCodec?: string | undefined;
        videoResolution?: string | undefined;
        container?: string | undefined;
        videoFrameRate?: string | undefined;
        videoProfile?: string | undefined;
        Part?: Array<GetLibraryItemsPart$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsMedia> = z
        .object({
            id: z.number().int().optional(),
            duration: z.number().int().optional(),
            bitrate: z.number().int().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            aspectRatio: z.number().optional(),
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            videoCodec: z.string().optional(),
            videoResolution: z.string().optional(),
            container: z.string().optional(),
            videoFrameRate: z.string().optional(),
            videoProfile: z.string().optional(),
            part: z.array(z.lazy(() => GetLibraryItemsPart$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                part: "Part",
            });
        });
}

/** @internal */
export namespace GetLibraryItemsGenre$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsGenre, z.ZodTypeDef, unknown> = z.object({
        tag: z.string().optional(),
    });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsGenre> = z.object(
        {
            tag: z.string().optional(),
        }
    );
}

/** @internal */
export namespace GetLibraryItemsCountry$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsCountry, z.ZodTypeDef, unknown> = z.object(
        {
            tag: z.string().optional(),
        }
    );

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsCountry> =
        z.object({
            tag: z.string().optional(),
        });
}

/** @internal */
export namespace GetLibraryItemsDirector$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsDirector, z.ZodTypeDef, unknown> =
        z.object({
            tag: z.string().optional(),
        });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsDirector> =
        z.object({
            tag: z.string().optional(),
        });
}

/** @internal */
export namespace GetLibraryItemsWriter$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsWriter, z.ZodTypeDef, unknown> = z.object({
        tag: z.string().optional(),
    });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsWriter> =
        z.object({
            tag: z.string().optional(),
        });
}

/** @internal */
export namespace GetLibraryItemsRole$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsRole, z.ZodTypeDef, unknown> = z.object({
        tag: z.string().optional(),
    });

    export type Outbound = {
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsRole> = z.object({
        tag: z.string().optional(),
    });
}

/** @internal */
export namespace GetLibraryItemsMetadata$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsMetadata, z.ZodTypeDef, unknown> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            rating: z.number().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            chapterSource: z.string().optional(),
            primaryExtraKey: z.string().optional(),
            ratingImage: z.string().optional(),
            grandparentRatingKey: z.string().optional(),
            grandparentGuid: z.string().optional(),
            grandparentKey: z.string().optional(),
            grandparentTitle: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentArt: z.string().optional(),
            grandparentTheme: z.string().optional(),
            Media: z.array(z.lazy(() => GetLibraryItemsMedia$.inboundSchema)).optional(),
            Genre: z.array(z.lazy(() => GetLibraryItemsGenre$.inboundSchema)).optional(),
            Country: z.array(z.lazy(() => GetLibraryItemsCountry$.inboundSchema)).optional(),
            Director: z.array(z.lazy(() => GetLibraryItemsDirector$.inboundSchema)).optional(),
            Writer: z.array(z.lazy(() => GetLibraryItemsWriter$.inboundSchema)).optional(),
            Role: z.array(z.lazy(() => GetLibraryItemsRole$.inboundSchema)).optional(),
            titleSort: z.string().optional(),
            viewCount: z.number().int().optional(),
            lastViewedAt: z.number().int().optional(),
            originalTitle: z.string().optional(),
            viewOffset: z.number().int().optional(),
            skipCount: z.number().int().optional(),
            index: z.number().int().optional(),
            theme: z.string().optional(),
            leafCount: z.number().int().optional(),
            viewedLeafCount: z.number().int().optional(),
            childCount: z.number().int().optional(),
            hasPremiumExtras: z.string().optional(),
            hasPremiumPrimaryExtra: z.string().optional(),
            parentRatingKey: z.string().optional(),
            parentGuid: z.string().optional(),
            parentStudio: z.string().optional(),
            parentKey: z.string().optional(),
            parentTitle: z.string().optional(),
            parentIndex: z.number().int().optional(),
            parentYear: z.number().int().optional(),
            parentThumb: z.string().optional(),
            parentTheme: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Media: "media",
                Genre: "genre",
                Country: "country",
                Director: "director",
                Writer: "writer",
                Role: "role",
            });
        });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        studio?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        contentRating?: string | undefined;
        summary?: string | undefined;
        rating?: number | undefined;
        audienceRating?: number | undefined;
        year?: number | undefined;
        tagline?: string | undefined;
        thumb?: string | undefined;
        art?: string | undefined;
        duration?: number | undefined;
        originallyAvailableAt?: string | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        audienceRatingImage?: string | undefined;
        chapterSource?: string | undefined;
        primaryExtraKey?: string | undefined;
        ratingImage?: string | undefined;
        grandparentRatingKey?: string | undefined;
        grandparentGuid?: string | undefined;
        grandparentKey?: string | undefined;
        grandparentTitle?: string | undefined;
        grandparentThumb?: string | undefined;
        grandparentArt?: string | undefined;
        grandparentTheme?: string | undefined;
        Media?: Array<GetLibraryItemsMedia$.Outbound> | undefined;
        Genre?: Array<GetLibraryItemsGenre$.Outbound> | undefined;
        Country?: Array<GetLibraryItemsCountry$.Outbound> | undefined;
        Director?: Array<GetLibraryItemsDirector$.Outbound> | undefined;
        Writer?: Array<GetLibraryItemsWriter$.Outbound> | undefined;
        Role?: Array<GetLibraryItemsRole$.Outbound> | undefined;
        titleSort?: string | undefined;
        viewCount?: number | undefined;
        lastViewedAt?: number | undefined;
        originalTitle?: string | undefined;
        viewOffset?: number | undefined;
        skipCount?: number | undefined;
        index?: number | undefined;
        theme?: string | undefined;
        leafCount?: number | undefined;
        viewedLeafCount?: number | undefined;
        childCount?: number | undefined;
        hasPremiumExtras?: string | undefined;
        hasPremiumPrimaryExtra?: string | undefined;
        parentRatingKey?: string | undefined;
        parentGuid?: string | undefined;
        parentStudio?: string | undefined;
        parentKey?: string | undefined;
        parentTitle?: string | undefined;
        parentIndex?: number | undefined;
        parentYear?: number | undefined;
        parentThumb?: string | undefined;
        parentTheme?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsMetadata> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            rating: z.number().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            chapterSource: z.string().optional(),
            primaryExtraKey: z.string().optional(),
            ratingImage: z.string().optional(),
            grandparentRatingKey: z.string().optional(),
            grandparentGuid: z.string().optional(),
            grandparentKey: z.string().optional(),
            grandparentTitle: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentArt: z.string().optional(),
            grandparentTheme: z.string().optional(),
            media: z.array(z.lazy(() => GetLibraryItemsMedia$.outboundSchema)).optional(),
            genre: z.array(z.lazy(() => GetLibraryItemsGenre$.outboundSchema)).optional(),
            country: z.array(z.lazy(() => GetLibraryItemsCountry$.outboundSchema)).optional(),
            director: z.array(z.lazy(() => GetLibraryItemsDirector$.outboundSchema)).optional(),
            writer: z.array(z.lazy(() => GetLibraryItemsWriter$.outboundSchema)).optional(),
            role: z.array(z.lazy(() => GetLibraryItemsRole$.outboundSchema)).optional(),
            titleSort: z.string().optional(),
            viewCount: z.number().int().optional(),
            lastViewedAt: z.number().int().optional(),
            originalTitle: z.string().optional(),
            viewOffset: z.number().int().optional(),
            skipCount: z.number().int().optional(),
            index: z.number().int().optional(),
            theme: z.string().optional(),
            leafCount: z.number().int().optional(),
            viewedLeafCount: z.number().int().optional(),
            childCount: z.number().int().optional(),
            hasPremiumExtras: z.string().optional(),
            hasPremiumPrimaryExtra: z.string().optional(),
            parentRatingKey: z.string().optional(),
            parentGuid: z.string().optional(),
            parentStudio: z.string().optional(),
            parentKey: z.string().optional(),
            parentTitle: z.string().optional(),
            parentIndex: z.number().int().optional(),
            parentYear: z.number().int().optional(),
            parentThumb: z.string().optional(),
            parentTheme: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                media: "Media",
                genre: "Genre",
                country: "Country",
                director: "Director",
                writer: "Writer",
                role: "Role",
            });
        });
}

/** @internal */
export namespace GetLibraryItemsMediaContainer$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            art: z.string().optional(),
            identifier: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionUUID: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            thumb: z.string().optional(),
            title1: z.string().optional(),
            title2: z.string().optional(),
            viewGroup: z.string().optional(),
            viewMode: z.number().int().optional(),
            mixedParents: z.boolean().optional(),
            Metadata: z.array(z.lazy(() => GetLibraryItemsMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        art?: string | undefined;
        identifier?: string | undefined;
        librarySectionID?: number | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionUUID?: string | undefined;
        mediaTagPrefix?: string | undefined;
        mediaTagVersion?: number | undefined;
        thumb?: string | undefined;
        title1?: string | undefined;
        title2?: string | undefined;
        viewGroup?: string | undefined;
        viewMode?: number | undefined;
        mixedParents?: boolean | undefined;
        Metadata?: Array<GetLibraryItemsMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsMediaContainer> =
        z
            .object({
                size: z.number().int().optional(),
                allowSync: z.boolean().optional(),
                art: z.string().optional(),
                identifier: z.string().optional(),
                librarySectionID: z.number().int().optional(),
                librarySectionTitle: z.string().optional(),
                librarySectionUUID: z.string().optional(),
                mediaTagPrefix: z.string().optional(),
                mediaTagVersion: z.number().int().optional(),
                thumb: z.string().optional(),
                title1: z.string().optional(),
                title2: z.string().optional(),
                viewGroup: z.string().optional(),
                viewMode: z.number().int().optional(),
                mixedParents: z.boolean().optional(),
                metadata: z.array(z.lazy(() => GetLibraryItemsMetadata$.outboundSchema)).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    metadata: "Metadata",
                });
            });
}

/** @internal */
export namespace GetLibraryItemsResponseBody$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetLibraryItemsMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetLibraryItemsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetLibraryItemsMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetLibraryItemsResponse$ {
    export const inboundSchema: z.ZodType<GetLibraryItemsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetLibraryItemsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetLibraryItemsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLibraryItemsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetLibraryItemsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
