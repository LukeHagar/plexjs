/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetResourcesStatisticsRequest = {
    /**
     * The timespan to retrieve statistics for
     *
     * @remarks
     * the exact meaning of this parameter is not known
     *
     */
    timespan?: number | undefined;
};

export type GetResourcesStatisticsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetResourcesStatisticsStatisticsResponseBodyData = {
    errors?: Array<GetResourcesStatisticsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetResourcesStatisticsStatisticsResponseBody extends Error {
    errors?: Array<GetResourcesStatisticsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetResourcesStatisticsStatisticsResponseBodyData;

    constructor(err: GetResourcesStatisticsStatisticsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetResourcesStatisticsStatisticsResponseBody";
    }
}

export type StatisticsResources = {
    timespan?: number | undefined;
    at?: number | undefined;
    hostCpuUtilization?: number | undefined;
    processCpuUtilization?: number | undefined;
    hostMemoryUtilization?: number | undefined;
    processMemoryUtilization?: number | undefined;
};

export type GetResourcesStatisticsMediaContainer = {
    size?: number | undefined;
    statisticsResources?: Array<StatisticsResources> | undefined;
};

/**
 * Resource Statistics
 */
export type GetResourcesStatisticsResponseBody = {
    mediaContainer?: GetResourcesStatisticsMediaContainer | undefined;
};

export type GetResourcesStatisticsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Resource Statistics
     */
    object?: GetResourcesStatisticsResponseBody | undefined;
};

/** @internal */
export namespace GetResourcesStatisticsRequest$ {
    export const inboundSchema: z.ZodType<GetResourcesStatisticsRequest, z.ZodTypeDef, unknown> = z
        .object({
            Timespan: z.number().int().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Timespan: "timespan",
            });
        });

    export type Outbound = {
        Timespan?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResourcesStatisticsRequest> =
        z
            .object({
                timespan: z.number().int().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    timespan: "Timespan",
                });
            });
}

/** @internal */
export namespace GetResourcesStatisticsErrors$ {
    export const inboundSchema: z.ZodType<GetResourcesStatisticsErrors, z.ZodTypeDef, unknown> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResourcesStatisticsErrors> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });
}

/** @internal */
export namespace GetResourcesStatisticsStatisticsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetResourcesStatisticsStatisticsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => GetResourcesStatisticsErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetResourcesStatisticsStatisticsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetResourcesStatisticsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetResourcesStatisticsStatisticsResponseBody
    > = z
        .instanceof(GetResourcesStatisticsStatisticsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z
                        .array(z.lazy(() => GetResourcesStatisticsErrors$.outboundSchema))
                        .optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace StatisticsResources$ {
    export const inboundSchema: z.ZodType<StatisticsResources, z.ZodTypeDef, unknown> = z.object({
        timespan: z.number().int().optional(),
        at: z.number().int().optional(),
        hostCpuUtilization: z.number().optional(),
        processCpuUtilization: z.number().optional(),
        hostMemoryUtilization: z.number().optional(),
        processMemoryUtilization: z.number().optional(),
    });

    export type Outbound = {
        timespan?: number | undefined;
        at?: number | undefined;
        hostCpuUtilization?: number | undefined;
        processCpuUtilization?: number | undefined;
        hostMemoryUtilization?: number | undefined;
        processMemoryUtilization?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StatisticsResources> = z.object({
        timespan: z.number().int().optional(),
        at: z.number().int().optional(),
        hostCpuUtilization: z.number().optional(),
        processCpuUtilization: z.number().optional(),
        hostMemoryUtilization: z.number().optional(),
        processMemoryUtilization: z.number().optional(),
    });
}

/** @internal */
export namespace GetResourcesStatisticsMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetResourcesStatisticsMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            StatisticsResources: z
                .array(z.lazy(() => StatisticsResources$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                StatisticsResources: "statisticsResources",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        StatisticsResources?: Array<StatisticsResources$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetResourcesStatisticsMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            statisticsResources: z
                .array(z.lazy(() => StatisticsResources$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                statisticsResources: "StatisticsResources",
            });
        });
}

/** @internal */
export namespace GetResourcesStatisticsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetResourcesStatisticsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            MediaContainer: z
                .lazy(() => GetResourcesStatisticsMediaContainer$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetResourcesStatisticsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetResourcesStatisticsResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetResourcesStatisticsMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetResourcesStatisticsResponse$ {
    export const inboundSchema: z.ZodType<GetResourcesStatisticsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetResourcesStatisticsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetResourcesStatisticsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResourcesStatisticsResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => GetResourcesStatisticsResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
