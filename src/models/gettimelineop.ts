/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * The state of the media item
 */
export enum State {
    Playing = "playing",
    Paused = "paused",
    Stopped = "stopped",
}

export type GetTimelineRequest = {
    /**
     * The rating key of the media item
     */
    ratingKey: number;
    /**
     * The key of the media item to get the timeline for
     */
    key: string;
    /**
     * The state of the media item
     */
    state: State;
    /**
     * Whether the media item has MDE
     */
    hasMDE: number;
    /**
     * The time of the media item
     */
    time: number;
    /**
     * The duration of the media item
     */
    duration: number;
    /**
     * The context of the media item
     */
    context: string;
    /**
     * The play queue item ID of the media item
     */
    playQueueItemID: number;
    /**
     * The playback time of the media item
     */
    playBackTime: number;
    /**
     * The row of the media item
     */
    row: number;
};

export type GetTimelineErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetTimelineResponseBodyData = {
    errors?: Array<GetTimelineErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetTimelineResponseBody extends Error {
    errors?: Array<GetTimelineErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetTimelineResponseBodyData;

    constructor(err: GetTimelineResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetTimelineResponseBody";
    }
}

export type GetTimelineResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(State);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> = State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
    /** @deprecated use `State$inboundSchema` instead. */
    export const inboundSchema = State$inboundSchema;
    /** @deprecated use `State$outboundSchema` instead. */
    export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const GetTimelineRequest$inboundSchema: z.ZodType<
    GetTimelineRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    ratingKey: z.number(),
    key: z.string(),
    state: State$inboundSchema,
    hasMDE: z.number(),
    time: z.number(),
    duration: z.number(),
    context: z.string(),
    playQueueItemID: z.number(),
    playBackTime: z.number(),
    row: z.number(),
});

/** @internal */
export type GetTimelineRequest$Outbound = {
    ratingKey: number;
    key: string;
    state: string;
    hasMDE: number;
    time: number;
    duration: number;
    context: string;
    playQueueItemID: number;
    playBackTime: number;
    row: number;
};

/** @internal */
export const GetTimelineRequest$outboundSchema: z.ZodType<
    GetTimelineRequest$Outbound,
    z.ZodTypeDef,
    GetTimelineRequest
> = z.object({
    ratingKey: z.number(),
    key: z.string(),
    state: State$outboundSchema,
    hasMDE: z.number(),
    time: z.number(),
    duration: z.number(),
    context: z.string(),
    playQueueItemID: z.number(),
    playBackTime: z.number(),
    row: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimelineRequest$ {
    /** @deprecated use `GetTimelineRequest$inboundSchema` instead. */
    export const inboundSchema = GetTimelineRequest$inboundSchema;
    /** @deprecated use `GetTimelineRequest$outboundSchema` instead. */
    export const outboundSchema = GetTimelineRequest$outboundSchema;
    /** @deprecated use `GetTimelineRequest$Outbound` instead. */
    export type Outbound = GetTimelineRequest$Outbound;
}

/** @internal */
export const GetTimelineErrors$inboundSchema: z.ZodType<GetTimelineErrors, z.ZodTypeDef, unknown> =
    z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

/** @internal */
export type GetTimelineErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetTimelineErrors$outboundSchema: z.ZodType<
    GetTimelineErrors$Outbound,
    z.ZodTypeDef,
    GetTimelineErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimelineErrors$ {
    /** @deprecated use `GetTimelineErrors$inboundSchema` instead. */
    export const inboundSchema = GetTimelineErrors$inboundSchema;
    /** @deprecated use `GetTimelineErrors$outboundSchema` instead. */
    export const outboundSchema = GetTimelineErrors$outboundSchema;
    /** @deprecated use `GetTimelineErrors$Outbound` instead. */
    export type Outbound = GetTimelineErrors$Outbound;
}

/** @internal */
export const GetTimelineResponseBody$inboundSchema: z.ZodType<
    GetTimelineResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetTimelineErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetTimelineResponseBody(remapped);
    });

/** @internal */
export type GetTimelineResponseBody$Outbound = {
    errors?: Array<GetTimelineErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetTimelineResponseBody$outboundSchema: z.ZodType<
    GetTimelineResponseBody$Outbound,
    z.ZodTypeDef,
    GetTimelineResponseBody
> = z
    .instanceof(GetTimelineResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetTimelineErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimelineResponseBody$ {
    /** @deprecated use `GetTimelineResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetTimelineResponseBody$inboundSchema;
    /** @deprecated use `GetTimelineResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetTimelineResponseBody$outboundSchema;
    /** @deprecated use `GetTimelineResponseBody$Outbound` instead. */
    export type Outbound = GetTimelineResponseBody$Outbound;
}

/** @internal */
export const GetTimelineResponse$inboundSchema: z.ZodType<
    GetTimelineResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetTimelineResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetTimelineResponse$outboundSchema: z.ZodType<
    GetTimelineResponse$Outbound,
    z.ZodTypeDef,
    GetTimelineResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimelineResponse$ {
    /** @deprecated use `GetTimelineResponse$inboundSchema` instead. */
    export const inboundSchema = GetTimelineResponse$inboundSchema;
    /** @deprecated use `GetTimelineResponse$outboundSchema` instead. */
    export const outboundSchema = GetTimelineResponse$outboundSchema;
    /** @deprecated use `GetTimelineResponse$Outbound` instead. */
    export type Outbound = GetTimelineResponse$Outbound;
}
