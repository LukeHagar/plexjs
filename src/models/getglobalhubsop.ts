/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

/**
 * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
 */
export enum OnlyTransient {
    Zero = 0,
    One = 1,
}

export type GetGlobalHubsRequest = {
    /**
     * The number of items to return with each hub.
     */
    count?: number | undefined;
    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    onlyTransient?: OnlyTransient | undefined;
};

export type GetGlobalHubsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetGlobalHubsHubsResponseBodyData = {
    errors?: Array<GetGlobalHubsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetGlobalHubsHubsResponseBody extends Error {
    errors?: Array<GetGlobalHubsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetGlobalHubsHubsResponseBodyData;

    constructor(err: GetGlobalHubsHubsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetGlobalHubsHubsResponseBody";
    }
}

export type GetGlobalHubsMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    titleSort?: string | undefined;
    summary?: string | undefined;
    smart?: boolean | undefined;
    playlistType?: string | undefined;
    composite?: string | undefined;
    icon?: string | undefined;
    viewCount?: number | undefined;
    lastViewedAt?: number | undefined;
    duration?: number | undefined;
    leafCount?: number | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
};

export type Hub = {
    hubKey?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    hubIdentifier?: string | undefined;
    context?: string | undefined;
    size?: number | undefined;
    more?: boolean | undefined;
    style?: string | undefined;
    promoted?: boolean | undefined;
    metadata?: Array<GetGlobalHubsMetadata> | undefined;
};

export type GetGlobalHubsMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    identifier?: string | undefined;
    hub?: Array<Hub> | undefined;
};

/**
 * returns global hubs
 */
export type GetGlobalHubsResponseBody = {
    mediaContainer?: GetGlobalHubsMediaContainer | undefined;
};

export type GetGlobalHubsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * returns global hubs
     */
    object?: GetGlobalHubsResponseBody | undefined;
};

/** @internal */
export namespace OnlyTransient$ {
    export const inboundSchema = z.nativeEnum(OnlyTransient);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetGlobalHubsRequest$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsRequest, z.ZodTypeDef, unknown> = z.object({
        count: z.number().optional(),
        onlyTransient: OnlyTransient$.inboundSchema.optional(),
    });

    export type Outbound = {
        count?: number | undefined;
        onlyTransient?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsRequest> = z.object(
        {
            count: z.number().optional(),
            onlyTransient: OnlyTransient$.outboundSchema.optional(),
        }
    );
}

/** @internal */
export namespace GetGlobalHubsErrors$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetGlobalHubsHubsResponseBody$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsHubsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.array(z.lazy(() => GetGlobalHubsErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetGlobalHubsHubsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetGlobalHubsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsHubsResponseBody> =
        z
            .instanceof(GetGlobalHubsHubsResponseBody)
            .transform((v) => v.data$)
            .pipe(
                z
                    .object({
                        errors: z
                            .array(z.lazy(() => GetGlobalHubsErrors$.outboundSchema))
                            .optional(),
                        rawResponse: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                    })
                    .transform((v) => {
                        return remap$(v, {
                            rawResponse: "RawResponse",
                        });
                    })
            );
}

/** @internal */
export namespace GetGlobalHubsMetadata$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsMetadata, z.ZodTypeDef, unknown> = z.object({
        ratingKey: z.string().optional(),
        key: z.string().optional(),
        guid: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        titleSort: z.string().optional(),
        summary: z.string().optional(),
        smart: z.boolean().optional(),
        playlistType: z.string().optional(),
        composite: z.string().optional(),
        icon: z.string().optional(),
        viewCount: z.number().int().optional(),
        lastViewedAt: z.number().int().optional(),
        duration: z.number().int().optional(),
        leafCount: z.number().int().optional(),
        addedAt: z.number().int().optional(),
        updatedAt: z.number().int().optional(),
    });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        titleSort?: string | undefined;
        summary?: string | undefined;
        smart?: boolean | undefined;
        playlistType?: string | undefined;
        composite?: string | undefined;
        icon?: string | undefined;
        viewCount?: number | undefined;
        lastViewedAt?: number | undefined;
        duration?: number | undefined;
        leafCount?: number | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsMetadata> =
        z.object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            titleSort: z.string().optional(),
            summary: z.string().optional(),
            smart: z.boolean().optional(),
            playlistType: z.string().optional(),
            composite: z.string().optional(),
            icon: z.string().optional(),
            viewCount: z.number().int().optional(),
            lastViewedAt: z.number().int().optional(),
            duration: z.number().int().optional(),
            leafCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
        });
}

/** @internal */
export namespace Hub$ {
    export const inboundSchema: z.ZodType<Hub, z.ZodTypeDef, unknown> = z
        .object({
            hubKey: z.string().optional(),
            key: z.string().optional(),
            title: z.string().optional(),
            type: z.string().optional(),
            hubIdentifier: z.string().optional(),
            context: z.string().optional(),
            size: z.number().int().optional(),
            more: z.boolean().optional(),
            style: z.string().optional(),
            promoted: z.boolean().optional(),
            Metadata: z.array(z.lazy(() => GetGlobalHubsMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        hubKey?: string | undefined;
        key?: string | undefined;
        title?: string | undefined;
        type?: string | undefined;
        hubIdentifier?: string | undefined;
        context?: string | undefined;
        size?: number | undefined;
        more?: boolean | undefined;
        style?: string | undefined;
        promoted?: boolean | undefined;
        Metadata?: Array<GetGlobalHubsMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Hub> = z
        .object({
            hubKey: z.string().optional(),
            key: z.string().optional(),
            title: z.string().optional(),
            type: z.string().optional(),
            hubIdentifier: z.string().optional(),
            context: z.string().optional(),
            size: z.number().int().optional(),
            more: z.boolean().optional(),
            style: z.string().optional(),
            promoted: z.boolean().optional(),
            metadata: z.array(z.lazy(() => GetGlobalHubsMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace GetGlobalHubsMediaContainer$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            Hub: z.array(z.lazy(() => Hub$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Hub: "hub",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        identifier?: string | undefined;
        Hub?: Array<Hub$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            hub: z.array(z.lazy(() => Hub$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                hub: "Hub",
            });
        });
}

/** @internal */
export namespace GetGlobalHubsResponseBody$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetGlobalHubsMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetGlobalHubsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetGlobalHubsMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetGlobalHubsResponse$ {
    export const inboundSchema: z.ZodType<GetGlobalHubsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetGlobalHubsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetGlobalHubsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobalHubsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetGlobalHubsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
