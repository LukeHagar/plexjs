/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against.
 */
export enum MinSize {
    Zero = 0,
    One = 1,
}

/**
 * allow images to be resized beyond native dimensions.
 */
export enum Upscale {
    Zero = 0,
    One = 1,
}

export type GetResizedPhotoRequest = {
    /**
     * The width for the resized photo
     */
    width: number;
    /**
     * The height for the resized photo
     */
    height: number;
    /**
     * The opacity for the resized photo
     */
    opacity?: number | undefined;
    /**
     * The width for the resized photo
     */
    blur: number;
    /**
     * images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against.
     */
    minSize: MinSize;
    /**
     * allow images to be resized beyond native dimensions.
     */
    upscale: Upscale;
    /**
     * path to image within Plex
     */
    url: string;
};

export type GetResizedPhotoErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetResizedPhotoResponseBodyData = {
    errors?: Array<GetResizedPhotoErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetResizedPhotoResponseBody extends Error {
    errors?: Array<GetResizedPhotoErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetResizedPhotoResponseBodyData;

    constructor(err: GetResizedPhotoResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetResizedPhotoResponseBody";
    }
}

export type GetResizedPhotoResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace MinSize$ {
    export const inboundSchema: z.ZodNativeEnum<typeof MinSize> = z.nativeEnum(MinSize);
    export const outboundSchema: z.ZodNativeEnum<typeof MinSize> = inboundSchema;
}

/** @internal */
export namespace Upscale$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Upscale> = z.nativeEnum(Upscale);
    export const outboundSchema: z.ZodNativeEnum<typeof Upscale> = inboundSchema;
}

/** @internal */
export namespace GetResizedPhotoRequest$ {
    export const inboundSchema: z.ZodType<GetResizedPhotoRequest, z.ZodTypeDef, unknown> = z.object(
        {
            width: z.number(),
            height: z.number(),
            opacity: z.number().int().default(100),
            blur: z.number(),
            minSize: MinSize$.inboundSchema,
            upscale: Upscale$.inboundSchema,
            url: z.string(),
        }
    );

    export type Outbound = {
        width: number;
        height: number;
        opacity: number;
        blur: number;
        minSize: number;
        upscale: number;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResizedPhotoRequest> =
        z.object({
            width: z.number(),
            height: z.number(),
            opacity: z.number().int().default(100),
            blur: z.number(),
            minSize: MinSize$.outboundSchema,
            upscale: Upscale$.outboundSchema,
            url: z.string(),
        });
}

/** @internal */
export namespace GetResizedPhotoErrors$ {
    export const inboundSchema: z.ZodType<GetResizedPhotoErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResizedPhotoErrors> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });
}

/** @internal */
export namespace GetResizedPhotoResponseBody$ {
    export const inboundSchema: z.ZodType<GetResizedPhotoResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.array(z.lazy(() => GetResizedPhotoErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetResizedPhotoResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetResizedPhotoErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResizedPhotoResponseBody> = z
        .instanceof(GetResizedPhotoResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => GetResizedPhotoErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetResizedPhotoResponse$ {
    export const inboundSchema: z.ZodType<GetResizedPhotoResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResizedPhotoResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
