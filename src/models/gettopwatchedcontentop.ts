/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { RFCDate } from "../types/rfcdate.js";
import * as z from "zod";

export type GetTopWatchedContentRequest = {
    /**
     * the library type (1 - movies, 2 - shows, 3 - music)
     */
    type: number;
    /**
     * Adds the Guids object to the response
     *
     * @remarks
     *
     */
    includeGuids?: number | undefined;
};

export type GetTopWatchedContentGenre = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

export type GetTopWatchedContentCountry = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
};

export type GetTopWatchedContentGuids = {
    id?: string | undefined;
};

export type GetTopWatchedContentRole = {
    id?: number | undefined;
    filter?: string | undefined;
    tag?: string | undefined;
    tagKey?: string | undefined;
    role?: string | undefined;
    thumb?: string | undefined;
};

export type User = {
    id?: number | undefined;
};

export type GetTopWatchedContentMetadata = {
    ratingKey?: string | undefined;
    key?: string | undefined;
    guid?: string | undefined;
    slug?: string | undefined;
    studio?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    librarySectionTitle?: string | undefined;
    librarySectionID?: number | undefined;
    librarySectionKey?: string | undefined;
    contentRating?: string | undefined;
    summary?: string | undefined;
    index?: number | undefined;
    audienceRating?: number | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    thumb?: string | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    originallyAvailableAt?: RFCDate | undefined;
    leafCount?: number | undefined;
    viewedLeafCount?: number | undefined;
    childCount?: number | undefined;
    addedAt?: number | undefined;
    updatedAt?: number | undefined;
    globalViewCount?: number | undefined;
    audienceRatingImage?: string | undefined;
    genre?: Array<GetTopWatchedContentGenre> | undefined;
    country?: Array<GetTopWatchedContentCountry> | undefined;
    guids?: Array<GetTopWatchedContentGuids> | undefined;
    role?: Array<GetTopWatchedContentRole> | undefined;
    user?: Array<User> | undefined;
};

export type GetTopWatchedContentMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    identifier?: string | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    metadata?: Array<GetTopWatchedContentMetadata> | undefined;
};

/**
 * The metadata of the library item.
 */
export type GetTopWatchedContentResponseBody = {
    mediaContainer?: GetTopWatchedContentMediaContainer | undefined;
};

export type GetTopWatchedContentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The metadata of the library item.
     */
    object?: GetTopWatchedContentResponseBody | undefined;
};

/** @internal */
export namespace GetTopWatchedContentRequest$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentRequest, z.ZodTypeDef, unknown> =
        z.object({
            type: z.number().int(),
            includeGuids: z.number().int().optional(),
        });

    export type Outbound = {
        type: number;
        includeGuids?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentRequest> =
        z.object({
            type: z.number().int(),
            includeGuids: z.number().int().optional(),
        });
}

/** @internal */
export namespace GetTopWatchedContentGenre$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentGenre, z.ZodTypeDef, unknown> =
        z.object({
            id: z.number().int().optional(),
            filter: z.string().optional(),
            tag: z.string().optional(),
        });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentGenre> =
        z.object({
            id: z.number().int().optional(),
            filter: z.string().optional(),
            tag: z.string().optional(),
        });
}

/** @internal */
export namespace GetTopWatchedContentCountry$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentCountry, z.ZodTypeDef, unknown> =
        z.object({
            id: z.number().int().optional(),
            filter: z.string().optional(),
            tag: z.string().optional(),
        });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentCountry> =
        z.object({
            id: z.number().int().optional(),
            filter: z.string().optional(),
            tag: z.string().optional(),
        });
}

/** @internal */
export namespace GetTopWatchedContentGuids$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentGuids, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string().optional(),
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentGuids> =
        z.object({
            id: z.string().optional(),
        });
}

/** @internal */
export namespace GetTopWatchedContentRole$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentRole, z.ZodTypeDef, unknown> =
        z.object({
            id: z.number().int().optional(),
            filter: z.string().optional(),
            tag: z.string().optional(),
            tagKey: z.string().optional(),
            role: z.string().optional(),
            thumb: z.string().optional(),
        });

    export type Outbound = {
        id?: number | undefined;
        filter?: string | undefined;
        tag?: string | undefined;
        tagKey?: string | undefined;
        role?: string | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentRole> =
        z.object({
            id: z.number().int().optional(),
            filter: z.string().optional(),
            tag: z.string().optional(),
            tagKey: z.string().optional(),
            role: z.string().optional(),
            thumb: z.string().optional(),
        });
}

/** @internal */
export namespace User$ {
    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z.object({
        id: z.number().int().optional(),
    });
}

/** @internal */
export namespace GetTopWatchedContentMetadata$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentMetadata, z.ZodTypeDef, unknown> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            slug: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionKey: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            index: z.number().int().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            leafCount: z.number().int().optional(),
            viewedLeafCount: z.number().int().optional(),
            childCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            globalViewCount: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            Genre: z.array(z.lazy(() => GetTopWatchedContentGenre$.inboundSchema)).optional(),
            Country: z.array(z.lazy(() => GetTopWatchedContentCountry$.inboundSchema)).optional(),
            guids: z.array(z.lazy(() => GetTopWatchedContentGuids$.inboundSchema)).optional(),
            Role: z.array(z.lazy(() => GetTopWatchedContentRole$.inboundSchema)).optional(),
            User: z.array(z.lazy(() => User$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Genre: "genre",
                Country: "country",
                Role: "role",
                User: "user",
            });
        });

    export type Outbound = {
        ratingKey?: string | undefined;
        key?: string | undefined;
        guid?: string | undefined;
        slug?: string | undefined;
        studio?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        librarySectionTitle?: string | undefined;
        librarySectionID?: number | undefined;
        librarySectionKey?: string | undefined;
        contentRating?: string | undefined;
        summary?: string | undefined;
        index?: number | undefined;
        audienceRating?: number | undefined;
        year?: number | undefined;
        tagline?: string | undefined;
        thumb?: string | undefined;
        art?: string | undefined;
        duration?: number | undefined;
        originallyAvailableAt?: string | undefined;
        leafCount?: number | undefined;
        viewedLeafCount?: number | undefined;
        childCount?: number | undefined;
        addedAt?: number | undefined;
        updatedAt?: number | undefined;
        globalViewCount?: number | undefined;
        audienceRatingImage?: string | undefined;
        Genre?: Array<GetTopWatchedContentGenre$.Outbound> | undefined;
        Country?: Array<GetTopWatchedContentCountry$.Outbound> | undefined;
        guids?: Array<GetTopWatchedContentGuids$.Outbound> | undefined;
        Role?: Array<GetTopWatchedContentRole$.Outbound> | undefined;
        User?: Array<User$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentMetadata> = z
        .object({
            ratingKey: z.string().optional(),
            key: z.string().optional(),
            guid: z.string().optional(),
            slug: z.string().optional(),
            studio: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            librarySectionID: z.number().int().optional(),
            librarySectionKey: z.string().optional(),
            contentRating: z.string().optional(),
            summary: z.string().optional(),
            index: z.number().int().optional(),
            audienceRating: z.number().optional(),
            year: z.number().int().optional(),
            tagline: z.string().optional(),
            thumb: z.string().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            originallyAvailableAt: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            leafCount: z.number().int().optional(),
            viewedLeafCount: z.number().int().optional(),
            childCount: z.number().int().optional(),
            addedAt: z.number().int().optional(),
            updatedAt: z.number().int().optional(),
            globalViewCount: z.number().int().optional(),
            audienceRatingImage: z.string().optional(),
            genre: z.array(z.lazy(() => GetTopWatchedContentGenre$.outboundSchema)).optional(),
            country: z.array(z.lazy(() => GetTopWatchedContentCountry$.outboundSchema)).optional(),
            guids: z.array(z.lazy(() => GetTopWatchedContentGuids$.outboundSchema)).optional(),
            role: z.array(z.lazy(() => GetTopWatchedContentRole$.outboundSchema)).optional(),
            user: z.array(z.lazy(() => User$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                genre: "Genre",
                country: "Country",
                role: "Role",
                user: "User",
            });
        });
}

/** @internal */
export namespace GetTopWatchedContentMediaContainer$ {
    export const inboundSchema: z.ZodType<
        GetTopWatchedContentMediaContainer,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            Metadata: z.array(z.lazy(() => GetTopWatchedContentMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        allowSync?: boolean | undefined;
        identifier?: string | undefined;
        mediaTagPrefix?: string | undefined;
        mediaTagVersion?: number | undefined;
        Metadata?: Array<GetTopWatchedContentMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTopWatchedContentMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            allowSync: z.boolean().optional(),
            identifier: z.string().optional(),
            mediaTagPrefix: z.string().optional(),
            mediaTagVersion: z.number().int().optional(),
            metadata: z
                .array(z.lazy(() => GetTopWatchedContentMetadata$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace GetTopWatchedContentResponseBody$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                MediaContainer: z
                    .lazy(() => GetTopWatchedContentMediaContainer$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    MediaContainer: "mediaContainer",
                });
            });

    export type Outbound = {
        MediaContainer?: GetTopWatchedContentMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTopWatchedContentResponseBody
    > = z
        .object({
            mediaContainer: z
                .lazy(() => GetTopWatchedContentMediaContainer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetTopWatchedContentResponse$ {
    export const inboundSchema: z.ZodType<GetTopWatchedContentResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetTopWatchedContentResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetTopWatchedContentResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTopWatchedContentResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetTopWatchedContentResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
