/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type MarkPlayedRequest = {
    /**
     * The media key to mark as played
     */
    key: number;
};

export type MarkPlayedErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type MarkPlayedResponseBodyData = {
    errors?: Array<MarkPlayedErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class MarkPlayedResponseBody extends Error {
    errors?: Array<MarkPlayedErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: MarkPlayedResponseBodyData;

    constructor(err: MarkPlayedResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "MarkPlayedResponseBody";
    }
}

export type MarkPlayedResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const MarkPlayedRequest$inboundSchema: z.ZodType<MarkPlayedRequest, z.ZodTypeDef, unknown> =
    z.object({
        key: z.number(),
    });

/** @internal */
export type MarkPlayedRequest$Outbound = {
    key: number;
};

/** @internal */
export const MarkPlayedRequest$outboundSchema: z.ZodType<
    MarkPlayedRequest$Outbound,
    z.ZodTypeDef,
    MarkPlayedRequest
> = z.object({
    key: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkPlayedRequest$ {
    /** @deprecated use `MarkPlayedRequest$inboundSchema` instead. */
    export const inboundSchema = MarkPlayedRequest$inboundSchema;
    /** @deprecated use `MarkPlayedRequest$outboundSchema` instead. */
    export const outboundSchema = MarkPlayedRequest$outboundSchema;
    /** @deprecated use `MarkPlayedRequest$Outbound` instead. */
    export type Outbound = MarkPlayedRequest$Outbound;
}

/** @internal */
export const MarkPlayedErrors$inboundSchema: z.ZodType<MarkPlayedErrors, z.ZodTypeDef, unknown> =
    z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

/** @internal */
export type MarkPlayedErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const MarkPlayedErrors$outboundSchema: z.ZodType<
    MarkPlayedErrors$Outbound,
    z.ZodTypeDef,
    MarkPlayedErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkPlayedErrors$ {
    /** @deprecated use `MarkPlayedErrors$inboundSchema` instead. */
    export const inboundSchema = MarkPlayedErrors$inboundSchema;
    /** @deprecated use `MarkPlayedErrors$outboundSchema` instead. */
    export const outboundSchema = MarkPlayedErrors$outboundSchema;
    /** @deprecated use `MarkPlayedErrors$Outbound` instead. */
    export type Outbound = MarkPlayedErrors$Outbound;
}

/** @internal */
export const MarkPlayedResponseBody$inboundSchema: z.ZodType<
    MarkPlayedResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => MarkPlayedErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new MarkPlayedResponseBody(remapped);
    });

/** @internal */
export type MarkPlayedResponseBody$Outbound = {
    errors?: Array<MarkPlayedErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const MarkPlayedResponseBody$outboundSchema: z.ZodType<
    MarkPlayedResponseBody$Outbound,
    z.ZodTypeDef,
    MarkPlayedResponseBody
> = z
    .instanceof(MarkPlayedResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => MarkPlayedErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkPlayedResponseBody$ {
    /** @deprecated use `MarkPlayedResponseBody$inboundSchema` instead. */
    export const inboundSchema = MarkPlayedResponseBody$inboundSchema;
    /** @deprecated use `MarkPlayedResponseBody$outboundSchema` instead. */
    export const outboundSchema = MarkPlayedResponseBody$outboundSchema;
    /** @deprecated use `MarkPlayedResponseBody$Outbound` instead. */
    export type Outbound = MarkPlayedResponseBody$Outbound;
}

/** @internal */
export const MarkPlayedResponse$inboundSchema: z.ZodType<
    MarkPlayedResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type MarkPlayedResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const MarkPlayedResponse$outboundSchema: z.ZodType<
    MarkPlayedResponse$Outbound,
    z.ZodTypeDef,
    MarkPlayedResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkPlayedResponse$ {
    /** @deprecated use `MarkPlayedResponse$inboundSchema` instead. */
    export const inboundSchema = MarkPlayedResponse$inboundSchema;
    /** @deprecated use `MarkPlayedResponse$outboundSchema` instead. */
    export const outboundSchema = MarkPlayedResponse$outboundSchema;
    /** @deprecated use `MarkPlayedResponse$Outbound` instead. */
    export type Outbound = MarkPlayedResponse$Outbound;
}
