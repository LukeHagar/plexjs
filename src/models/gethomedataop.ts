/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

export type GetHomeDataErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetHomeDataPlexResponseBodyData = {
    errors?: Array<GetHomeDataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetHomeDataPlexResponseBody extends Error {
    errors?: Array<GetHomeDataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetHomeDataPlexResponseBodyData;

    constructor(err: GetHomeDataPlexResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetHomeDataPlexResponseBody";
    }
}

/**
 * Home Data
 */
export type GetHomeDataResponseBody = {
    id?: number | undefined;
    name?: string | undefined;
    guestUserID?: number | undefined;
    guestUserUUID?: string | undefined;
    guestEnabled?: boolean | undefined;
    subscription?: boolean | undefined;
};

export type GetHomeDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Home Data
     */
    object?: GetHomeDataResponseBody | undefined;
};

/** @internal */
export namespace GetHomeDataErrors$ {
    export const inboundSchema: z.ZodType<GetHomeDataErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHomeDataErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetHomeDataPlexResponseBody$ {
    export const inboundSchema: z.ZodType<GetHomeDataPlexResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.array(z.lazy(() => GetHomeDataErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetHomeDataPlexResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetHomeDataErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHomeDataPlexResponseBody> = z
        .instanceof(GetHomeDataPlexResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => GetHomeDataErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetHomeDataResponseBody$ {
    export const inboundSchema: z.ZodType<GetHomeDataResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            id: z.number().optional(),
            name: z.string().optional(),
            guestUserID: z.number().optional(),
            guestUserUUID: z.string().optional(),
            guestEnabled: z.boolean().optional(),
            subscription: z.boolean().optional(),
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        guestUserID?: number | undefined;
        guestUserUUID?: string | undefined;
        guestEnabled?: boolean | undefined;
        subscription?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHomeDataResponseBody> =
        z.object({
            id: z.number().optional(),
            name: z.string().optional(),
            guestUserID: z.number().optional(),
            guestUserUUID: z.string().optional(),
            guestEnabled: z.boolean().optional(),
            subscription: z.boolean().optional(),
        });
}

/** @internal */
export namespace GetHomeDataResponse$ {
    export const inboundSchema: z.ZodType<GetHomeDataResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetHomeDataResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetHomeDataResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHomeDataResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetHomeDataResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
