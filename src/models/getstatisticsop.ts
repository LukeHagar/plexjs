/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetStatisticsRequest = {
    /**
     * The timespan to retrieve statistics for
     *
     * @remarks
     * the exact meaning of this parameter is not known
     *
     */
    timespan?: number | undefined;
};

export type GetStatisticsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetStatisticsStatisticsResponseBodyData = {
    errors?: Array<GetStatisticsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetStatisticsStatisticsResponseBody extends Error {
    errors?: Array<GetStatisticsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetStatisticsStatisticsResponseBodyData;

    constructor(err: GetStatisticsStatisticsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetStatisticsStatisticsResponseBody";
    }
}

export type GetStatisticsDevice = {
    id?: number | undefined;
    name?: string | undefined;
    platform?: string | undefined;
    clientIdentifier?: string | undefined;
    createdAt?: number | undefined;
};

export type Account = {
    id?: number | undefined;
    key?: string | undefined;
    name?: string | undefined;
    defaultAudioLanguage?: string | undefined;
    autoSelectAudio?: boolean | undefined;
    defaultSubtitleLanguage?: string | undefined;
    subtitleMode?: number | undefined;
    thumb?: string | undefined;
};

export type StatisticsMedia = {
    accountID?: number | undefined;
    deviceID?: number | undefined;
    timespan?: number | undefined;
    at?: number | undefined;
    metadataType?: number | undefined;
    count?: number | undefined;
    duration?: number | undefined;
};

export type GetStatisticsMediaContainer = {
    size?: number | undefined;
    device?: Array<GetStatisticsDevice> | undefined;
    account?: Array<Account> | undefined;
    statisticsMedia?: Array<StatisticsMedia> | undefined;
};

/**
 * Media Statistics
 */
export type GetStatisticsResponseBody = {
    mediaContainer?: GetStatisticsMediaContainer | undefined;
};

export type GetStatisticsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Media Statistics
     */
    object?: GetStatisticsResponseBody | undefined;
};

/** @internal */
export namespace GetStatisticsRequest$ {
    export const inboundSchema: z.ZodType<GetStatisticsRequest, z.ZodTypeDef, unknown> = z
        .object({
            Timespan: z.number().int().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Timespan: "timespan",
            });
        });

    export type Outbound = {
        Timespan?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsRequest> = z
        .object({
            timespan: z.number().int().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                timespan: "Timespan",
            });
        });
}

/** @internal */
export namespace GetStatisticsErrors$ {
    export const inboundSchema: z.ZodType<GetStatisticsErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetStatisticsStatisticsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetStatisticsStatisticsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => GetStatisticsErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetStatisticsStatisticsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetStatisticsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetStatisticsStatisticsResponseBody
    > = z
        .instanceof(GetStatisticsStatisticsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => GetStatisticsErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetStatisticsDevice$ {
    export const inboundSchema: z.ZodType<GetStatisticsDevice, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        name: z.string().optional(),
        platform: z.string().optional(),
        clientIdentifier: z.string().optional(),
        createdAt: z.number().int().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        platform?: string | undefined;
        clientIdentifier?: string | undefined;
        createdAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsDevice> = z.object({
        id: z.number().int().optional(),
        name: z.string().optional(),
        platform: z.string().optional(),
        clientIdentifier: z.string().optional(),
        createdAt: z.number().int().optional(),
    });
}

/** @internal */
export namespace Account$ {
    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int().optional(),
        key: z.string().optional(),
        name: z.string().optional(),
        defaultAudioLanguage: z.string().optional(),
        autoSelectAudio: z.boolean().optional(),
        defaultSubtitleLanguage: z.string().optional(),
        subtitleMode: z.number().int().optional(),
        thumb: z.string().optional(),
    });

    export type Outbound = {
        id?: number | undefined;
        key?: string | undefined;
        name?: string | undefined;
        defaultAudioLanguage?: string | undefined;
        autoSelectAudio?: boolean | undefined;
        defaultSubtitleLanguage?: string | undefined;
        subtitleMode?: number | undefined;
        thumb?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z.object({
        id: z.number().int().optional(),
        key: z.string().optional(),
        name: z.string().optional(),
        defaultAudioLanguage: z.string().optional(),
        autoSelectAudio: z.boolean().optional(),
        defaultSubtitleLanguage: z.string().optional(),
        subtitleMode: z.number().int().optional(),
        thumb: z.string().optional(),
    });
}

/** @internal */
export namespace StatisticsMedia$ {
    export const inboundSchema: z.ZodType<StatisticsMedia, z.ZodTypeDef, unknown> = z.object({
        accountID: z.number().int().optional(),
        deviceID: z.number().int().optional(),
        timespan: z.number().int().optional(),
        at: z.number().int().optional(),
        metadataType: z.number().int().optional(),
        count: z.number().int().optional(),
        duration: z.number().int().optional(),
    });

    export type Outbound = {
        accountID?: number | undefined;
        deviceID?: number | undefined;
        timespan?: number | undefined;
        at?: number | undefined;
        metadataType?: number | undefined;
        count?: number | undefined;
        duration?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StatisticsMedia> = z.object({
        accountID: z.number().int().optional(),
        deviceID: z.number().int().optional(),
        timespan: z.number().int().optional(),
        at: z.number().int().optional(),
        metadataType: z.number().int().optional(),
        count: z.number().int().optional(),
        duration: z.number().int().optional(),
    });
}

/** @internal */
export namespace GetStatisticsMediaContainer$ {
    export const inboundSchema: z.ZodType<GetStatisticsMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            Device: z.array(z.lazy(() => GetStatisticsDevice$.inboundSchema)).optional(),
            Account: z.array(z.lazy(() => Account$.inboundSchema)).optional(),
            StatisticsMedia: z.array(z.lazy(() => StatisticsMedia$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Device: "device",
                Account: "account",
                StatisticsMedia: "statisticsMedia",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Device?: Array<GetStatisticsDevice$.Outbound> | undefined;
        Account?: Array<Account$.Outbound> | undefined;
        StatisticsMedia?: Array<StatisticsMedia$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            device: z.array(z.lazy(() => GetStatisticsDevice$.outboundSchema)).optional(),
            account: z.array(z.lazy(() => Account$.outboundSchema)).optional(),
            statisticsMedia: z.array(z.lazy(() => StatisticsMedia$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                device: "Device",
                account: "Account",
                statisticsMedia: "StatisticsMedia",
            });
        });
}

/** @internal */
export namespace GetStatisticsResponseBody$ {
    export const inboundSchema: z.ZodType<GetStatisticsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetStatisticsMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetStatisticsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetStatisticsMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetStatisticsResponse$ {
    export const inboundSchema: z.ZodType<GetStatisticsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetStatisticsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetStatisticsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatisticsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetStatisticsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
