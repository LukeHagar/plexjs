/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export const GetResourcesOpServerList = ["https://plex.tv/api/v2"] as const;

export type GetResourcesGlobals = {
    /**
     * The unique identifier for the client application
     *
     * @remarks
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier?: string | undefined;
};

/**
 * Include Https entries in the results
 */
export enum IncludeHttps {
    Zero = 0,
    One = 1,
}

/**
 * Include Relay addresses in the results
 */
export enum IncludeRelay {
    Zero = 0,
    One = 1,
}

/**
 * Include IPv6 entries in the results
 */
export enum IncludeIPv6 {
    Zero = 0,
    One = 1,
}

export type GetResourcesRequest = {
    /**
     * The unique identifier for the client application
     *
     * @remarks
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier?: string | undefined;
    /**
     * Include Https entries in the results
     */
    includeHttps?: IncludeHttps | undefined;
    /**
     * Include Relay addresses in the results
     */
    includeRelay?: IncludeRelay | undefined;
    /**
     * Include IPv6 entries in the results
     */
    includeIPv6?: IncludeIPv6 | undefined;
};

export type GetResourcesErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetResourcesResponseBodyData = {
    errors?: Array<GetResourcesErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetResourcesResponseBody extends Error {
    errors?: Array<GetResourcesErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetResourcesResponseBodyData;

    constructor(err: GetResourcesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetResourcesResponseBody";
    }
}

export type Connections = {
    protocol?: string | undefined;
    address?: string | undefined;
    port?: number | undefined;
    uri?: string | undefined;
    local?: boolean | undefined;
    relay?: boolean | undefined;
    iPv6?: boolean | undefined;
};

export type PlexDevice = {
    name: string;
    product: string;
    productVersion: string;
    platform: string;
    platformVersion: string;
    device: string;
    clientIdentifier: string;
    createdAt: Date;
    lastSeenAt: Date;
    provides: string;
    ownerId?: string | undefined;
    sourceTitle?: string | undefined;
    publicAddress?: string | undefined;
    accessToken?: string | undefined;
    owned?: boolean | undefined;
    home?: boolean | undefined;
    synced?: boolean | undefined;
    relay?: boolean | undefined;
    presence?: boolean | undefined;
    httpsRequired?: boolean | undefined;
    publicAddressMatches?: boolean | undefined;
    dnsRebindingProtection?: boolean | undefined;
    natLoopbackSupported?: boolean | undefined;
    connections?: Array<Connections> | undefined;
};

export type GetResourcesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of Plex Devices. This includes Plex hosted servers and clients
     */
    plexDevices?: Array<PlexDevice> | undefined;
};

/** @internal */
export const GetResourcesGlobals$inboundSchema: z.ZodType<
    GetResourcesGlobals,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "X-Plex-Client-Identifier": z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Plex-Client-Identifier": "xPlexClientIdentifier",
        });
    });

/** @internal */
export type GetResourcesGlobals$Outbound = {
    "X-Plex-Client-Identifier"?: string | undefined;
};

/** @internal */
export const GetResourcesGlobals$outboundSchema: z.ZodType<
    GetResourcesGlobals$Outbound,
    z.ZodTypeDef,
    GetResourcesGlobals
> = z
    .object({
        xPlexClientIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xPlexClientIdentifier: "X-Plex-Client-Identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesGlobals$ {
    /** @deprecated use `GetResourcesGlobals$inboundSchema` instead. */
    export const inboundSchema = GetResourcesGlobals$inboundSchema;
    /** @deprecated use `GetResourcesGlobals$outboundSchema` instead. */
    export const outboundSchema = GetResourcesGlobals$outboundSchema;
    /** @deprecated use `GetResourcesGlobals$Outbound` instead. */
    export type Outbound = GetResourcesGlobals$Outbound;
}

/** @internal */
export const IncludeHttps$inboundSchema: z.ZodNativeEnum<typeof IncludeHttps> =
    z.nativeEnum(IncludeHttps);

/** @internal */
export const IncludeHttps$outboundSchema: z.ZodNativeEnum<typeof IncludeHttps> =
    IncludeHttps$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeHttps$ {
    /** @deprecated use `IncludeHttps$inboundSchema` instead. */
    export const inboundSchema = IncludeHttps$inboundSchema;
    /** @deprecated use `IncludeHttps$outboundSchema` instead. */
    export const outboundSchema = IncludeHttps$outboundSchema;
}

/** @internal */
export const IncludeRelay$inboundSchema: z.ZodNativeEnum<typeof IncludeRelay> =
    z.nativeEnum(IncludeRelay);

/** @internal */
export const IncludeRelay$outboundSchema: z.ZodNativeEnum<typeof IncludeRelay> =
    IncludeRelay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeRelay$ {
    /** @deprecated use `IncludeRelay$inboundSchema` instead. */
    export const inboundSchema = IncludeRelay$inboundSchema;
    /** @deprecated use `IncludeRelay$outboundSchema` instead. */
    export const outboundSchema = IncludeRelay$outboundSchema;
}

/** @internal */
export const IncludeIPv6$inboundSchema: z.ZodNativeEnum<typeof IncludeIPv6> =
    z.nativeEnum(IncludeIPv6);

/** @internal */
export const IncludeIPv6$outboundSchema: z.ZodNativeEnum<typeof IncludeIPv6> =
    IncludeIPv6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeIPv6$ {
    /** @deprecated use `IncludeIPv6$inboundSchema` instead. */
    export const inboundSchema = IncludeIPv6$inboundSchema;
    /** @deprecated use `IncludeIPv6$outboundSchema` instead. */
    export const outboundSchema = IncludeIPv6$outboundSchema;
}

/** @internal */
export const GetResourcesRequest$inboundSchema: z.ZodType<
    GetResourcesRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "X-Plex-Client-Identifier": z.string().optional(),
        includeHttps: IncludeHttps$inboundSchema.optional(),
        includeRelay: IncludeRelay$inboundSchema.optional(),
        includeIPv6: IncludeIPv6$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Plex-Client-Identifier": "xPlexClientIdentifier",
        });
    });

/** @internal */
export type GetResourcesRequest$Outbound = {
    "X-Plex-Client-Identifier"?: string | undefined;
    includeHttps?: number | undefined;
    includeRelay?: number | undefined;
    includeIPv6?: number | undefined;
};

/** @internal */
export const GetResourcesRequest$outboundSchema: z.ZodType<
    GetResourcesRequest$Outbound,
    z.ZodTypeDef,
    GetResourcesRequest
> = z
    .object({
        xPlexClientIdentifier: z.string().optional(),
        includeHttps: IncludeHttps$outboundSchema.optional(),
        includeRelay: IncludeRelay$outboundSchema.optional(),
        includeIPv6: IncludeIPv6$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xPlexClientIdentifier: "X-Plex-Client-Identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesRequest$ {
    /** @deprecated use `GetResourcesRequest$inboundSchema` instead. */
    export const inboundSchema = GetResourcesRequest$inboundSchema;
    /** @deprecated use `GetResourcesRequest$outboundSchema` instead. */
    export const outboundSchema = GetResourcesRequest$outboundSchema;
    /** @deprecated use `GetResourcesRequest$Outbound` instead. */
    export type Outbound = GetResourcesRequest$Outbound;
}

/** @internal */
export const GetResourcesErrors$inboundSchema: z.ZodType<
    GetResourcesErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type GetResourcesErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetResourcesErrors$outboundSchema: z.ZodType<
    GetResourcesErrors$Outbound,
    z.ZodTypeDef,
    GetResourcesErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesErrors$ {
    /** @deprecated use `GetResourcesErrors$inboundSchema` instead. */
    export const inboundSchema = GetResourcesErrors$inboundSchema;
    /** @deprecated use `GetResourcesErrors$outboundSchema` instead. */
    export const outboundSchema = GetResourcesErrors$outboundSchema;
    /** @deprecated use `GetResourcesErrors$Outbound` instead. */
    export type Outbound = GetResourcesErrors$Outbound;
}

/** @internal */
export const GetResourcesResponseBody$inboundSchema: z.ZodType<
    GetResourcesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetResourcesErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetResourcesResponseBody(remapped);
    });

/** @internal */
export type GetResourcesResponseBody$Outbound = {
    errors?: Array<GetResourcesErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetResourcesResponseBody$outboundSchema: z.ZodType<
    GetResourcesResponseBody$Outbound,
    z.ZodTypeDef,
    GetResourcesResponseBody
> = z
    .instanceof(GetResourcesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetResourcesErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesResponseBody$ {
    /** @deprecated use `GetResourcesResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetResourcesResponseBody$inboundSchema;
    /** @deprecated use `GetResourcesResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetResourcesResponseBody$outboundSchema;
    /** @deprecated use `GetResourcesResponseBody$Outbound` instead. */
    export type Outbound = GetResourcesResponseBody$Outbound;
}

/** @internal */
export const Connections$inboundSchema: z.ZodType<Connections, z.ZodTypeDef, unknown> = z
    .object({
        protocol: z.string().optional(),
        address: z.string().optional(),
        port: z.number().optional(),
        uri: z.string().optional(),
        local: z.boolean().optional(),
        relay: z.boolean().optional(),
        IPv6: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            IPv6: "iPv6",
        });
    });

/** @internal */
export type Connections$Outbound = {
    protocol?: string | undefined;
    address?: string | undefined;
    port?: number | undefined;
    uri?: string | undefined;
    local?: boolean | undefined;
    relay?: boolean | undefined;
    IPv6?: boolean | undefined;
};

/** @internal */
export const Connections$outboundSchema: z.ZodType<
    Connections$Outbound,
    z.ZodTypeDef,
    Connections
> = z
    .object({
        protocol: z.string().optional(),
        address: z.string().optional(),
        port: z.number().optional(),
        uri: z.string().optional(),
        local: z.boolean().optional(),
        relay: z.boolean().optional(),
        iPv6: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            iPv6: "IPv6",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connections$ {
    /** @deprecated use `Connections$inboundSchema` instead. */
    export const inboundSchema = Connections$inboundSchema;
    /** @deprecated use `Connections$outboundSchema` instead. */
    export const outboundSchema = Connections$outboundSchema;
    /** @deprecated use `Connections$Outbound` instead. */
    export type Outbound = Connections$Outbound;
}

/** @internal */
export const PlexDevice$inboundSchema: z.ZodType<PlexDevice, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
    product: z.string(),
    productVersion: z.string(),
    platform: z.string(),
    platformVersion: z.string(),
    device: z.string(),
    clientIdentifier: z.string(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    lastSeenAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    provides: z.string(),
    ownerId: z.string().optional(),
    sourceTitle: z.string().optional(),
    publicAddress: z.string().optional(),
    accessToken: z.string().optional(),
    owned: z.boolean().optional(),
    home: z.boolean().optional(),
    synced: z.boolean().optional(),
    relay: z.boolean().optional(),
    presence: z.boolean().optional(),
    httpsRequired: z.boolean().optional(),
    publicAddressMatches: z.boolean().optional(),
    dnsRebindingProtection: z.boolean().optional(),
    natLoopbackSupported: z.boolean().optional(),
    connections: z.array(z.lazy(() => Connections$inboundSchema)).optional(),
});

/** @internal */
export type PlexDevice$Outbound = {
    name: string;
    product: string;
    productVersion: string;
    platform: string;
    platformVersion: string;
    device: string;
    clientIdentifier: string;
    createdAt: string;
    lastSeenAt: string;
    provides: string;
    ownerId?: string | undefined;
    sourceTitle?: string | undefined;
    publicAddress?: string | undefined;
    accessToken?: string | undefined;
    owned?: boolean | undefined;
    home?: boolean | undefined;
    synced?: boolean | undefined;
    relay?: boolean | undefined;
    presence?: boolean | undefined;
    httpsRequired?: boolean | undefined;
    publicAddressMatches?: boolean | undefined;
    dnsRebindingProtection?: boolean | undefined;
    natLoopbackSupported?: boolean | undefined;
    connections?: Array<Connections$Outbound> | undefined;
};

/** @internal */
export const PlexDevice$outboundSchema: z.ZodType<PlexDevice$Outbound, z.ZodTypeDef, PlexDevice> =
    z.object({
        name: z.string(),
        product: z.string(),
        productVersion: z.string(),
        platform: z.string(),
        platformVersion: z.string(),
        device: z.string(),
        clientIdentifier: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        lastSeenAt: z.date().transform((v) => v.toISOString()),
        provides: z.string(),
        ownerId: z.string().optional(),
        sourceTitle: z.string().optional(),
        publicAddress: z.string().optional(),
        accessToken: z.string().optional(),
        owned: z.boolean().optional(),
        home: z.boolean().optional(),
        synced: z.boolean().optional(),
        relay: z.boolean().optional(),
        presence: z.boolean().optional(),
        httpsRequired: z.boolean().optional(),
        publicAddressMatches: z.boolean().optional(),
        dnsRebindingProtection: z.boolean().optional(),
        natLoopbackSupported: z.boolean().optional(),
        connections: z.array(z.lazy(() => Connections$outboundSchema)).optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlexDevice$ {
    /** @deprecated use `PlexDevice$inboundSchema` instead. */
    export const inboundSchema = PlexDevice$inboundSchema;
    /** @deprecated use `PlexDevice$outboundSchema` instead. */
    export const outboundSchema = PlexDevice$outboundSchema;
    /** @deprecated use `PlexDevice$Outbound` instead. */
    export type Outbound = PlexDevice$Outbound;
}

/** @internal */
export const GetResourcesResponse$inboundSchema: z.ZodType<
    GetResourcesResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        PlexDevices: z.array(z.lazy(() => PlexDevice$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            PlexDevices: "plexDevices",
        });
    });

/** @internal */
export type GetResourcesResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    PlexDevices?: Array<PlexDevice$Outbound> | undefined;
};

/** @internal */
export const GetResourcesResponse$outboundSchema: z.ZodType<
    GetResourcesResponse$Outbound,
    z.ZodTypeDef,
    GetResourcesResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        plexDevices: z.array(z.lazy(() => PlexDevice$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            plexDevices: "PlexDevices",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesResponse$ {
    /** @deprecated use `GetResourcesResponse$inboundSchema` instead. */
    export const inboundSchema = GetResourcesResponse$inboundSchema;
    /** @deprecated use `GetResourcesResponse$outboundSchema` instead. */
    export const outboundSchema = GetResourcesResponse$outboundSchema;
    /** @deprecated use `GetResourcesResponse$Outbound` instead. */
    export type Outbound = GetResourcesResponse$Outbound;
}
