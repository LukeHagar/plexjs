/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import { RFCDate } from "../types";
import * as z from "zod";

export type GetSessionHistoryErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetSessionHistorySessionsResponseBodyData = {
    errors?: Array<GetSessionHistoryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetSessionHistorySessionsResponseBody extends Error {
    errors?: Array<GetSessionHistoryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSessionHistorySessionsResponseBodyData;

    constructor(err: GetSessionHistorySessionsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetSessionHistorySessionsResponseBody";
    }
}

export type GetSessionHistoryMetadata = {
    historyKey?: string | undefined;
    key?: string | undefined;
    ratingKey?: string | undefined;
    librarySectionID?: string | undefined;
    parentKey?: string | undefined;
    grandparentKey?: string | undefined;
    title?: string | undefined;
    grandparentTitle?: string | undefined;
    type?: string | undefined;
    thumb?: string | undefined;
    parentThumb?: string | undefined;
    grandparentThumb?: string | undefined;
    grandparentArt?: string | undefined;
    index?: number | undefined;
    parentIndex?: number | undefined;
    originallyAvailableAt?: RFCDate | undefined;
    viewedAt?: number | undefined;
    accountID?: number | undefined;
    deviceID?: number | undefined;
};

export type GetSessionHistoryMediaContainer = {
    size?: number | undefined;
    metadata?: Array<GetSessionHistoryMetadata> | undefined;
};

/**
 * List of Plex Sessions
 */
export type GetSessionHistoryResponseBody = {
    mediaContainer?: GetSessionHistoryMediaContainer | undefined;
};

export type GetSessionHistoryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of Plex Sessions
     */
    object?: GetSessionHistoryResponseBody | undefined;
};

/** @internal */
export namespace GetSessionHistoryErrors$ {
    export const inboundSchema: z.ZodType<GetSessionHistoryErrors, z.ZodTypeDef, unknown> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionHistoryErrors> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });
}

/** @internal */
export namespace GetSessionHistorySessionsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetSessionHistorySessionsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            errors: z.array(z.lazy(() => GetSessionHistoryErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new GetSessionHistorySessionsResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<GetSessionHistoryErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSessionHistorySessionsResponseBody
    > = z
        .instanceof(GetSessionHistorySessionsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z
                        .array(z.lazy(() => GetSessionHistoryErrors$.outboundSchema))
                        .optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetSessionHistoryMetadata$ {
    export const inboundSchema: z.ZodType<GetSessionHistoryMetadata, z.ZodTypeDef, unknown> =
        z.object({
            historyKey: z.string().optional(),
            key: z.string().optional(),
            ratingKey: z.string().optional(),
            librarySectionID: z.string().optional(),
            parentKey: z.string().optional(),
            grandparentKey: z.string().optional(),
            title: z.string().optional(),
            grandparentTitle: z.string().optional(),
            type: z.string().optional(),
            thumb: z.string().optional(),
            parentThumb: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentArt: z.string().optional(),
            index: z.number().int().optional(),
            parentIndex: z.number().int().optional(),
            originallyAvailableAt: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            viewedAt: z.number().int().optional(),
            accountID: z.number().int().optional(),
            deviceID: z.number().int().optional(),
        });

    export type Outbound = {
        historyKey?: string | undefined;
        key?: string | undefined;
        ratingKey?: string | undefined;
        librarySectionID?: string | undefined;
        parentKey?: string | undefined;
        grandparentKey?: string | undefined;
        title?: string | undefined;
        grandparentTitle?: string | undefined;
        type?: string | undefined;
        thumb?: string | undefined;
        parentThumb?: string | undefined;
        grandparentThumb?: string | undefined;
        grandparentArt?: string | undefined;
        index?: number | undefined;
        parentIndex?: number | undefined;
        originallyAvailableAt?: string | undefined;
        viewedAt?: number | undefined;
        accountID?: number | undefined;
        deviceID?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionHistoryMetadata> =
        z.object({
            historyKey: z.string().optional(),
            key: z.string().optional(),
            ratingKey: z.string().optional(),
            librarySectionID: z.string().optional(),
            parentKey: z.string().optional(),
            grandparentKey: z.string().optional(),
            title: z.string().optional(),
            grandparentTitle: z.string().optional(),
            type: z.string().optional(),
            thumb: z.string().optional(),
            parentThumb: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentArt: z.string().optional(),
            index: z.number().int().optional(),
            parentIndex: z.number().int().optional(),
            originallyAvailableAt: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            viewedAt: z.number().int().optional(),
            accountID: z.number().int().optional(),
            deviceID: z.number().int().optional(),
        });
}

/** @internal */
export namespace GetSessionHistoryMediaContainer$ {
    export const inboundSchema: z.ZodType<GetSessionHistoryMediaContainer, z.ZodTypeDef, unknown> =
        z
            .object({
                size: z.number().int().optional(),
                Metadata: z
                    .array(z.lazy(() => GetSessionHistoryMetadata$.inboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    Metadata: "metadata",
                });
            });

    export type Outbound = {
        size?: number | undefined;
        Metadata?: Array<GetSessionHistoryMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSessionHistoryMediaContainer
    > = z
        .object({
            size: z.number().int().optional(),
            metadata: z.array(z.lazy(() => GetSessionHistoryMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace GetSessionHistoryResponseBody$ {
    export const inboundSchema: z.ZodType<GetSessionHistoryResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetSessionHistoryMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetSessionHistoryMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionHistoryResponseBody> =
        z
            .object({
                mediaContainer: z
                    .lazy(() => GetSessionHistoryMediaContainer$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    mediaContainer: "MediaContainer",
                });
            });
}

/** @internal */
export namespace GetSessionHistoryResponse$ {
    export const inboundSchema: z.ZodType<GetSessionHistoryResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetSessionHistoryResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetSessionHistoryResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionHistoryResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetSessionHistoryResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
