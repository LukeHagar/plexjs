/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetSourceConnectionInformationRequest = {
    /**
     * The source identifier with an included prefix.
     */
    source: string;
};

export type GetSourceConnectionInformationErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetSourceConnectionInformationResponseBodyData = {
    errors?: Array<GetSourceConnectionInformationErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetSourceConnectionInformationResponseBody extends Error {
    errors?: Array<GetSourceConnectionInformationErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSourceConnectionInformationResponseBodyData;

    constructor(err: GetSourceConnectionInformationResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetSourceConnectionInformationResponseBody";
    }
}

export type GetSourceConnectionInformationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetSourceConnectionInformationRequest$inboundSchema: z.ZodType<
    GetSourceConnectionInformationRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    source: z.string(),
});

/** @internal */
export type GetSourceConnectionInformationRequest$Outbound = {
    source: string;
};

/** @internal */
export const GetSourceConnectionInformationRequest$outboundSchema: z.ZodType<
    GetSourceConnectionInformationRequest$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationRequest
> = z.object({
    source: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationRequest$ {
    /** @deprecated use `GetSourceConnectionInformationRequest$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationRequest$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationRequest$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationRequest$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationRequest$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationRequest$Outbound;
}

/** @internal */
export const GetSourceConnectionInformationErrors$inboundSchema: z.ZodType<
    GetSourceConnectionInformationErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type GetSourceConnectionInformationErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetSourceConnectionInformationErrors$outboundSchema: z.ZodType<
    GetSourceConnectionInformationErrors$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationErrors$ {
    /** @deprecated use `GetSourceConnectionInformationErrors$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationErrors$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationErrors$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationErrors$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationErrors$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationErrors$Outbound;
}

/** @internal */
export const GetSourceConnectionInformationResponseBody$inboundSchema: z.ZodType<
    GetSourceConnectionInformationResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z
            .array(z.lazy(() => GetSourceConnectionInformationErrors$inboundSchema))
            .optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetSourceConnectionInformationResponseBody(remapped);
    });

/** @internal */
export type GetSourceConnectionInformationResponseBody$Outbound = {
    errors?: Array<GetSourceConnectionInformationErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetSourceConnectionInformationResponseBody$outboundSchema: z.ZodType<
    GetSourceConnectionInformationResponseBody$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationResponseBody
> = z
    .instanceof(GetSourceConnectionInformationResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z
                    .array(z.lazy(() => GetSourceConnectionInformationErrors$outboundSchema))
                    .optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationResponseBody$ {
    /** @deprecated use `GetSourceConnectionInformationResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationResponseBody$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationResponseBody$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationResponseBody$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationResponseBody$Outbound;
}

/** @internal */
export const GetSourceConnectionInformationResponse$inboundSchema: z.ZodType<
    GetSourceConnectionInformationResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetSourceConnectionInformationResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetSourceConnectionInformationResponse$outboundSchema: z.ZodType<
    GetSourceConnectionInformationResponse$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationResponse$ {
    /** @deprecated use `GetSourceConnectionInformationResponse$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationResponse$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationResponse$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationResponse$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationResponse$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationResponse$Outbound;
}
