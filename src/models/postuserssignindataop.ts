/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export const PostUsersSigninDataOpServerList = ["https://plex.tv/api/v2"] as const;

export type PostUsersSigninDataGlobals = {
    /**
     * The unique identifier for the client application
     *
     * @remarks
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier?: string | undefined;
};

/**
 * Login credentials
 */
export type PostUsersSigninDataRequestBody = {
    login: string;
    password: string;
    rememberMe?: boolean | undefined;
};

export type PostUsersSigninDataRequest = {
    /**
     * The unique identifier for the client application
     *
     * @remarks
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier?: string | undefined;
    /**
     * Login credentials
     */
    requestBody?: PostUsersSigninDataRequestBody | undefined;
};

export type PostUsersSigninDataErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type PostUsersSigninDataResponseBodyData = {
    errors?: Array<PostUsersSigninDataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class PostUsersSigninDataResponseBody extends Error {
    errors?: Array<PostUsersSigninDataErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: PostUsersSigninDataResponseBodyData;

    constructor(err: PostUsersSigninDataResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "PostUsersSigninDataResponseBody";
    }
}

/**
 * Your current mailing list status
 */
export enum PostUsersSigninDataMailingListStatus {
    Subscribed = "subscribed",
    Unsubscribed = "unsubscribed",
}

export type PostUsersSigninDataUserProfile = {
    /**
     * If the account has automatically select audio and subtitle tracks enabled
     */
    autoSelectAudio?: boolean | undefined;
    /**
     * The preferred audio language for the account
     */
    defaultAudioLanguage?: string | undefined;
    /**
     * The preferred subtitle language for the account
     */
    defaultSubtitleLanguage?: string | undefined;
    /**
     * The auto-select subtitle mode (0 = Manually selected, 1 = Shown with foreign audio, 2 = Always enabled)
     */
    autoSelectSubtitle?: number | undefined;
    /**
     * The subtitles for the deaf or hard-of-hearing (SDH) searches mode (0 = Prefer non-SDH subtitles, 1 = Prefer SDH subtitles, 2 = Only show SDH subtitles, 3 = Only shown non-SDH subtitles)
     */
    defaultSubtitleAccessibility?: number | undefined;
    /**
     * The forced subtitles searches mode (0 = Prefer non-forced subtitles, 1 = Prefer forced subtitles, 2 = Only show forced subtitles, 3 = Only show non-forced subtitles)
     */
    defaultSubtitleForced?: number | undefined;
    watchedIndicator?: number | undefined;
    mediaReviewsVisibility?: number | undefined;
};

export enum PostUsersSigninDataStatus {
    Online = "online",
    Offline = "offline",
}

export type PostUsersSigninDataServices = {
    identifier: string;
    endpoint: string;
    token: string | null;
    secret: string | null;
    status: PostUsersSigninDataStatus;
};

export enum PostUsersSigninDataFeatures {
    AndroidDolbyVision = "Android - Dolby Vision",
    AndroidPiP = "Android - PiP",
    CUSunset = "CU Sunset",
    HRKEnableEUR = "HRK_enable_EUR",
    TREBLEShowFeatures = "TREBLE-show-features",
    AdCountdownTimer = "ad-countdown-timer",
    AdaptiveBitrate = "adaptive_bitrate",
    AmazonLoopDebug = "amazon-loop-debug",
    AvodAdAnalysis = "avod-ad-analysis",
    AvodNewMedia = "avod-new-media",
    BlacklistGetSignin = "blacklist_get_signin",
    ClientRadioStations = "client-radio-stations",
    CloudflareTurnstileRequired = "cloudflare-turnstile-required",
    Collections = "collections",
    CommentsAndRepliesPushNotifications = "comments_and_replies_push_notifications",
    CommunityAccessPlexTv = "community_access_plex_tv",
    CompanionsSonos = "companions_sonos",
    CustomHomeRemoval = "custom-home-removal",
    DisableHomeUserFriendships = "disable_home_user_friendships",
    DisableSharingFriendships = "disable_sharing_friendships",
    DrmSupport = "drm_support",
    ExcludeRestrictions = "exclude restrictions",
    FederatedAuth = "federated-auth",
    FriendRequestPushNotifications = "friend_request_push_notifications",
    GuidedUpgrade = "guided-upgrade",
    Home = "home",
    IncreasePasswordComplexity = "increase-password-complexity",
    Ios14PrivacyBanner = "ios14-privacy-banner",
    IterableNotificationTokens = "iterable-notification-tokens",
    KeepPaymentMethod = "keep-payment-method",
    KevinBacon = "kevin-bacon",
    KoreaConsent = "korea-consent",
    LeIsrgRootX1 = "le_isrg_root_x1",
    LetsEncrypt = "lets_encrypt",
    LightningDvrPivot = "lightning-dvr-pivot",
    LiveTvSupportIncompleteSegments = "live-tv-support-incomplete-segments",
    Livetv = "livetv",
    MetadataSearch = "metadata_search",
    NewPlexPassPrices = "new_plex_pass_prices",
    NewsProviderSunsetModal = "news-provider-sunset-modal",
    PhotosFavorites = "photos-favorites",
    PhotosMetadataEdition = "photos-metadata-edition",
    PmsHealth = "pms_health",
    Radio = "radio",
    RateLimitClientToken = "rate-limit-client-token",
    ScrobblingServicePlexTv = "scrobbling-service-plex-tv",
    SharedServerNotification = "shared_server_notification",
    SharedSourceNotification = "shared_source_notification",
    SigninWithApple = "signin_with_apple",
    SpringServeAdProvider = "spring_serve_ad_provider",
    TranscoderCache = "transcoder_cache",
    TunerSharing = "tuner-sharing",
    TwoFactorAuthentication = "two-factor-authentication",
    Unsupportedtuners = "unsupportedtuners",
    Upgrade3ds2 = "upgrade-3ds2",
    VodSchema = "vod-schema",
    VodCloudflare = "vod_cloudflare",
    WatchTogetherInvite = "watch-together-invite",
    WebServerDashboard = "web_server_dashboard",
}

/**
 * String representation of subscriptionActive
 */
export enum PostUsersSigninDataUserStatus {
    Inactive = "Inactive",
    Active = "Active",
}

/**
 * If the accountâ€™s Plex Pass subscription is active
 */
export type PostUsersSigninDataSubscription = {
    /**
     * List of features allowed on your Plex Pass subscription
     */
    features?: Array<PostUsersSigninDataFeatures> | undefined;
    /**
     * If the account's Plex Pass subscription is active
     */
    active?: boolean | undefined;
    /**
     * Date the account subscribed to Plex Pass
     */
    subscribedAt?: Date | undefined;
    /**
     * String representation of subscriptionActive
     */
    status?: PostUsersSigninDataUserStatus | undefined;
    /**
     * Payment service used for your Plex Pass subscription
     */
    paymentService?: string | null | undefined;
    /**
     * Name of Plex Pass subscription plan
     */
    plan?: string | null | undefined;
};

export enum PostUsersSigninDataUserFeatures {
    AndroidDolbyVision = "Android - Dolby Vision",
    AndroidPiP = "Android - PiP",
    CUSunset = "CU Sunset",
    HRKEnableEUR = "HRK_enable_EUR",
    TREBLEShowFeatures = "TREBLE-show-features",
    AdCountdownTimer = "ad-countdown-timer",
    AdaptiveBitrate = "adaptive_bitrate",
    AmazonLoopDebug = "amazon-loop-debug",
    AvodAdAnalysis = "avod-ad-analysis",
    AvodNewMedia = "avod-new-media",
    BlacklistGetSignin = "blacklist_get_signin",
    ClientRadioStations = "client-radio-stations",
    CloudflareTurnstileRequired = "cloudflare-turnstile-required",
    Collections = "collections",
    CommentsAndRepliesPushNotifications = "comments_and_replies_push_notifications",
    CommunityAccessPlexTv = "community_access_plex_tv",
    CompanionsSonos = "companions_sonos",
    CustomHomeRemoval = "custom-home-removal",
    DisableHomeUserFriendships = "disable_home_user_friendships",
    DisableSharingFriendships = "disable_sharing_friendships",
    DrmSupport = "drm_support",
    ExcludeRestrictions = "exclude restrictions",
    FederatedAuth = "federated-auth",
    FriendRequestPushNotifications = "friend_request_push_notifications",
    GuidedUpgrade = "guided-upgrade",
    Home = "home",
    IncreasePasswordComplexity = "increase-password-complexity",
    Ios14PrivacyBanner = "ios14-privacy-banner",
    IterableNotificationTokens = "iterable-notification-tokens",
    KeepPaymentMethod = "keep-payment-method",
    KevinBacon = "kevin-bacon",
    KoreaConsent = "korea-consent",
    LeIsrgRootX1 = "le_isrg_root_x1",
    LetsEncrypt = "lets_encrypt",
    LightningDvrPivot = "lightning-dvr-pivot",
    LiveTvSupportIncompleteSegments = "live-tv-support-incomplete-segments",
    Livetv = "livetv",
    MetadataSearch = "metadata_search",
    NewPlexPassPrices = "new_plex_pass_prices",
    NewsProviderSunsetModal = "news-provider-sunset-modal",
    PhotosFavorites = "photos-favorites",
    PhotosMetadataEdition = "photos-metadata-edition",
    PmsHealth = "pms_health",
    Radio = "radio",
    RateLimitClientToken = "rate-limit-client-token",
    ScrobblingServicePlexTv = "scrobbling-service-plex-tv",
    SharedServerNotification = "shared_server_notification",
    SharedSourceNotification = "shared_source_notification",
    SigninWithApple = "signin_with_apple",
    SpringServeAdProvider = "spring_serve_ad_provider",
    TranscoderCache = "transcoder_cache",
    TunerSharing = "tuner-sharing",
    TwoFactorAuthentication = "two-factor-authentication",
    Unsupportedtuners = "unsupportedtuners",
    Upgrade3ds2 = "upgrade-3ds2",
    VodSchema = "vod-schema",
    VodCloudflare = "vod_cloudflare",
    WatchTogetherInvite = "watch-together-invite",
    WebServerDashboard = "web_server_dashboard",
}

/**
 * String representation of subscriptionActive
 */
export enum PostUsersSigninDataUserResponseStatus {
    Inactive = "Inactive",
    Active = "Active",
}

export type PostUsersSigninDataUserSubscription = {
    /**
     * List of features allowed on your Plex Pass subscription
     */
    features?: Array<PostUsersSigninDataUserFeatures> | undefined;
    /**
     * If the account's Plex Pass subscription is active
     */
    active?: boolean | undefined;
    /**
     * Date the account subscribed to Plex Pass
     */
    subscribedAt?: Date | undefined;
    /**
     * String representation of subscriptionActive
     */
    status?: PostUsersSigninDataUserResponseStatus | undefined;
    /**
     * Payment service used for your Plex Pass subscription
     */
    paymentService?: string | null | undefined;
    /**
     * Name of Plex Pass subscription plan
     */
    plan?: string | null | undefined;
};

export enum PostUsersSigninDataState {
    Ended = "ended",
}

export type InternalPaymentMethod = {};

export type Billing = {
    internalPaymentMethod: InternalPaymentMethod;
    paymentMethodId: number | null;
};

export type PastSubscription = {
    id: string | null;
    mode: string | null;
    /**
     * Unix epoch datetime
     */
    renewsAt: number | null;
    /**
     * Unix epoch datetime
     */
    endsAt: number | null;
    canceled?: boolean | undefined;
    gracePeriod?: boolean | undefined;
    onHold?: boolean | undefined;
    canReactivate?: boolean | undefined;
    canUpgrade?: boolean | undefined;
    canDowngrade?: boolean | undefined;
    canConvert?: boolean | undefined;
    type: string;
    transfer: string | null;
    state: PostUsersSigninDataState;
    billing: Array<Billing>;
};

export type Trials = {};

/**
 * Returns the user account data with a valid auth token
 */
export type PostUsersSigninDataUserPlexAccount = {
    /**
     * Unknown
     */
    adsConsent: boolean | null;
    /**
     * Unknown
     */
    adsConsentReminderAt: Date | null;
    /**
     * Unknown
     */
    adsConsentSetAt: Date | null;
    /**
     * Unknown
     */
    anonymous?: boolean | undefined;
    /**
     * The account token
     */
    authToken: string;
    /**
     * If the two-factor authentication backup codes have been created
     */
    backupCodesCreated?: boolean | undefined;
    /**
     * If the account has been confirmed
     */
    confirmed?: boolean | undefined;
    /**
     * The account country
     */
    country: string;
    /**
     * The account email address
     */
    email: string;
    /**
     * If login with email only is enabled
     */
    emailOnlyAuth?: boolean | undefined;
    /**
     * If experimental features are enabled
     */
    experimentalFeatures?: boolean | undefined;
    /**
     * Your account full name
     */
    friendlyName: string;
    /**
     * List of devices your allowed to use with this account
     */
    entitlements: Array<string>;
    /**
     * If the account is a Plex Home guest user
     */
    guest?: boolean | undefined;
    /**
     * If the account has a password
     */
    hasPassword?: boolean | undefined;
    /**
     * If the account is a Plex Home user
     */
    home?: boolean | undefined;
    /**
     * If the account is the Plex Home admin
     */
    homeAdmin?: boolean | undefined;
    /**
     * The number of accounts in the Plex Home
     */
    homeSize: number;
    /**
     * The Plex account ID
     */
    id: number;
    /**
     * Unix epoch datetime the account joined Plex
     */
    joinedAt: number;
    /**
     * The account locale
     */
    locale: string | null;
    /**
     * If you are subscribed to the Plex newsletter
     */
    mailingListActive?: boolean | undefined;
    /**
     * Your current mailing list status
     */
    mailingListStatus: PostUsersSigninDataMailingListStatus;
    /**
     * The maximum number of accounts allowed in the Plex Home
     */
    maxHomeSize: number;
    /**
     * [Might be removed] The hashed Plex Home PIN
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    pin?: string | undefined;
    profile: Array<PostUsersSigninDataUserProfile>;
    /**
     * If the account has a Plex Home PIN enabled
     */
    protected?: boolean | undefined;
    /**
     * Unix epoch datetime the authtoken expires
     */
    rememberExpiresAt: number;
    /**
     * If the account is a Plex Home managed user
     */
    restricted?: boolean | undefined;
    /**
     * [Might be removed] List of account roles. Plexpass membership listed here
     */
    roles?: Array<string> | undefined;
    /**
     * Unknown
     */
    scrobbleTypes: string;
    services: Array<PostUsersSigninDataServices>;
    /**
     * If the accountâ€™s Plex Pass subscription is active
     */
    subscription: PostUsersSigninDataSubscription;
    /**
     * Description of the Plex Pass subscription
     */
    subscriptionDescription: string | null;
    subscriptions: Array<PostUsersSigninDataUserSubscription>;
    /**
     * URL of the account thumbnail
     */
    thumb: string;
    /**
     * The title of the account (username or friendly name)
     */
    title: string;
    /**
     * If two-factor authentication is enabled
     */
    twoFactorEnabled?: boolean | undefined;
    /**
     * The account username
     */
    username: string;
    /**
     * The account UUID
     */
    uuid: string;
    pastSubscriptions: Array<PastSubscription>;
    trials: Array<Trials>;
};

export type PostUsersSigninDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Returns the user account data with a valid auth token
     */
    userPlexAccount?: PostUsersSigninDataUserPlexAccount | undefined;
};

/** @internal */
export const PostUsersSigninDataGlobals$inboundSchema: z.ZodType<
    PostUsersSigninDataGlobals,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "X-Plex-Client-Identifier": z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Plex-Client-Identifier": "xPlexClientIdentifier",
        });
    });

/** @internal */
export type PostUsersSigninDataGlobals$Outbound = {
    "X-Plex-Client-Identifier"?: string | undefined;
};

/** @internal */
export const PostUsersSigninDataGlobals$outboundSchema: z.ZodType<
    PostUsersSigninDataGlobals$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataGlobals
> = z
    .object({
        xPlexClientIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xPlexClientIdentifier: "X-Plex-Client-Identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataGlobals$ {
    /** @deprecated use `PostUsersSigninDataGlobals$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataGlobals$inboundSchema;
    /** @deprecated use `PostUsersSigninDataGlobals$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataGlobals$outboundSchema;
    /** @deprecated use `PostUsersSigninDataGlobals$Outbound` instead. */
    export type Outbound = PostUsersSigninDataGlobals$Outbound;
}

/** @internal */
export const PostUsersSigninDataRequestBody$inboundSchema: z.ZodType<
    PostUsersSigninDataRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    login: z.string(),
    password: z.string(),
    rememberMe: z.boolean(),
});

/** @internal */
export type PostUsersSigninDataRequestBody$Outbound = {
    login: string;
    password: string;
    rememberMe: boolean;
};

/** @internal */
export const PostUsersSigninDataRequestBody$outboundSchema: z.ZodType<
    PostUsersSigninDataRequestBody$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataRequestBody
> = z.object({
    login: z.string(),
    password: z.string(),
    rememberMe: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataRequestBody$ {
    /** @deprecated use `PostUsersSigninDataRequestBody$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataRequestBody$inboundSchema;
    /** @deprecated use `PostUsersSigninDataRequestBody$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataRequestBody$outboundSchema;
    /** @deprecated use `PostUsersSigninDataRequestBody$Outbound` instead. */
    export type Outbound = PostUsersSigninDataRequestBody$Outbound;
}

/** @internal */
export const PostUsersSigninDataRequest$inboundSchema: z.ZodType<
    PostUsersSigninDataRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "X-Plex-Client-Identifier": z.string().optional(),
        RequestBody: z.lazy(() => PostUsersSigninDataRequestBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Plex-Client-Identifier": "xPlexClientIdentifier",
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type PostUsersSigninDataRequest$Outbound = {
    "X-Plex-Client-Identifier"?: string | undefined;
    RequestBody?: PostUsersSigninDataRequestBody$Outbound | undefined;
};

/** @internal */
export const PostUsersSigninDataRequest$outboundSchema: z.ZodType<
    PostUsersSigninDataRequest$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataRequest
> = z
    .object({
        xPlexClientIdentifier: z.string().optional(),
        requestBody: z.lazy(() => PostUsersSigninDataRequestBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xPlexClientIdentifier: "X-Plex-Client-Identifier",
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataRequest$ {
    /** @deprecated use `PostUsersSigninDataRequest$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataRequest$inboundSchema;
    /** @deprecated use `PostUsersSigninDataRequest$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataRequest$outboundSchema;
    /** @deprecated use `PostUsersSigninDataRequest$Outbound` instead. */
    export type Outbound = PostUsersSigninDataRequest$Outbound;
}

/** @internal */
export const PostUsersSigninDataErrors$inboundSchema: z.ZodType<
    PostUsersSigninDataErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type PostUsersSigninDataErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const PostUsersSigninDataErrors$outboundSchema: z.ZodType<
    PostUsersSigninDataErrors$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataErrors$ {
    /** @deprecated use `PostUsersSigninDataErrors$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataErrors$inboundSchema;
    /** @deprecated use `PostUsersSigninDataErrors$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataErrors$outboundSchema;
    /** @deprecated use `PostUsersSigninDataErrors$Outbound` instead. */
    export type Outbound = PostUsersSigninDataErrors$Outbound;
}

/** @internal */
export const PostUsersSigninDataResponseBody$inboundSchema: z.ZodType<
    PostUsersSigninDataResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => PostUsersSigninDataErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new PostUsersSigninDataResponseBody(remapped);
    });

/** @internal */
export type PostUsersSigninDataResponseBody$Outbound = {
    errors?: Array<PostUsersSigninDataErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const PostUsersSigninDataResponseBody$outboundSchema: z.ZodType<
    PostUsersSigninDataResponseBody$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataResponseBody
> = z
    .instanceof(PostUsersSigninDataResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => PostUsersSigninDataErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataResponseBody$ {
    /** @deprecated use `PostUsersSigninDataResponseBody$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataResponseBody$inboundSchema;
    /** @deprecated use `PostUsersSigninDataResponseBody$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataResponseBody$outboundSchema;
    /** @deprecated use `PostUsersSigninDataResponseBody$Outbound` instead. */
    export type Outbound = PostUsersSigninDataResponseBody$Outbound;
}

/** @internal */
export const PostUsersSigninDataMailingListStatus$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataMailingListStatus
> = z.nativeEnum(PostUsersSigninDataMailingListStatus);

/** @internal */
export const PostUsersSigninDataMailingListStatus$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataMailingListStatus
> = PostUsersSigninDataMailingListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataMailingListStatus$ {
    /** @deprecated use `PostUsersSigninDataMailingListStatus$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataMailingListStatus$inboundSchema;
    /** @deprecated use `PostUsersSigninDataMailingListStatus$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataMailingListStatus$outboundSchema;
}

/** @internal */
export const PostUsersSigninDataUserProfile$inboundSchema: z.ZodType<
    PostUsersSigninDataUserProfile,
    z.ZodTypeDef,
    unknown
> = z.object({
    autoSelectAudio: z.boolean().default(true),
    defaultAudioLanguage: z.string().optional(),
    defaultSubtitleLanguage: z.string().optional(),
    autoSelectSubtitle: z.number().int().optional(),
    defaultSubtitleAccessibility: z.number().int().optional(),
    defaultSubtitleForced: z.number().int().optional(),
    watchedIndicator: z.number().int().optional(),
    mediaReviewsVisibility: z.number().int().optional(),
});

/** @internal */
export type PostUsersSigninDataUserProfile$Outbound = {
    autoSelectAudio: boolean;
    defaultAudioLanguage?: string | undefined;
    defaultSubtitleLanguage?: string | undefined;
    autoSelectSubtitle?: number | undefined;
    defaultSubtitleAccessibility?: number | undefined;
    defaultSubtitleForced?: number | undefined;
    watchedIndicator?: number | undefined;
    mediaReviewsVisibility?: number | undefined;
};

/** @internal */
export const PostUsersSigninDataUserProfile$outboundSchema: z.ZodType<
    PostUsersSigninDataUserProfile$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataUserProfile
> = z.object({
    autoSelectAudio: z.boolean().default(true),
    defaultAudioLanguage: z.string().optional(),
    defaultSubtitleLanguage: z.string().optional(),
    autoSelectSubtitle: z.number().int().optional(),
    defaultSubtitleAccessibility: z.number().int().optional(),
    defaultSubtitleForced: z.number().int().optional(),
    watchedIndicator: z.number().int().optional(),
    mediaReviewsVisibility: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataUserProfile$ {
    /** @deprecated use `PostUsersSigninDataUserProfile$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataUserProfile$inboundSchema;
    /** @deprecated use `PostUsersSigninDataUserProfile$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataUserProfile$outboundSchema;
    /** @deprecated use `PostUsersSigninDataUserProfile$Outbound` instead. */
    export type Outbound = PostUsersSigninDataUserProfile$Outbound;
}

/** @internal */
export const PostUsersSigninDataStatus$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataStatus
> = z.nativeEnum(PostUsersSigninDataStatus);

/** @internal */
export const PostUsersSigninDataStatus$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataStatus
> = PostUsersSigninDataStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataStatus$ {
    /** @deprecated use `PostUsersSigninDataStatus$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataStatus$inboundSchema;
    /** @deprecated use `PostUsersSigninDataStatus$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataStatus$outboundSchema;
}

/** @internal */
export const PostUsersSigninDataServices$inboundSchema: z.ZodType<
    PostUsersSigninDataServices,
    z.ZodTypeDef,
    unknown
> = z.object({
    identifier: z.string(),
    endpoint: z.string(),
    token: z.nullable(z.string()),
    secret: z.nullable(z.string()),
    status: PostUsersSigninDataStatus$inboundSchema,
});

/** @internal */
export type PostUsersSigninDataServices$Outbound = {
    identifier: string;
    endpoint: string;
    token: string | null;
    secret: string | null;
    status: string;
};

/** @internal */
export const PostUsersSigninDataServices$outboundSchema: z.ZodType<
    PostUsersSigninDataServices$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataServices
> = z.object({
    identifier: z.string(),
    endpoint: z.string(),
    token: z.nullable(z.string()),
    secret: z.nullable(z.string()),
    status: PostUsersSigninDataStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataServices$ {
    /** @deprecated use `PostUsersSigninDataServices$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataServices$inboundSchema;
    /** @deprecated use `PostUsersSigninDataServices$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataServices$outboundSchema;
    /** @deprecated use `PostUsersSigninDataServices$Outbound` instead. */
    export type Outbound = PostUsersSigninDataServices$Outbound;
}

/** @internal */
export const PostUsersSigninDataFeatures$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataFeatures
> = z.nativeEnum(PostUsersSigninDataFeatures);

/** @internal */
export const PostUsersSigninDataFeatures$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataFeatures
> = PostUsersSigninDataFeatures$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataFeatures$ {
    /** @deprecated use `PostUsersSigninDataFeatures$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataFeatures$inboundSchema;
    /** @deprecated use `PostUsersSigninDataFeatures$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataFeatures$outboundSchema;
}

/** @internal */
export const PostUsersSigninDataUserStatus$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataUserStatus
> = z.nativeEnum(PostUsersSigninDataUserStatus);

/** @internal */
export const PostUsersSigninDataUserStatus$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataUserStatus
> = PostUsersSigninDataUserStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataUserStatus$ {
    /** @deprecated use `PostUsersSigninDataUserStatus$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataUserStatus$inboundSchema;
    /** @deprecated use `PostUsersSigninDataUserStatus$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataUserStatus$outboundSchema;
}

/** @internal */
export const PostUsersSigninDataSubscription$inboundSchema: z.ZodType<
    PostUsersSigninDataSubscription,
    z.ZodTypeDef,
    unknown
> = z.object({
    features: z.array(PostUsersSigninDataFeatures$inboundSchema).optional(),
    active: z.boolean().optional(),
    subscribedAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v))
        .optional(),
    status: PostUsersSigninDataUserStatus$inboundSchema.optional(),
    paymentService: z.nullable(z.string()).optional(),
    plan: z.nullable(z.string()).optional(),
});

/** @internal */
export type PostUsersSigninDataSubscription$Outbound = {
    features?: Array<string> | undefined;
    active?: boolean | undefined;
    subscribedAt?: string | undefined;
    status?: string | undefined;
    paymentService?: string | null | undefined;
    plan?: string | null | undefined;
};

/** @internal */
export const PostUsersSigninDataSubscription$outboundSchema: z.ZodType<
    PostUsersSigninDataSubscription$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataSubscription
> = z.object({
    features: z.array(PostUsersSigninDataFeatures$outboundSchema).optional(),
    active: z.boolean().optional(),
    subscribedAt: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
    status: PostUsersSigninDataUserStatus$outboundSchema.optional(),
    paymentService: z.nullable(z.string()).optional(),
    plan: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataSubscription$ {
    /** @deprecated use `PostUsersSigninDataSubscription$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataSubscription$inboundSchema;
    /** @deprecated use `PostUsersSigninDataSubscription$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataSubscription$outboundSchema;
    /** @deprecated use `PostUsersSigninDataSubscription$Outbound` instead. */
    export type Outbound = PostUsersSigninDataSubscription$Outbound;
}

/** @internal */
export const PostUsersSigninDataUserFeatures$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataUserFeatures
> = z.nativeEnum(PostUsersSigninDataUserFeatures);

/** @internal */
export const PostUsersSigninDataUserFeatures$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataUserFeatures
> = PostUsersSigninDataUserFeatures$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataUserFeatures$ {
    /** @deprecated use `PostUsersSigninDataUserFeatures$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataUserFeatures$inboundSchema;
    /** @deprecated use `PostUsersSigninDataUserFeatures$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataUserFeatures$outboundSchema;
}

/** @internal */
export const PostUsersSigninDataUserResponseStatus$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataUserResponseStatus
> = z.nativeEnum(PostUsersSigninDataUserResponseStatus);

/** @internal */
export const PostUsersSigninDataUserResponseStatus$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataUserResponseStatus
> = PostUsersSigninDataUserResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataUserResponseStatus$ {
    /** @deprecated use `PostUsersSigninDataUserResponseStatus$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataUserResponseStatus$inboundSchema;
    /** @deprecated use `PostUsersSigninDataUserResponseStatus$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataUserResponseStatus$outboundSchema;
}

/** @internal */
export const PostUsersSigninDataUserSubscription$inboundSchema: z.ZodType<
    PostUsersSigninDataUserSubscription,
    z.ZodTypeDef,
    unknown
> = z.object({
    features: z.array(PostUsersSigninDataUserFeatures$inboundSchema).optional(),
    active: z.boolean().optional(),
    subscribedAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v))
        .optional(),
    status: PostUsersSigninDataUserResponseStatus$inboundSchema.optional(),
    paymentService: z.nullable(z.string()).optional(),
    plan: z.nullable(z.string()).optional(),
});

/** @internal */
export type PostUsersSigninDataUserSubscription$Outbound = {
    features?: Array<string> | undefined;
    active?: boolean | undefined;
    subscribedAt?: string | undefined;
    status?: string | undefined;
    paymentService?: string | null | undefined;
    plan?: string | null | undefined;
};

/** @internal */
export const PostUsersSigninDataUserSubscription$outboundSchema: z.ZodType<
    PostUsersSigninDataUserSubscription$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataUserSubscription
> = z.object({
    features: z.array(PostUsersSigninDataUserFeatures$outboundSchema).optional(),
    active: z.boolean().optional(),
    subscribedAt: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
    status: PostUsersSigninDataUserResponseStatus$outboundSchema.optional(),
    paymentService: z.nullable(z.string()).optional(),
    plan: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataUserSubscription$ {
    /** @deprecated use `PostUsersSigninDataUserSubscription$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataUserSubscription$inboundSchema;
    /** @deprecated use `PostUsersSigninDataUserSubscription$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataUserSubscription$outboundSchema;
    /** @deprecated use `PostUsersSigninDataUserSubscription$Outbound` instead. */
    export type Outbound = PostUsersSigninDataUserSubscription$Outbound;
}

/** @internal */
export const PostUsersSigninDataState$inboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataState
> = z.nativeEnum(PostUsersSigninDataState);

/** @internal */
export const PostUsersSigninDataState$outboundSchema: z.ZodNativeEnum<
    typeof PostUsersSigninDataState
> = PostUsersSigninDataState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataState$ {
    /** @deprecated use `PostUsersSigninDataState$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataState$inboundSchema;
    /** @deprecated use `PostUsersSigninDataState$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataState$outboundSchema;
}

/** @internal */
export const InternalPaymentMethod$inboundSchema: z.ZodType<
    InternalPaymentMethod,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type InternalPaymentMethod$Outbound = {};

/** @internal */
export const InternalPaymentMethod$outboundSchema: z.ZodType<
    InternalPaymentMethod$Outbound,
    z.ZodTypeDef,
    InternalPaymentMethod
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalPaymentMethod$ {
    /** @deprecated use `InternalPaymentMethod$inboundSchema` instead. */
    export const inboundSchema = InternalPaymentMethod$inboundSchema;
    /** @deprecated use `InternalPaymentMethod$outboundSchema` instead. */
    export const outboundSchema = InternalPaymentMethod$outboundSchema;
    /** @deprecated use `InternalPaymentMethod$Outbound` instead. */
    export type Outbound = InternalPaymentMethod$Outbound;
}

/** @internal */
export const Billing$inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown> = z.object({
    internalPaymentMethod: z.lazy(() => InternalPaymentMethod$inboundSchema),
    paymentMethodId: z.nullable(z.number().int()),
});

/** @internal */
export type Billing$Outbound = {
    internalPaymentMethod: InternalPaymentMethod$Outbound;
    paymentMethodId: number | null;
};

/** @internal */
export const Billing$outboundSchema: z.ZodType<Billing$Outbound, z.ZodTypeDef, Billing> = z.object({
    internalPaymentMethod: z.lazy(() => InternalPaymentMethod$outboundSchema),
    paymentMethodId: z.nullable(z.number().int()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Billing$ {
    /** @deprecated use `Billing$inboundSchema` instead. */
    export const inboundSchema = Billing$inboundSchema;
    /** @deprecated use `Billing$outboundSchema` instead. */
    export const outboundSchema = Billing$outboundSchema;
    /** @deprecated use `Billing$Outbound` instead. */
    export type Outbound = Billing$Outbound;
}

/** @internal */
export const PastSubscription$inboundSchema: z.ZodType<PastSubscription, z.ZodTypeDef, unknown> =
    z.object({
        id: z.nullable(z.string()),
        mode: z.nullable(z.string()),
        renewsAt: z.nullable(z.number().int()),
        endsAt: z.nullable(z.number().int()),
        canceled: z.boolean(),
        gracePeriod: z.boolean(),
        onHold: z.boolean(),
        canReactivate: z.boolean(),
        canUpgrade: z.boolean(),
        canDowngrade: z.boolean(),
        canConvert: z.boolean(),
        type: z.string(),
        transfer: z.nullable(z.string()),
        state: PostUsersSigninDataState$inboundSchema,
        billing: z.array(z.lazy(() => Billing$inboundSchema)),
    });

/** @internal */
export type PastSubscription$Outbound = {
    id: string | null;
    mode: string | null;
    renewsAt: number | null;
    endsAt: number | null;
    canceled: boolean;
    gracePeriod: boolean;
    onHold: boolean;
    canReactivate: boolean;
    canUpgrade: boolean;
    canDowngrade: boolean;
    canConvert: boolean;
    type: string;
    transfer: string | null;
    state: string;
    billing: Array<Billing$Outbound>;
};

/** @internal */
export const PastSubscription$outboundSchema: z.ZodType<
    PastSubscription$Outbound,
    z.ZodTypeDef,
    PastSubscription
> = z.object({
    id: z.nullable(z.string()),
    mode: z.nullable(z.string()),
    renewsAt: z.nullable(z.number().int()),
    endsAt: z.nullable(z.number().int()),
    canceled: z.boolean().default(false),
    gracePeriod: z.boolean().default(false),
    onHold: z.boolean().default(false),
    canReactivate: z.boolean().default(false),
    canUpgrade: z.boolean().default(false),
    canDowngrade: z.boolean().default(false),
    canConvert: z.boolean().default(false),
    type: z.string(),
    transfer: z.nullable(z.string()),
    state: PostUsersSigninDataState$outboundSchema,
    billing: z.array(z.lazy(() => Billing$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PastSubscription$ {
    /** @deprecated use `PastSubscription$inboundSchema` instead. */
    export const inboundSchema = PastSubscription$inboundSchema;
    /** @deprecated use `PastSubscription$outboundSchema` instead. */
    export const outboundSchema = PastSubscription$outboundSchema;
    /** @deprecated use `PastSubscription$Outbound` instead. */
    export type Outbound = PastSubscription$Outbound;
}

/** @internal */
export const Trials$inboundSchema: z.ZodType<Trials, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Trials$Outbound = {};

/** @internal */
export const Trials$outboundSchema: z.ZodType<Trials$Outbound, z.ZodTypeDef, Trials> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trials$ {
    /** @deprecated use `Trials$inboundSchema` instead. */
    export const inboundSchema = Trials$inboundSchema;
    /** @deprecated use `Trials$outboundSchema` instead. */
    export const outboundSchema = Trials$outboundSchema;
    /** @deprecated use `Trials$Outbound` instead. */
    export type Outbound = Trials$Outbound;
}

/** @internal */
export const PostUsersSigninDataUserPlexAccount$inboundSchema: z.ZodType<
    PostUsersSigninDataUserPlexAccount,
    z.ZodTypeDef,
    unknown
> = z.object({
    adsConsent: z.nullable(z.boolean()),
    adsConsentReminderAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    adsConsentSetAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    anonymous: z.boolean(),
    authToken: z.string(),
    backupCodesCreated: z.boolean(),
    confirmed: z.boolean(),
    country: z.string(),
    email: z.string(),
    emailOnlyAuth: z.boolean(),
    experimentalFeatures: z.boolean(),
    friendlyName: z.string(),
    entitlements: z.array(z.string()),
    guest: z.boolean(),
    hasPassword: z.boolean().default(true),
    home: z.boolean(),
    homeAdmin: z.boolean(),
    homeSize: z.number().int(),
    id: z.number().int(),
    joinedAt: z.number().int(),
    locale: z.nullable(z.string()),
    mailingListActive: z.boolean(),
    mailingListStatus: PostUsersSigninDataMailingListStatus$inboundSchema,
    maxHomeSize: z.number().int(),
    pin: z.string().optional(),
    profile: z.array(z.lazy(() => PostUsersSigninDataUserProfile$inboundSchema)),
    protected: z.boolean(),
    rememberExpiresAt: z.number().int(),
    restricted: z.boolean(),
    roles: z.array(z.string()).optional(),
    scrobbleTypes: z.string(),
    services: z.array(z.lazy(() => PostUsersSigninDataServices$inboundSchema)),
    subscription: z.lazy(() => PostUsersSigninDataSubscription$inboundSchema),
    subscriptionDescription: z.nullable(z.string()),
    subscriptions: z.array(z.lazy(() => PostUsersSigninDataUserSubscription$inboundSchema)),
    thumb: z.string(),
    title: z.string(),
    twoFactorEnabled: z.boolean(),
    username: z.string(),
    uuid: z.string(),
    pastSubscriptions: z.array(z.lazy(() => PastSubscription$inboundSchema)),
    trials: z.array(z.lazy(() => Trials$inboundSchema)),
});

/** @internal */
export type PostUsersSigninDataUserPlexAccount$Outbound = {
    adsConsent: boolean | null;
    adsConsentReminderAt: string | null;
    adsConsentSetAt: string | null;
    anonymous: boolean;
    authToken: string;
    backupCodesCreated: boolean;
    confirmed: boolean;
    country: string;
    email: string;
    emailOnlyAuth: boolean;
    experimentalFeatures: boolean;
    friendlyName: string;
    entitlements: Array<string>;
    guest: boolean;
    hasPassword: boolean;
    home: boolean;
    homeAdmin: boolean;
    homeSize: number;
    id: number;
    joinedAt: number;
    locale: string | null;
    mailingListActive: boolean;
    mailingListStatus: string;
    maxHomeSize: number;
    pin?: string | undefined;
    profile: Array<PostUsersSigninDataUserProfile$Outbound>;
    protected: boolean;
    rememberExpiresAt: number;
    restricted: boolean;
    roles?: Array<string> | undefined;
    scrobbleTypes: string;
    services: Array<PostUsersSigninDataServices$Outbound>;
    subscription: PostUsersSigninDataSubscription$Outbound;
    subscriptionDescription: string | null;
    subscriptions: Array<PostUsersSigninDataUserSubscription$Outbound>;
    thumb: string;
    title: string;
    twoFactorEnabled: boolean;
    username: string;
    uuid: string;
    pastSubscriptions: Array<PastSubscription$Outbound>;
    trials: Array<Trials$Outbound>;
};

/** @internal */
export const PostUsersSigninDataUserPlexAccount$outboundSchema: z.ZodType<
    PostUsersSigninDataUserPlexAccount$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataUserPlexAccount
> = z.object({
    adsConsent: z.nullable(z.boolean()),
    adsConsentReminderAt: z.nullable(z.date().transform((v) => v.toISOString())),
    adsConsentSetAt: z.nullable(z.date().transform((v) => v.toISOString())),
    anonymous: z.boolean().default(false),
    authToken: z.string(),
    backupCodesCreated: z.boolean().default(false),
    confirmed: z.boolean().default(false),
    country: z.string(),
    email: z.string(),
    emailOnlyAuth: z.boolean().default(false),
    experimentalFeatures: z.boolean().default(false),
    friendlyName: z.string(),
    entitlements: z.array(z.string()),
    guest: z.boolean().default(false),
    hasPassword: z.boolean().default(true),
    home: z.boolean().default(false),
    homeAdmin: z.boolean().default(false),
    homeSize: z.number().int(),
    id: z.number().int(),
    joinedAt: z.number().int(),
    locale: z.nullable(z.string()),
    mailingListActive: z.boolean().default(false),
    mailingListStatus: PostUsersSigninDataMailingListStatus$outboundSchema,
    maxHomeSize: z.number().int(),
    pin: z.string().optional(),
    profile: z.array(z.lazy(() => PostUsersSigninDataUserProfile$outboundSchema)),
    protected: z.boolean().default(false),
    rememberExpiresAt: z.number().int(),
    restricted: z.boolean().default(false),
    roles: z.array(z.string()).optional(),
    scrobbleTypes: z.string(),
    services: z.array(z.lazy(() => PostUsersSigninDataServices$outboundSchema)),
    subscription: z.lazy(() => PostUsersSigninDataSubscription$outboundSchema),
    subscriptionDescription: z.nullable(z.string()),
    subscriptions: z.array(z.lazy(() => PostUsersSigninDataUserSubscription$outboundSchema)),
    thumb: z.string(),
    title: z.string(),
    twoFactorEnabled: z.boolean().default(false),
    username: z.string(),
    uuid: z.string(),
    pastSubscriptions: z.array(z.lazy(() => PastSubscription$outboundSchema)),
    trials: z.array(z.lazy(() => Trials$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataUserPlexAccount$ {
    /** @deprecated use `PostUsersSigninDataUserPlexAccount$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataUserPlexAccount$inboundSchema;
    /** @deprecated use `PostUsersSigninDataUserPlexAccount$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataUserPlexAccount$outboundSchema;
    /** @deprecated use `PostUsersSigninDataUserPlexAccount$Outbound` instead. */
    export type Outbound = PostUsersSigninDataUserPlexAccount$Outbound;
}

/** @internal */
export const PostUsersSigninDataResponse$inboundSchema: z.ZodType<
    PostUsersSigninDataResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        UserPlexAccount: z.lazy(() => PostUsersSigninDataUserPlexAccount$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            UserPlexAccount: "userPlexAccount",
        });
    });

/** @internal */
export type PostUsersSigninDataResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    UserPlexAccount?: PostUsersSigninDataUserPlexAccount$Outbound | undefined;
};

/** @internal */
export const PostUsersSigninDataResponse$outboundSchema: z.ZodType<
    PostUsersSigninDataResponse$Outbound,
    z.ZodTypeDef,
    PostUsersSigninDataResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        userPlexAccount: z.lazy(() => PostUsersSigninDataUserPlexAccount$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            userPlexAccount: "UserPlexAccount",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUsersSigninDataResponse$ {
    /** @deprecated use `PostUsersSigninDataResponse$inboundSchema` instead. */
    export const inboundSchema = PostUsersSigninDataResponse$inboundSchema;
    /** @deprecated use `PostUsersSigninDataResponse$outboundSchema` instead. */
    export const outboundSchema = PostUsersSigninDataResponse$outboundSchema;
    /** @deprecated use `PostUsersSigninDataResponse$Outbound` instead. */
    export type Outbound = PostUsersSigninDataResponse$Outbound;
}
