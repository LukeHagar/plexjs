/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetServerIdentityErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetServerIdentityServerResponseBodyData = {
    errors?: Array<GetServerIdentityErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetServerIdentityServerResponseBody extends Error {
    errors?: Array<GetServerIdentityErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetServerIdentityServerResponseBodyData;

    constructor(err: GetServerIdentityServerResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetServerIdentityServerResponseBody";
    }
}

export type GetServerIdentityMediaContainer = {
    size?: number | undefined;
    claimed?: boolean | undefined;
    machineIdentifier?: string | undefined;
    version?: string | undefined;
};

/**
 * The Server Identity information
 */
export type GetServerIdentityResponseBody = {
    mediaContainer?: GetServerIdentityMediaContainer | undefined;
};

export type GetServerIdentityResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The Server Identity information
     */
    object?: GetServerIdentityResponseBody | undefined;
};

/** @internal */
export const GetServerIdentityErrors$inboundSchema: z.ZodType<
    GetServerIdentityErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type GetServerIdentityErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetServerIdentityErrors$outboundSchema: z.ZodType<
    GetServerIdentityErrors$Outbound,
    z.ZodTypeDef,
    GetServerIdentityErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerIdentityErrors$ {
    /** @deprecated use `GetServerIdentityErrors$inboundSchema` instead. */
    export const inboundSchema = GetServerIdentityErrors$inboundSchema;
    /** @deprecated use `GetServerIdentityErrors$outboundSchema` instead. */
    export const outboundSchema = GetServerIdentityErrors$outboundSchema;
    /** @deprecated use `GetServerIdentityErrors$Outbound` instead. */
    export type Outbound = GetServerIdentityErrors$Outbound;
}

/** @internal */
export const GetServerIdentityServerResponseBody$inboundSchema: z.ZodType<
    GetServerIdentityServerResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetServerIdentityErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetServerIdentityServerResponseBody(remapped);
    });

/** @internal */
export type GetServerIdentityServerResponseBody$Outbound = {
    errors?: Array<GetServerIdentityErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetServerIdentityServerResponseBody$outboundSchema: z.ZodType<
    GetServerIdentityServerResponseBody$Outbound,
    z.ZodTypeDef,
    GetServerIdentityServerResponseBody
> = z
    .instanceof(GetServerIdentityServerResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetServerIdentityErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerIdentityServerResponseBody$ {
    /** @deprecated use `GetServerIdentityServerResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetServerIdentityServerResponseBody$inboundSchema;
    /** @deprecated use `GetServerIdentityServerResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetServerIdentityServerResponseBody$outboundSchema;
    /** @deprecated use `GetServerIdentityServerResponseBody$Outbound` instead. */
    export type Outbound = GetServerIdentityServerResponseBody$Outbound;
}

/** @internal */
export const GetServerIdentityMediaContainer$inboundSchema: z.ZodType<
    GetServerIdentityMediaContainer,
    z.ZodTypeDef,
    unknown
> = z.object({
    size: z.number().optional(),
    claimed: z.boolean().optional(),
    machineIdentifier: z.string().optional(),
    version: z.string().optional(),
});

/** @internal */
export type GetServerIdentityMediaContainer$Outbound = {
    size?: number | undefined;
    claimed?: boolean | undefined;
    machineIdentifier?: string | undefined;
    version?: string | undefined;
};

/** @internal */
export const GetServerIdentityMediaContainer$outboundSchema: z.ZodType<
    GetServerIdentityMediaContainer$Outbound,
    z.ZodTypeDef,
    GetServerIdentityMediaContainer
> = z.object({
    size: z.number().optional(),
    claimed: z.boolean().optional(),
    machineIdentifier: z.string().optional(),
    version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerIdentityMediaContainer$ {
    /** @deprecated use `GetServerIdentityMediaContainer$inboundSchema` instead. */
    export const inboundSchema = GetServerIdentityMediaContainer$inboundSchema;
    /** @deprecated use `GetServerIdentityMediaContainer$outboundSchema` instead. */
    export const outboundSchema = GetServerIdentityMediaContainer$outboundSchema;
    /** @deprecated use `GetServerIdentityMediaContainer$Outbound` instead. */
    export type Outbound = GetServerIdentityMediaContainer$Outbound;
}

/** @internal */
export const GetServerIdentityResponseBody$inboundSchema: z.ZodType<
    GetServerIdentityResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        MediaContainer: z.lazy(() => GetServerIdentityMediaContainer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            MediaContainer: "mediaContainer",
        });
    });

/** @internal */
export type GetServerIdentityResponseBody$Outbound = {
    MediaContainer?: GetServerIdentityMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetServerIdentityResponseBody$outboundSchema: z.ZodType<
    GetServerIdentityResponseBody$Outbound,
    z.ZodTypeDef,
    GetServerIdentityResponseBody
> = z
    .object({
        mediaContainer: z.lazy(() => GetServerIdentityMediaContainer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            mediaContainer: "MediaContainer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerIdentityResponseBody$ {
    /** @deprecated use `GetServerIdentityResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetServerIdentityResponseBody$inboundSchema;
    /** @deprecated use `GetServerIdentityResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetServerIdentityResponseBody$outboundSchema;
    /** @deprecated use `GetServerIdentityResponseBody$Outbound` instead. */
    export type Outbound = GetServerIdentityResponseBody$Outbound;
}

/** @internal */
export const GetServerIdentityResponse$inboundSchema: z.ZodType<
    GetServerIdentityResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        object: z.lazy(() => GetServerIdentityResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetServerIdentityResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: GetServerIdentityResponseBody$Outbound | undefined;
};

/** @internal */
export const GetServerIdentityResponse$outboundSchema: z.ZodType<
    GetServerIdentityResponse$Outbound,
    z.ZodTypeDef,
    GetServerIdentityResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        object: z.lazy(() => GetServerIdentityResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerIdentityResponse$ {
    /** @deprecated use `GetServerIdentityResponse$inboundSchema` instead. */
    export const inboundSchema = GetServerIdentityResponse$inboundSchema;
    /** @deprecated use `GetServerIdentityResponse$outboundSchema` instead. */
    export const outboundSchema = GetServerIdentityResponse$outboundSchema;
    /** @deprecated use `GetServerIdentityResponse$Outbound` instead. */
    export type Outbound = GetServerIdentityResponse$Outbound;
}
