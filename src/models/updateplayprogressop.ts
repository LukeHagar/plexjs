/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

export type UpdatePlayProgressRequest = {
    /**
     * the media key
     */
    key: string;
    /**
     * The time, in milliseconds, used to set the media playback progress.
     */
    time: number;
    /**
     * The playback state of the media item.
     */
    state: string;
};

export type UpdatePlayProgressErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type UpdatePlayProgressResponseBodyData = {
    errors?: Array<UpdatePlayProgressErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class UpdatePlayProgressResponseBody extends Error {
    errors?: Array<UpdatePlayProgressErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: UpdatePlayProgressResponseBodyData;

    constructor(err: UpdatePlayProgressResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "UpdatePlayProgressResponseBody";
    }
}

export type UpdatePlayProgressResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdatePlayProgressRequest$ {
    export const inboundSchema: z.ZodType<UpdatePlayProgressRequest, z.ZodTypeDef, unknown> =
        z.object({
            key: z.string(),
            time: z.number(),
            state: z.string(),
        });

    export type Outbound = {
        key: string;
        time: number;
        state: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlayProgressRequest> =
        z.object({
            key: z.string(),
            time: z.number(),
            state: z.string(),
        });
}

/** @internal */
export namespace UpdatePlayProgressErrors$ {
    export const inboundSchema: z.ZodType<UpdatePlayProgressErrors, z.ZodTypeDef, unknown> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlayProgressErrors> =
        z.object({
            code: z.number().optional(),
            message: z.string().optional(),
            status: z.number().optional(),
        });
}

/** @internal */
export namespace UpdatePlayProgressResponseBody$ {
    export const inboundSchema: z.ZodType<UpdatePlayProgressResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.array(z.lazy(() => UpdatePlayProgressErrors$.inboundSchema)).optional(),
            RawResponse: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new UpdatePlayProgressResponseBody(remapped);
        });

    export type Outbound = {
        errors?: Array<UpdatePlayProgressErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlayProgressResponseBody> =
        z
            .instanceof(UpdatePlayProgressResponseBody)
            .transform((v) => v.data$)
            .pipe(
                z
                    .object({
                        errors: z
                            .array(z.lazy(() => UpdatePlayProgressErrors$.outboundSchema))
                            .optional(),
                        rawResponse: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                    })
                    .transform((v) => {
                        return remap$(v, {
                            rawResponse: "RawResponse",
                        });
                    })
            );
}

/** @internal */
export namespace UpdatePlayProgressResponse$ {
    export const inboundSchema: z.ZodType<UpdatePlayProgressResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlayProgressResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
