/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetSessionsErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetSessionsSessionsResponseBodyData = {
    errors?: Array<GetSessionsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetSessionsSessionsResponseBody extends Error {
    errors?: Array<GetSessionsErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSessionsSessionsResponseBodyData;

    constructor(err: GetSessionsSessionsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "GetSessionsSessionsResponseBody";
    }
}

export type GetSessionsStream = {
    albumGain?: string | undefined;
    albumPeak?: string | undefined;
    albumRange?: string | undefined;
    audioChannelLayout?: string | undefined;
    bitDepth?: number | undefined;
    bitrate?: number | undefined;
    channels?: number | undefined;
    codec?: string | undefined;
    displayTitle?: string | undefined;
    extendedDisplayTitle?: string | undefined;
    gain?: string | undefined;
    id?: string | undefined;
    index?: number | undefined;
    loudness?: string | undefined;
    lra?: string | undefined;
    peak?: string | undefined;
    samplingRate?: number | undefined;
    selected?: boolean | undefined;
    streamType?: number | undefined;
    location?: string | undefined;
};

export type GetSessionsPart = {
    container?: string | undefined;
    duration?: number | undefined;
    file?: string | undefined;
    hasThumbnail?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    size?: number | undefined;
    decision?: string | undefined;
    selected?: boolean | undefined;
    stream?: Array<GetSessionsStream> | undefined;
};

export type GetSessionsMedia = {
    audioChannels?: number | undefined;
    audioCodec?: string | undefined;
    bitrate?: number | undefined;
    container?: string | undefined;
    duration?: number | undefined;
    id?: string | undefined;
    selected?: boolean | undefined;
    part?: Array<GetSessionsPart> | undefined;
};

export type GetSessionsUser = {
    id?: string | undefined;
    thumb?: string | undefined;
    title?: string | undefined;
};

export type Player = {
    address?: string | undefined;
    machineIdentifier?: string | undefined;
    model?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    product?: string | undefined;
    profile?: string | undefined;
    remotePublicAddress?: string | undefined;
    state?: string | undefined;
    title?: string | undefined;
    version?: string | undefined;
    local?: boolean | undefined;
    relayed?: boolean | undefined;
    secure?: boolean | undefined;
    userID?: number | undefined;
};

export type Session = {
    id?: string | undefined;
    bandwidth?: number | undefined;
    location?: string | undefined;
};

export type GetSessionsMetadata = {
    addedAt?: number | undefined;
    art?: string | undefined;
    duration?: number | undefined;
    grandparentArt?: string | undefined;
    grandparentGuid?: string | undefined;
    grandparentKey?: string | undefined;
    grandparentRatingKey?: string | undefined;
    grandparentThumb?: string | undefined;
    grandparentTitle?: string | undefined;
    guid?: string | undefined;
    index?: number | undefined;
    key?: string | undefined;
    librarySectionID?: string | undefined;
    librarySectionKey?: string | undefined;
    librarySectionTitle?: string | undefined;
    musicAnalysisVersion?: string | undefined;
    parentGuid?: string | undefined;
    parentIndex?: number | undefined;
    parentKey?: string | undefined;
    parentRatingKey?: string | undefined;
    parentStudio?: string | undefined;
    parentThumb?: string | undefined;
    parentTitle?: string | undefined;
    parentYear?: number | undefined;
    ratingCount?: number | undefined;
    ratingKey?: string | undefined;
    sessionKey?: string | undefined;
    thumb?: string | undefined;
    title?: string | undefined;
    titleSort?: string | undefined;
    type?: string | undefined;
    updatedAt?: number | undefined;
    viewOffset?: number | undefined;
    media?: Array<GetSessionsMedia> | undefined;
    user?: GetSessionsUser | undefined;
    player?: Player | undefined;
    session?: Session | undefined;
};

export type GetSessionsMediaContainer = {
    size?: number | undefined;
    metadata?: Array<GetSessionsMetadata> | undefined;
};

/**
 * List of Active Plex Sessions
 */
export type GetSessionsResponseBody = {
    mediaContainer?: GetSessionsMediaContainer | undefined;
};

export type GetSessionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of Active Plex Sessions
     */
    object?: GetSessionsResponseBody | undefined;
};

/** @internal */
export namespace GetSessionsErrors$ {
    export const inboundSchema: z.ZodType<GetSessionsErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });

    export type Outbound = {
        code?: number | undefined;
        message?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsErrors> = z.object({
        code: z.number().optional(),
        message: z.string().optional(),
        status: z.number().optional(),
    });
}

/** @internal */
export namespace GetSessionsSessionsResponseBody$ {
    export const inboundSchema: z.ZodType<GetSessionsSessionsResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                errors: z.array(z.lazy(() => GetSessionsErrors$.inboundSchema)).optional(),
                RawResponse: z.instanceof(Response).optional(),
            })
            .transform((v) => {
                const remapped = remap$(v, {
                    RawResponse: "rawResponse",
                });

                return new GetSessionsSessionsResponseBody(remapped);
            });

    export type Outbound = {
        errors?: Array<GetSessionsErrors$.Outbound> | undefined;
        RawResponse?: never | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSessionsSessionsResponseBody
    > = z
        .instanceof(GetSessionsSessionsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.lazy(() => GetSessionsErrors$.outboundSchema)).optional(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}

/** @internal */
export namespace GetSessionsStream$ {
    export const inboundSchema: z.ZodType<GetSessionsStream, z.ZodTypeDef, unknown> = z.object({
        albumGain: z.string().optional(),
        albumPeak: z.string().optional(),
        albumRange: z.string().optional(),
        audioChannelLayout: z.string().optional(),
        bitDepth: z.number().int().optional(),
        bitrate: z.number().int().optional(),
        channels: z.number().int().optional(),
        codec: z.string().optional(),
        displayTitle: z.string().optional(),
        extendedDisplayTitle: z.string().optional(),
        gain: z.string().optional(),
        id: z.string().optional(),
        index: z.number().int().optional(),
        loudness: z.string().optional(),
        lra: z.string().optional(),
        peak: z.string().optional(),
        samplingRate: z.number().int().optional(),
        selected: z.boolean().optional(),
        streamType: z.number().int().optional(),
        location: z.string().optional(),
    });

    export type Outbound = {
        albumGain?: string | undefined;
        albumPeak?: string | undefined;
        albumRange?: string | undefined;
        audioChannelLayout?: string | undefined;
        bitDepth?: number | undefined;
        bitrate?: number | undefined;
        channels?: number | undefined;
        codec?: string | undefined;
        displayTitle?: string | undefined;
        extendedDisplayTitle?: string | undefined;
        gain?: string | undefined;
        id?: string | undefined;
        index?: number | undefined;
        loudness?: string | undefined;
        lra?: string | undefined;
        peak?: string | undefined;
        samplingRate?: number | undefined;
        selected?: boolean | undefined;
        streamType?: number | undefined;
        location?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsStream> = z.object({
        albumGain: z.string().optional(),
        albumPeak: z.string().optional(),
        albumRange: z.string().optional(),
        audioChannelLayout: z.string().optional(),
        bitDepth: z.number().int().optional(),
        bitrate: z.number().int().optional(),
        channels: z.number().int().optional(),
        codec: z.string().optional(),
        displayTitle: z.string().optional(),
        extendedDisplayTitle: z.string().optional(),
        gain: z.string().optional(),
        id: z.string().optional(),
        index: z.number().int().optional(),
        loudness: z.string().optional(),
        lra: z.string().optional(),
        peak: z.string().optional(),
        samplingRate: z.number().int().optional(),
        selected: z.boolean().optional(),
        streamType: z.number().int().optional(),
        location: z.string().optional(),
    });
}

/** @internal */
export namespace GetSessionsPart$ {
    export const inboundSchema: z.ZodType<GetSessionsPart, z.ZodTypeDef, unknown> = z
        .object({
            container: z.string().optional(),
            duration: z.number().int().optional(),
            file: z.string().optional(),
            hasThumbnail: z.string().optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            size: z.number().int().optional(),
            decision: z.string().optional(),
            selected: z.boolean().optional(),
            Stream: z.array(z.lazy(() => GetSessionsStream$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Stream: "stream",
            });
        });

    export type Outbound = {
        container?: string | undefined;
        duration?: number | undefined;
        file?: string | undefined;
        hasThumbnail?: string | undefined;
        id?: string | undefined;
        key?: string | undefined;
        size?: number | undefined;
        decision?: string | undefined;
        selected?: boolean | undefined;
        Stream?: Array<GetSessionsStream$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsPart> = z
        .object({
            container: z.string().optional(),
            duration: z.number().int().optional(),
            file: z.string().optional(),
            hasThumbnail: z.string().optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            size: z.number().int().optional(),
            decision: z.string().optional(),
            selected: z.boolean().optional(),
            stream: z.array(z.lazy(() => GetSessionsStream$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                stream: "Stream",
            });
        });
}

/** @internal */
export namespace GetSessionsMedia$ {
    export const inboundSchema: z.ZodType<GetSessionsMedia, z.ZodTypeDef, unknown> = z
        .object({
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            bitrate: z.number().int().optional(),
            container: z.string().optional(),
            duration: z.number().int().optional(),
            id: z.string().optional(),
            selected: z.boolean().optional(),
            Part: z.array(z.lazy(() => GetSessionsPart$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Part: "part",
            });
        });

    export type Outbound = {
        audioChannels?: number | undefined;
        audioCodec?: string | undefined;
        bitrate?: number | undefined;
        container?: string | undefined;
        duration?: number | undefined;
        id?: string | undefined;
        selected?: boolean | undefined;
        Part?: Array<GetSessionsPart$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsMedia> = z
        .object({
            audioChannels: z.number().int().optional(),
            audioCodec: z.string().optional(),
            bitrate: z.number().int().optional(),
            container: z.string().optional(),
            duration: z.number().int().optional(),
            id: z.string().optional(),
            selected: z.boolean().optional(),
            part: z.array(z.lazy(() => GetSessionsPart$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                part: "Part",
            });
        });
}

/** @internal */
export namespace GetSessionsUser$ {
    export const inboundSchema: z.ZodType<GetSessionsUser, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        thumb: z.string().optional(),
        title: z.string().optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        thumb?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsUser> = z.object({
        id: z.string().optional(),
        thumb: z.string().optional(),
        title: z.string().optional(),
    });
}

/** @internal */
export namespace Player$ {
    export const inboundSchema: z.ZodType<Player, z.ZodTypeDef, unknown> = z.object({
        address: z.string().optional(),
        machineIdentifier: z.string().optional(),
        model: z.string().optional(),
        platform: z.string().optional(),
        platformVersion: z.string().optional(),
        product: z.string().optional(),
        profile: z.string().optional(),
        remotePublicAddress: z.string().optional(),
        state: z.string().optional(),
        title: z.string().optional(),
        version: z.string().optional(),
        local: z.boolean().optional(),
        relayed: z.boolean().optional(),
        secure: z.boolean().optional(),
        userID: z.number().int().optional(),
    });

    export type Outbound = {
        address?: string | undefined;
        machineIdentifier?: string | undefined;
        model?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        product?: string | undefined;
        profile?: string | undefined;
        remotePublicAddress?: string | undefined;
        state?: string | undefined;
        title?: string | undefined;
        version?: string | undefined;
        local?: boolean | undefined;
        relayed?: boolean | undefined;
        secure?: boolean | undefined;
        userID?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Player> = z.object({
        address: z.string().optional(),
        machineIdentifier: z.string().optional(),
        model: z.string().optional(),
        platform: z.string().optional(),
        platformVersion: z.string().optional(),
        product: z.string().optional(),
        profile: z.string().optional(),
        remotePublicAddress: z.string().optional(),
        state: z.string().optional(),
        title: z.string().optional(),
        version: z.string().optional(),
        local: z.boolean().optional(),
        relayed: z.boolean().optional(),
        secure: z.boolean().optional(),
        userID: z.number().int().optional(),
    });
}

/** @internal */
export namespace Session$ {
    export const inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        bandwidth: z.number().int().optional(),
        location: z.string().optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        bandwidth?: number | undefined;
        location?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Session> = z.object({
        id: z.string().optional(),
        bandwidth: z.number().int().optional(),
        location: z.string().optional(),
    });
}

/** @internal */
export namespace GetSessionsMetadata$ {
    export const inboundSchema: z.ZodType<GetSessionsMetadata, z.ZodTypeDef, unknown> = z
        .object({
            addedAt: z.number().int().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            grandparentArt: z.string().optional(),
            grandparentGuid: z.string().optional(),
            grandparentKey: z.string().optional(),
            grandparentRatingKey: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentTitle: z.string().optional(),
            guid: z.string().optional(),
            index: z.number().int().optional(),
            key: z.string().optional(),
            librarySectionID: z.string().optional(),
            librarySectionKey: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            musicAnalysisVersion: z.string().optional(),
            parentGuid: z.string().optional(),
            parentIndex: z.number().int().optional(),
            parentKey: z.string().optional(),
            parentRatingKey: z.string().optional(),
            parentStudio: z.string().optional(),
            parentThumb: z.string().optional(),
            parentTitle: z.string().optional(),
            parentYear: z.number().int().optional(),
            ratingCount: z.number().int().optional(),
            ratingKey: z.string().optional(),
            sessionKey: z.string().optional(),
            thumb: z.string().optional(),
            title: z.string().optional(),
            titleSort: z.string().optional(),
            type: z.string().optional(),
            updatedAt: z.number().int().optional(),
            viewOffset: z.number().int().optional(),
            Media: z.array(z.lazy(() => GetSessionsMedia$.inboundSchema)).optional(),
            User: z.lazy(() => GetSessionsUser$.inboundSchema).optional(),
            Player: z.lazy(() => Player$.inboundSchema).optional(),
            Session: z.lazy(() => Session$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Media: "media",
                User: "user",
                Player: "player",
                Session: "session",
            });
        });

    export type Outbound = {
        addedAt?: number | undefined;
        art?: string | undefined;
        duration?: number | undefined;
        grandparentArt?: string | undefined;
        grandparentGuid?: string | undefined;
        grandparentKey?: string | undefined;
        grandparentRatingKey?: string | undefined;
        grandparentThumb?: string | undefined;
        grandparentTitle?: string | undefined;
        guid?: string | undefined;
        index?: number | undefined;
        key?: string | undefined;
        librarySectionID?: string | undefined;
        librarySectionKey?: string | undefined;
        librarySectionTitle?: string | undefined;
        musicAnalysisVersion?: string | undefined;
        parentGuid?: string | undefined;
        parentIndex?: number | undefined;
        parentKey?: string | undefined;
        parentRatingKey?: string | undefined;
        parentStudio?: string | undefined;
        parentThumb?: string | undefined;
        parentTitle?: string | undefined;
        parentYear?: number | undefined;
        ratingCount?: number | undefined;
        ratingKey?: string | undefined;
        sessionKey?: string | undefined;
        thumb?: string | undefined;
        title?: string | undefined;
        titleSort?: string | undefined;
        type?: string | undefined;
        updatedAt?: number | undefined;
        viewOffset?: number | undefined;
        Media?: Array<GetSessionsMedia$.Outbound> | undefined;
        User?: GetSessionsUser$.Outbound | undefined;
        Player?: Player$.Outbound | undefined;
        Session?: Session$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsMetadata> = z
        .object({
            addedAt: z.number().int().optional(),
            art: z.string().optional(),
            duration: z.number().int().optional(),
            grandparentArt: z.string().optional(),
            grandparentGuid: z.string().optional(),
            grandparentKey: z.string().optional(),
            grandparentRatingKey: z.string().optional(),
            grandparentThumb: z.string().optional(),
            grandparentTitle: z.string().optional(),
            guid: z.string().optional(),
            index: z.number().int().optional(),
            key: z.string().optional(),
            librarySectionID: z.string().optional(),
            librarySectionKey: z.string().optional(),
            librarySectionTitle: z.string().optional(),
            musicAnalysisVersion: z.string().optional(),
            parentGuid: z.string().optional(),
            parentIndex: z.number().int().optional(),
            parentKey: z.string().optional(),
            parentRatingKey: z.string().optional(),
            parentStudio: z.string().optional(),
            parentThumb: z.string().optional(),
            parentTitle: z.string().optional(),
            parentYear: z.number().int().optional(),
            ratingCount: z.number().int().optional(),
            ratingKey: z.string().optional(),
            sessionKey: z.string().optional(),
            thumb: z.string().optional(),
            title: z.string().optional(),
            titleSort: z.string().optional(),
            type: z.string().optional(),
            updatedAt: z.number().int().optional(),
            viewOffset: z.number().int().optional(),
            media: z.array(z.lazy(() => GetSessionsMedia$.outboundSchema)).optional(),
            user: z.lazy(() => GetSessionsUser$.outboundSchema).optional(),
            player: z.lazy(() => Player$.outboundSchema).optional(),
            session: z.lazy(() => Session$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                media: "Media",
                user: "User",
                player: "Player",
                session: "Session",
            });
        });
}

/** @internal */
export namespace GetSessionsMediaContainer$ {
    export const inboundSchema: z.ZodType<GetSessionsMediaContainer, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number().int().optional(),
            Metadata: z.array(z.lazy(() => GetSessionsMetadata$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Metadata: "metadata",
            });
        });

    export type Outbound = {
        size?: number | undefined;
        Metadata?: Array<GetSessionsMetadata$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsMediaContainer> = z
        .object({
            size: z.number().int().optional(),
            metadata: z.array(z.lazy(() => GetSessionsMetadata$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                metadata: "Metadata",
            });
        });
}

/** @internal */
export namespace GetSessionsResponseBody$ {
    export const inboundSchema: z.ZodType<GetSessionsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            MediaContainer: z.lazy(() => GetSessionsMediaContainer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                MediaContainer: "mediaContainer",
            });
        });

    export type Outbound = {
        MediaContainer?: GetSessionsMediaContainer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsResponseBody> = z
        .object({
            mediaContainer: z.lazy(() => GetSessionsMediaContainer$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                mediaContainer: "MediaContainer",
            });
        });
}

/** @internal */
export namespace GetSessionsResponse$ {
    export const inboundSchema: z.ZodType<GetSessionsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetSessionsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetSessionsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSessionsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetSessionsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
