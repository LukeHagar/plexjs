/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PlexAPICore } from "../core.js";
import { encodeFormQuery as encodeFormQuery$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import * as errors from "../sdk/models/errors/index.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { Result } from "../sdk/types/fp.js";

/**
 * Start Universal Transcode
 *
 * @remarks
 * Begin a Universal Transcode Session
 */
export async function videoStartUniversalTranscode(
    client$: PlexAPICore,
    request: operations.StartUniversalTranscodeRequest,
    options?: RequestOptions
): Promise<
    Result<
        operations.StartUniversalTranscodeResponse,
        | errors.StartUniversalTranscodeResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => operations.StartUniversalTranscodeRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = null;

    const path$ = pathToFunc("/video/:/transcode/universal/start.mpd")();

    const query$ = encodeFormQuery$({
        addDebugOverlay: payload$.addDebugOverlay,
        audioBoost: payload$.audioBoost,
        autoAdjustQuality: payload$.autoAdjustQuality,
        directPlay: payload$.directPlay,
        directStream: payload$.directStream,
        fastSeek: payload$.fastSeek,
        hasMDE: payload$.hasMDE,
        location: payload$.location,
        mediaBufferSize: payload$.mediaBufferSize,
        mediaIndex: payload$.mediaIndex,
        partIndex: payload$.partIndex,
        path: payload$.path,
        protocol: payload$.protocol,
        session: payload$.session,
        subtites: payload$.subtites,
        subtitleSize: payload$.subtitleSize,
    });

    const headers$ = new Headers({
        Accept: "application/json",
    });

    const accessToken$ = await extractSecurity(client$.options$.accessToken);
    const security$ = accessToken$ == null ? {} : { accessToken: accessToken$ };
    const context = {
        operationID: "startUniversalTranscode",
        oAuth2Scopes: [],
        securitySource: client$.options$.accessToken,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const responseFields$ = {
        ContentType: response.headers.get("content-type") ?? "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };

    const [result$] = await m$.match<
        operations.StartUniversalTranscodeResponse,
        | errors.StartUniversalTranscodeResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.nil(200, operations.StartUniversalTranscodeResponse$inboundSchema),
        m$.fail([400, "4XX", "5XX"]),
        m$.jsonErr(401, errors.StartUniversalTranscodeResponseBody$inboundSchema)
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
