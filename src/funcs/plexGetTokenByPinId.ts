/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PlexAPICore } from "../core.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import { GetTokenByPinIdOpServerList } from "../models/gettokenbypinidop.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/httpclienterrors.js";
import * as models from "../models/index.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { Result } from "../types/fp.js";

/**
 * Get Access Token by PinId
 *
 * @remarks
 * Retrieve an Access Token from Plex.tv after the Pin has been authenticated
 */
export async function plexGetTokenByPinId(
    client$: PlexAPICore,
    pinID: number,
    xPlexClientIdentifier?: string | undefined,
    options?: RequestOptions & { serverURL?: string }
): Promise<
    Result<
        models.GetTokenByPinIdResponse,
        | models.GetTokenByPinIdResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$: models.GetTokenByPinIdRequest = {
        xPlexClientIdentifier: xPlexClientIdentifier,
        pinID: pinID,
    };

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => models.GetTokenByPinIdRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = null;

    const baseURL$ =
        options?.serverURL ||
        pathToFunc(GetTokenByPinIdOpServerList[0], { charEncoding: "percent" })();

    const pathParams$ = {
        pinID: encodeSimple$("pinID", payload$.pinID, { explode: false, charEncoding: "percent" }),
    };

    const path$ = pathToFunc("/pins/{pinID}")(pathParams$);

    const headers$ = new Headers({
        Accept: "application/json",
        "X-Plex-Client-Identifier": encodeSimple$(
            "X-Plex-Client-Identifier",
            payload$["X-Plex-Client-Identifier"] ?? client$.options$.xPlexClientIdentifier,
            { explode: false, charEncoding: "none" }
        ),
    });

    const context = { operationID: "getTokenByPinId", oAuth2Scopes: [], securitySource: null };

    const requestRes = client$.createRequest$(
        context,
        {
            method: "GET",
            baseURL: baseURL$,
            path: path$,
            headers: headers$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "404", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const responseFields$ = {
        ContentType: response.headers.get("content-type") ?? "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };

    const [result$] = await m$.match<
        models.GetTokenByPinIdResponse,
        | models.GetTokenByPinIdResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(200, models.GetTokenByPinIdResponse$inboundSchema, { key: "AuthPinContainer" }),
        m$.fail([400, "4XX", "5XX"]),
        m$.jsonErr(404, models.GetTokenByPinIdResponseBody$inboundSchema)
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
