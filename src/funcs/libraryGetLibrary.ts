/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PlexAPICore } from "../core.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/httpclienterrors.js";
import * as models from "../models/index.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { Result } from "../types/fp.js";

/**
 * Get Library Details
 *
 * @remarks
 * ## Library Details Endpoint
 *
 * This endpoint provides comprehensive details about the library, focusing on organizational aspects rather than the content itself.
 *
 * The details include:
 *
 * ### Directories
 * Organized into three categories:
 *
 * - **Primary Directories**:
 *   - Used in some clients for quick access to media subsets (e.g., "All", "On Deck").
 *   - Most can be replicated via media queries.
 *   - Customizable by users.
 *
 * - **Secondary Directories**:
 *   - Marked with `secondary="1"`.
 *   - Used in older clients for structured navigation.
 *
 * - **Special Directories**:
 *   - Includes a "By Folder" entry for filesystem-based browsing.
 *   - Contains an obsolete `search="1"` entry for on-the-fly search dialog creation.
 *
 * ### Types
 * Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:
 *
 * - **Type Object Attributes**:
 *   - `key`: Endpoint for the media list of this type.
 *   - `type`: Metadata type (if standard Plex type).
 *   - `title`: Title for this content type (e.g., "Movies").
 *
 * - **Filter Objects**:
 *   - Subset of the media query language.
 *   - Attributes include `filter` (name), `filterType` (data type), `key` (endpoint for value range), and `title`.
 *
 * - **Sort Objects**:
 *   - Description of sort fields.
 *   - Attributes include `defaultDirection` (asc/desc), `descKey` and `key` (sort parameters), and `title`.
 *
 * > **Note**: Filters and sorts are optional; without them, no filtering controls are rendered.
 *
 */
export async function libraryGetLibrary(
    client$: PlexAPICore,
    sectionId: number,
    includeDetails?: models.IncludeDetails | undefined,
    options?: RequestOptions
): Promise<
    Result<
        models.GetLibraryResponse,
        | models.GetLibraryLibraryResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$: models.GetLibraryRequest = {
        sectionId: sectionId,
        includeDetails: includeDetails,
    };

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => models.GetLibraryRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = null;

    const pathParams$ = {
        sectionId: encodeSimple$("sectionId", payload$.sectionId, {
            explode: false,
            charEncoding: "percent",
        }),
    };

    const path$ = pathToFunc("/library/sections/{sectionId}")(pathParams$);

    const query$ = encodeFormQuery$({
        includeDetails: payload$.includeDetails,
    });

    const headers$ = new Headers({
        Accept: "application/json",
    });

    const accessToken$ = await extractSecurity(client$.options$.accessToken);
    const security$ = accessToken$ == null ? {} : { accessToken: accessToken$ };
    const context = {
        operationID: "getLibrary",
        oAuth2Scopes: [],
        securitySource: client$.options$.accessToken,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const responseFields$ = {
        ContentType: response.headers.get("content-type") ?? "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };

    const [result$] = await m$.match<
        models.GetLibraryResponse,
        | models.GetLibraryLibraryResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(200, models.GetLibraryResponse$inboundSchema, { key: "object" }),
        m$.fail([400, "4XX", "5XX"]),
        m$.jsonErr(401, models.GetLibraryLibraryResponseBody$inboundSchema)
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
