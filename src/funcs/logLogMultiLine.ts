/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PlexAPICore } from "../core.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/httpclienterrors.js";
import * as models from "../models/index.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { Result } from "../types/fp.js";
import * as z from "zod";

/**
 * Logging a multi-line message
 *
 * @remarks
 * This endpoint allows for the batch addition of log entries to the main Plex Media Server log.
 * It accepts a text/plain request body, where each line represents a distinct log entry.
 * Each log entry consists of URL-encoded key-value pairs, specifying log attributes such as 'level', 'message', and 'source'.
 *
 * Log entries are separated by a newline character (`\n`).
 * Each entry's parameters should be URL-encoded to ensure accurate parsing and handling of special characters.
 * This method is efficient for logging multiple entries in a single API call, reducing the overhead of multiple individual requests.
 *
 * The 'level' parameter specifies the log entry's severity or importance, with the following integer values:
 * - `0`: Error - Critical issues that require immediate attention.
 * - `1`: Warning - Important events that are not critical but may indicate potential issues.
 * - `2`: Info - General informational messages about system operation.
 * - `3`: Debug - Detailed information useful for debugging purposes.
 * - `4`: Verbose - Highly detailed diagnostic information for in-depth analysis.
 *
 * The 'message' parameter contains the log text, and 'source' identifies the log message's origin (e.g., an application name or module).
 *
 * Example of a single log entry format:
 * `level=4&message=Sample%20log%20entry&source=applicationName`
 *
 * Ensure each parameter is properly URL-encoded to avoid interpretation issues.
 *
 */
export async function logLogMultiLine(
    client$: PlexAPICore,
    request: string,
    options?: RequestOptions
): Promise<
    Result<
        models.LogMultiLineResponse,
        | models.LogMultiLineResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => z.string().parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = payload$;

    const path$ = pathToFunc("/log")();

    const headers$ = new Headers({
        "Content-Type": "text/plain",
        Accept: "application/json",
    });

    const accessToken$ = await extractSecurity(client$.options$.accessToken);
    const security$ = accessToken$ == null ? {} : { accessToken: accessToken$ };
    const context = {
        operationID: "logMultiLine",
        oAuth2Scopes: [],
        securitySource: client$.options$.accessToken,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const responseFields$ = {
        ContentType: response.headers.get("content-type") ?? "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };

    const [result$] = await m$.match<
        models.LogMultiLineResponse,
        | models.LogMultiLineResponseBody
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.nil(200, models.LogMultiLineResponse$inboundSchema),
        m$.fail([400, "4XX", "5XX"]),
        m$.jsonErr(401, models.LogMultiLineResponseBody$inboundSchema)
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
