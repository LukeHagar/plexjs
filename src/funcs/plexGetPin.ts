/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PlexAPICore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import * as errors from "../sdk/models/errors/index.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import { GetPinServerList } from "../sdk/models/operations/getpin.js";
import * as operations from "../sdk/models/operations/index.js";
import { Result } from "../sdk/types/fp.js";

/**
 * Get a Pin
 *
 * @remarks
 * Retrieve a Pin ID from Plex.tv to use for authentication flows
 */
export async function plexGetPin(
  client: PlexAPICore,
  request: operations.GetPinRequest,
  options?: RequestOptions,
): Promise<
  Result<
    operations.GetPinResponse,
    | errors.GetPinBadRequest
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetPinRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const baseURL = options?.serverURL
    || pathToFunc(GetPinServerList[0], { charEncoding: "percent" })();

  const path = pathToFunc("/pins")();

  const query = encodeFormQuery({
    "strong": payload.strong,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
    "X-Plex-Client-Identifier": encodeSimple(
      "X-Plex-Client-Identifier",
      payload.ClientID,
      { explode: false, charEncoding: "none" },
    ),
    "X-Plex-Product": encodeSimple("X-Plex-Product", payload.ClientName, {
      explode: false,
      charEncoding: "none",
    }),
    "X-Plex-Version": encodeSimple("X-Plex-Version", payload.ClientVersion, {
      explode: false,
      charEncoding: "none",
    }),
    "X-Plex-Device": encodeSimple("X-Plex-Device", payload.DeviceNickname, {
      explode: false,
      charEncoding: "none",
    }),
    "X-Plex-Platform": encodeSimple("X-Plex-Platform", payload.Platform, {
      explode: false,
      charEncoding: "none",
    }),
  }));

  const context = {
    operationID: "getPin",
    oAuth2Scopes: [],

    resolvedSecurity: null,

    securitySource: null,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    method: "POST",
    baseURL: baseURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    ContentType: response.headers.get("content-type")
      ?? "application/octet-stream",
    StatusCode: response.status,
    RawResponse: response,
    Headers: {},
  };

  const [result] = await M.match<
    operations.GetPinResponse,
    | errors.GetPinBadRequest
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(201, operations.GetPinResponse$inboundSchema, {
      key: "AuthPinContainer",
    }),
    M.jsonErr(400, errors.GetPinBadRequest$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
