/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { libraryDeleteLibrary } from "../funcs/libraryDeleteLibrary.js";
import { libraryGetFileHash } from "../funcs/libraryGetFileHash.js";
import { libraryGetLibraries } from "../funcs/libraryGetLibraries.js";
import { libraryGetLibrary } from "../funcs/libraryGetLibrary.js";
import { libraryGetLibraryItems } from "../funcs/libraryGetLibraryItems.js";
import { libraryGetMetadata } from "../funcs/libraryGetMetadata.js";
import { libraryGetMetadataChildren } from "../funcs/libraryGetMetadataChildren.js";
import { libraryGetOnDeck } from "../funcs/libraryGetOnDeck.js";
import { libraryGetRecentlyAdded } from "../funcs/libraryGetRecentlyAdded.js";
import { libraryGetTopWatchedContent } from "../funcs/libraryGetTopWatchedContent.js";
import { libraryRefreshLibrary } from "../funcs/libraryRefreshLibrary.js";
import { librarySearchLibrary } from "../funcs/librarySearchLibrary.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Library extends ClientSDK {
    /**
     * Get Hash Value
     *
     * @remarks
     * This resource returns hash values for local files
     */
    async getFileHash(
        url: string,
        type?: number | undefined,
        options?: RequestOptions
    ): Promise<models.GetFileHashResponse> {
        return unwrapAsync(libraryGetFileHash(this, url, type, options));
    }

    /**
     * Get Recently Added
     *
     * @remarks
     * This endpoint will return the recently added content.
     *
     */
    async getRecentlyAdded(options?: RequestOptions): Promise<models.GetRecentlyAddedResponse> {
        return unwrapAsync(libraryGetRecentlyAdded(this, options));
    }

    /**
     * Get All Libraries
     *
     * @remarks
     * A library section (commonly referred to as just a library) is a collection of media.
     * Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.
     * For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.
     *
     * Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.
     * This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     *
     */
    async getLibraries(options?: RequestOptions): Promise<models.GetLibrariesResponse> {
        return unwrapAsync(libraryGetLibraries(this, options));
    }

    /**
     * Get Library Details
     *
     * @remarks
     * ## Library Details Endpoint
     *
     * This endpoint provides comprehensive details about the library, focusing on organizational aspects rather than the content itself.
     *
     * The details include:
     *
     * ### Directories
     * Organized into three categories:
     *
     * - **Primary Directories**:
     *   - Used in some clients for quick access to media subsets (e.g., "All", "On Deck").
     *   - Most can be replicated via media queries.
     *   - Customizable by users.
     *
     * - **Secondary Directories**:
     *   - Marked with `secondary="1"`.
     *   - Used in older clients for structured navigation.
     *
     * - **Special Directories**:
     *   - Includes a "By Folder" entry for filesystem-based browsing.
     *   - Contains an obsolete `search="1"` entry for on-the-fly search dialog creation.
     *
     * ### Types
     * Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:
     *
     * - **Type Object Attributes**:
     *   - `key`: Endpoint for the media list of this type.
     *   - `type`: Metadata type (if standard Plex type).
     *   - `title`: Title for this content type (e.g., "Movies").
     *
     * - **Filter Objects**:
     *   - Subset of the media query language.
     *   - Attributes include `filter` (name), `filterType` (data type), `key` (endpoint for value range), and `title`.
     *
     * - **Sort Objects**:
     *   - Description of sort fields.
     *   - Attributes include `defaultDirection` (asc/desc), `descKey` and `key` (sort parameters), and `title`.
     *
     * > **Note**: Filters and sorts are optional; without them, no filtering controls are rendered.
     *
     */
    async getLibrary(
        sectionId: number,
        includeDetails?: models.IncludeDetails | undefined,
        options?: RequestOptions
    ): Promise<models.GetLibraryResponse> {
        return unwrapAsync(libraryGetLibrary(this, sectionId, includeDetails, options));
    }

    /**
     * Delete Library Section
     *
     * @remarks
     * Delate a library using a specific section
     */
    async deleteLibrary(
        sectionId: number,
        options?: RequestOptions
    ): Promise<models.DeleteLibraryResponse> {
        return unwrapAsync(libraryDeleteLibrary(this, sectionId, options));
    }

    /**
     * Get Library Items
     *
     * @remarks
     * Fetches details from a specific section of the library identified by a section key and a tag. The tag parameter accepts the following values:
     * - `all`: All items in the section.
     * - `unwatched`: Items that have not been played.
     * - `newest`: Items that are recently released.
     * - `recentlyAdded`: Items that are recently added to the library.
     * - `recentlyViewed`: Items that were recently viewed.
     * - `onDeck`: Items to continue watching.
     * - `collection`: Items categorized by collection.
     * - `edition`: Items categorized by edition.
     * - `genre`: Items categorized by genre.
     * - `year`: Items categorized by year of release.
     * - `decade`: Items categorized by decade.
     * - `director`: Items categorized by director.
     * - `actor`: Items categorized by starring actor.
     * - `country`: Items categorized by country of origin.
     * - `contentRating`: Items categorized by content rating.
     * - `rating`: Items categorized by rating.
     * - `resolution`: Items categorized by resolution.
     * - `firstCharacter`: Items categorized by the first letter.
     * - `folder`: Items categorized by folder.
     *
     */
    async getLibraryItems(
        sectionId: any,
        tag: models.Tag,
        includeGuids?: number | undefined,
        options?: RequestOptions
    ): Promise<models.GetLibraryItemsResponse> {
        return unwrapAsync(libraryGetLibraryItems(this, sectionId, tag, includeGuids, options));
    }

    /**
     * Refresh Library
     *
     * @remarks
     * This endpoint Refreshes the library.
     *
     */
    async refreshLibrary(
        sectionId: number,
        options?: RequestOptions
    ): Promise<models.RefreshLibraryResponse> {
        return unwrapAsync(libraryRefreshLibrary(this, sectionId, options));
    }

    /**
     * Search Library
     *
     * @remarks
     * Search for content within a specific section of the library.
     *
     * ### Types
     * Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:
     *
     * - **Type Object Attributes**:
     *   - `type`: Metadata type (if standard Plex type).
     *   - `title`: Title for this content type (e.g., "Movies").
     *
     * - **Filter Objects**:
     *   - Subset of the media query language.
     *   - Attributes include `filter` (name), `filterType` (data type), `key` (endpoint for value range), and `title`.
     *
     * - **Sort Objects**:
     *   - Description of sort fields.
     *   - Attributes include `defaultDirection` (asc/desc), `descKey` and `key` (sort parameters), and `title`.
     *
     * > **Note**: Filters and sorts are optional; without them, no filtering controls are rendered.
     *
     */
    async searchLibrary(
        sectionId: number,
        type: models.Type,
        options?: RequestOptions
    ): Promise<models.SearchLibraryResponse> {
        return unwrapAsync(librarySearchLibrary(this, sectionId, type, options));
    }

    /**
     * Get Items Metadata
     *
     * @remarks
     * This endpoint will return the metadata of a library item specified with the ratingKey.
     *
     */
    async getMetadata(
        ratingKey: number,
        options?: RequestOptions
    ): Promise<models.GetMetadataResponse> {
        return unwrapAsync(libraryGetMetadata(this, ratingKey, options));
    }

    /**
     * Get Items Children
     *
     * @remarks
     * This endpoint will return the children of of a library item specified with the ratingKey.
     *
     */
    async getMetadataChildren(
        ratingKey: number,
        includeElements?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetMetadataChildrenResponse> {
        return unwrapAsync(libraryGetMetadataChildren(this, ratingKey, includeElements, options));
    }

    /**
     * Get Top Watched Content
     *
     * @remarks
     * This endpoint will return the top watched content from libraries of a certain type
     *
     */
    async getTopWatchedContent(
        type: number,
        includeGuids?: number | undefined,
        options?: RequestOptions
    ): Promise<models.GetTopWatchedContentResponse> {
        return unwrapAsync(libraryGetTopWatchedContent(this, type, includeGuids, options));
    }

    /**
     * Get On Deck
     *
     * @remarks
     * This endpoint will return the on deck content.
     *
     */
    async getOnDeck(options?: RequestOptions): Promise<models.GetOnDeckResponse> {
        return unwrapAsync(libraryGetOnDeck(this, options));
    }
}
