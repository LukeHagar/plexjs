/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { plexGetCompanionsData } from "../funcs/plexGetCompanionsData.js";
import { plexGetGeoData } from "../funcs/plexGetGeoData.js";
import { plexGetHomeData } from "../funcs/plexGetHomeData.js";
import { plexGetPin } from "../funcs/plexGetPin.js";
import { plexGetResources } from "../funcs/plexGetResources.js";
import { plexGetTokenByPinId } from "../funcs/plexGetTokenByPinId.js";
import { plexGetUserDetails } from "../funcs/plexGetUserDetails.js";
import { plexGetUserFriends } from "../funcs/plexGetUserFriends.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Plex extends ClientSDK {
    /**
     * Get Companions Data
     *
     * @remarks
     * Get Companions Data
     */
    async getCompanionsData(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetCompanionsDataResponse> {
        return unwrapAsync(plexGetCompanionsData(this, options));
    }

    /**
     * Get list of friends of the user logged in
     *
     * @remarks
     * Get friends of provided auth token.
     */
    async getUserFriends(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetUserFriendsResponse> {
        return unwrapAsync(plexGetUserFriends(this, options));
    }

    /**
     * Get Geo Data
     *
     * @remarks
     * Returns the geolocation and locale data of the caller
     */
    async getGeoData(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetGeoDataResponse> {
        return unwrapAsync(plexGetGeoData(this, options));
    }

    /**
     * Get Plex Home Data
     *
     * @remarks
     * Retrieves the home data for the authenticated user, including details like home ID, name, guest access information, and subscription status.
     */
    async getHomeData(options?: RequestOptions): Promise<models.GetHomeDataResponse> {
        return unwrapAsync(plexGetHomeData(this, options));
    }

    /**
     * Get Resources
     *
     * @remarks
     * Get Resources
     */
    async getResources(
        xPlexClientIdentifier?: string | undefined,
        includeHttps?: models.IncludeHttps | undefined,
        includeRelay?: models.IncludeRelay | undefined,
        includeIPv6?: models.IncludeIPv6 | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetResourcesResponse> {
        return unwrapAsync(
            plexGetResources(
                this,
                xPlexClientIdentifier,
                includeHttps,
                includeRelay,
                includeIPv6,
                options
            )
        );
    }

    /**
     * Get a Pin
     *
     * @remarks
     * Retrieve a Pin from Plex.tv for authentication flows
     */
    async getPin(
        xPlexProduct: string,
        strong?: boolean | undefined,
        xPlexClientIdentifier?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetPinResponse> {
        return unwrapAsync(plexGetPin(this, xPlexProduct, strong, xPlexClientIdentifier, options));
    }

    /**
     * Get Access Token by PinId
     *
     * @remarks
     * Retrieve an Access Token from Plex.tv after the Pin has been authenticated
     */
    async getTokenByPinId(
        pinID: number,
        xPlexClientIdentifier?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetTokenByPinIdResponse> {
        return unwrapAsync(plexGetTokenByPinId(this, pinID, xPlexClientIdentifier, options));
    }

    /**
     * Get UserData By Token
     *
     * @remarks
     * Get the User data from the provided X-Plex-Token
     */
    async getUserDetails(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetUserDetailsResponse> {
        return unwrapAsync(plexGetUserDetails(this, options));
    }
}
