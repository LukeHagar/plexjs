/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Video extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get the timeline for a media item
     *
     * @remarks
     * Get the timeline for a media item
     */
    async getTimeline(
        input: operations.GetTimelineRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimelineResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.GetTimelineRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/:/timeline")();

        const query$ = [
            enc$.encodeForm("context", payload$.context, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("duration", payload$.duration, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("hasMDE", payload$.hasMDE, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("key", payload$.key, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("playBackTime", payload$.playBackTime, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("playQueueItemID", payload$.playQueueItemID, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("ratingKey", payload$.ratingKey, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("row", payload$.row, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("state", payload$.state, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("time", payload$.time, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.accessToken === "function") {
            security$ = { accessToken: await this.options$.accessToken() };
        } else if (this.options$.accessToken) {
            security$ = { accessToken: this.options$.accessToken };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTimeline",
            oAuth2Scopes: [],
            securitySource: this.options$.accessToken,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.GetTimelineResponseBody$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.GetTimelineResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    /**
     * Start Universal Transcode
     *
     * @remarks
     * Begin a Universal Transcode Session
     */
    async startUniversalTranscode(
        input: operations.StartUniversalTranscodeRequest,
        options?: RequestOptions
    ): Promise<operations.StartUniversalTranscodeResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.StartUniversalTranscodeRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/video/:/transcode/universal/start.mpd")();

        const query$ = [
            enc$.encodeForm("addDebugOverlay", payload$.addDebugOverlay, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("audioBoost", payload$.audioBoost, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("autoAdjustQuality", payload$.autoAdjustQuality, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("directPlay", payload$.directPlay, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("directStream", payload$.directStream, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("fastSeek", payload$.fastSeek, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("hasMDE", payload$.hasMDE, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("location", payload$.location, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("mediaBufferSize", payload$.mediaBufferSize, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("mediaIndex", payload$.mediaIndex, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("partIndex", payload$.partIndex, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("path", payload$.path, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("protocol", payload$.protocol, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("session", payload$.session, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("subtites", payload$.subtites, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("subtitleSize", payload$.subtitleSize, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.accessToken === "function") {
            security$ = { accessToken: await this.options$.accessToken() };
        } else if (this.options$.accessToken) {
            security$ = { accessToken: this.options$.accessToken };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "startUniversalTranscode",
            oAuth2Scopes: [],
            securitySource: this.options$.accessToken,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.StartUniversalTranscodeResponseBody$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.StartUniversalTranscodeResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }
}
