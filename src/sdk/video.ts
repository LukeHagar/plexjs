/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { encodeFormQuery as encodeFormQuery$ } from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Video extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get the timeline for a media item
     *
     * @remarks
     * Get the timeline for a media item
     */
    async getTimeline(
        request: operations.GetTimelineRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimelineResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTimelineRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/:/timeline")();

        const query$ = encodeFormQuery$({
            ratingKey: payload$.ratingKey,
            hasMDE: payload$.hasMDE,
            time: payload$.time,
            playBackTime: payload$.playBackTime,
            playQueueItemID: payload$.playQueueItemID,
            row: payload$.row,
            key: payload$.key,
            state: payload$.state,
            duration: payload$.duration,
            context: payload$.context,
        });

        let security$;
        if (typeof this.options$.accessToken === "function") {
            security$ = { accessToken: await this.options$.accessToken() };
        } else if (this.options$.accessToken) {
            security$ = { accessToken: this.options$.accessToken };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTimeline",
            oAuth2Scopes: [],
            securitySource: this.options$.accessToken,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetTimelineResponse>()
            .void(200, operations.GetTimelineResponse$)
            .fail([400, "4XX", "5XX"])
            .json(401, errors.GetTimelineResponseBody$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Start Universal Transcode
     *
     * @remarks
     * Begin a Universal Transcode Session
     */
    async startUniversalTranscode(
        request: operations.StartUniversalTranscodeRequest,
        options?: RequestOptions
    ): Promise<operations.StartUniversalTranscodeResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.StartUniversalTranscodeRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/video/:/transcode/universal/start.mpd")();

        const query$ = encodeFormQuery$({
            path: payload$.path,
            directStream: payload$.directStream,
            audioBoost: payload$.audioBoost,
            location: payload$.location,
            mediaBufferSize: payload$.mediaBufferSize,
            addDebugOverlay: payload$.addDebugOverlay,
            partIndex: payload$.partIndex,
            fastSeek: payload$.fastSeek,
            subtitleSize: payload$.subtitleSize,
            session: payload$.session,
            mediaIndex: payload$.mediaIndex,
            autoAdjustQuality: payload$.autoAdjustQuality,
            hasMDE: payload$.hasMDE,
            protocol: payload$.protocol,
            directPlay: payload$.directPlay,
            subtites: payload$.subtites,
        });

        let security$;
        if (typeof this.options$.accessToken === "function") {
            security$ = { accessToken: await this.options$.accessToken() };
        } else if (this.options$.accessToken) {
            security$ = { accessToken: this.options$.accessToken };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "startUniversalTranscode",
            oAuth2Scopes: [],
            securitySource: this.options$.accessToken,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.StartUniversalTranscodeResponse>()
            .void(200, operations.StartUniversalTranscodeResponse$)
            .fail([400, "4XX", "5XX"])
            .json(401, errors.StartUniversalTranscodeResponseBody$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
