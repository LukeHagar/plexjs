/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { GetWatchlistOpServerList } from "../models/getwatchlistop.js";
import * as models from "../models/index.js";

export class Watchlist extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get User Watchlist
     *
     * @remarks
     * Get User Watchlist
     */
    async getWatchlist(
        request: models.GetWatchlistRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<models.GetWatchlistResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetWatchlistRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(GetWatchlistOpServerList[0], { charEncoding: "percent" })();

        const pathParams$ = {
            filter: encodeSimple$("filter", payload$.filter, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/library/sections/watchlist/{filter}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            includeCollections: payload$.includeCollections,
            includeExternalMedia: payload$.includeExternalMedia,
            libtype: payload$.libtype,
            maxresults: payload$.maxresults,
            sort: payload$.sort,
            "X-Plex-Container-Size": payload$["X-Plex-Container-Size"],
            "X-Plex-Container-Start": payload$["X-Plex-Container-Start"],
            "X-Plex-Token": payload$["X-Plex-Token"],
        });

        let security$;
        if (typeof this.options$.accessToken === "function") {
            security$ = { accessToken: await this.options$.accessToken() };
        } else if (this.options$.accessToken) {
            security$ = { accessToken: this.options$.accessToken };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getWatchlist",
            oAuth2Scopes: [],
            securitySource: this.options$.accessToken,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.GetWatchlistResponse>()
            .json(200, models.GetWatchlistResponse$, { key: "object" })
            .fail([400, "4XX", "5XX"])
            .json(401, models.GetWatchlistWatchlistResponseBody$, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
