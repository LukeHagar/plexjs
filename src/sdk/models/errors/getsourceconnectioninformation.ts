/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetSourceConnectionInformationAuthenticationErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetSourceConnectionInformationAuthenticationResponseBodyData = {
    errors?: Array<GetSourceConnectionInformationAuthenticationErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetSourceConnectionInformationAuthenticationResponseBody extends Error {
    errors?: Array<GetSourceConnectionInformationAuthenticationErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSourceConnectionInformationAuthenticationResponseBodyData;

    constructor(err: GetSourceConnectionInformationAuthenticationResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetSourceConnectionInformationAuthenticationResponseBody";
    }
}

export type GetSourceConnectionInformationErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export type GetSourceConnectionInformationResponseBodyData = {
    errors?: Array<GetSourceConnectionInformationErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export class GetSourceConnectionInformationResponseBody extends Error {
    errors?: Array<GetSourceConnectionInformationErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSourceConnectionInformationResponseBodyData;

    constructor(err: GetSourceConnectionInformationResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetSourceConnectionInformationResponseBody";
    }
}

/** @internal */
export const GetSourceConnectionInformationAuthenticationErrors$inboundSchema: z.ZodType<
    GetSourceConnectionInformationAuthenticationErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/** @internal */
export type GetSourceConnectionInformationAuthenticationErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetSourceConnectionInformationAuthenticationErrors$outboundSchema: z.ZodType<
    GetSourceConnectionInformationAuthenticationErrors$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationAuthenticationErrors
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationAuthenticationErrors$ {
    /** @deprecated use `GetSourceConnectionInformationAuthenticationErrors$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationAuthenticationErrors$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationAuthenticationErrors$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationAuthenticationErrors$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationAuthenticationErrors$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationAuthenticationErrors$Outbound;
}

/** @internal */
export const GetSourceConnectionInformationAuthenticationResponseBody$inboundSchema: z.ZodType<
    GetSourceConnectionInformationAuthenticationResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z
            .array(z.lazy(() => GetSourceConnectionInformationAuthenticationErrors$inboundSchema))
            .optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetSourceConnectionInformationAuthenticationResponseBody(remapped);
    });

/** @internal */
export type GetSourceConnectionInformationAuthenticationResponseBody$Outbound = {
    errors?: Array<GetSourceConnectionInformationAuthenticationErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetSourceConnectionInformationAuthenticationResponseBody$outboundSchema: z.ZodType<
    GetSourceConnectionInformationAuthenticationResponseBody$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationAuthenticationResponseBody
> = z
    .instanceof(GetSourceConnectionInformationAuthenticationResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z
                    .array(
                        z.lazy(
                            () => GetSourceConnectionInformationAuthenticationErrors$outboundSchema
                        )
                    )
                    .optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationAuthenticationResponseBody$ {
    /** @deprecated use `GetSourceConnectionInformationAuthenticationResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        GetSourceConnectionInformationAuthenticationResponseBody$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationAuthenticationResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        GetSourceConnectionInformationAuthenticationResponseBody$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationAuthenticationResponseBody$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationAuthenticationResponseBody$Outbound;
}

/** @internal */
export const GetSourceConnectionInformationErrors$inboundSchema: z.ZodType<
    GetSourceConnectionInformationErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/** @internal */
export type GetSourceConnectionInformationErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetSourceConnectionInformationErrors$outboundSchema: z.ZodType<
    GetSourceConnectionInformationErrors$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationErrors
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationErrors$ {
    /** @deprecated use `GetSourceConnectionInformationErrors$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationErrors$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationErrors$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationErrors$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationErrors$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationErrors$Outbound;
}

/** @internal */
export const GetSourceConnectionInformationResponseBody$inboundSchema: z.ZodType<
    GetSourceConnectionInformationResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z
            .array(z.lazy(() => GetSourceConnectionInformationErrors$inboundSchema))
            .optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetSourceConnectionInformationResponseBody(remapped);
    });

/** @internal */
export type GetSourceConnectionInformationResponseBody$Outbound = {
    errors?: Array<GetSourceConnectionInformationErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetSourceConnectionInformationResponseBody$outboundSchema: z.ZodType<
    GetSourceConnectionInformationResponseBody$Outbound,
    z.ZodTypeDef,
    GetSourceConnectionInformationResponseBody
> = z
    .instanceof(GetSourceConnectionInformationResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z
                    .array(z.lazy(() => GetSourceConnectionInformationErrors$outboundSchema))
                    .optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSourceConnectionInformationResponseBody$ {
    /** @deprecated use `GetSourceConnectionInformationResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetSourceConnectionInformationResponseBody$inboundSchema;
    /** @deprecated use `GetSourceConnectionInformationResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetSourceConnectionInformationResponseBody$outboundSchema;
    /** @deprecated use `GetSourceConnectionInformationResponseBody$Outbound` instead. */
    export type Outbound = GetSourceConnectionInformationResponseBody$Outbound;
}
