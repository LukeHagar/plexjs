/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetLibrarySectionsAllLibraryErrors = {
  code?: number | undefined;
  message?: string | undefined;
  status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetLibrarySectionsAllUnauthorizedData = {
  errors?: Array<GetLibrarySectionsAllLibraryErrors> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetLibrarySectionsAllUnauthorized extends Error {
  errors?: Array<GetLibrarySectionsAllLibraryErrors> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetLibrarySectionsAllUnauthorizedData;

  constructor(err: GetLibrarySectionsAllUnauthorizedData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.errors != null) this.errors = err.errors;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;

    this.name = "GetLibrarySectionsAllUnauthorized";
  }
}

export type GetLibrarySectionsAllErrors = {
  code?: number | undefined;
  message?: string | undefined;
  status?: number | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export type GetLibrarySectionsAllBadRequestData = {
  errors?: Array<GetLibrarySectionsAllErrors> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export class GetLibrarySectionsAllBadRequest extends Error {
  errors?: Array<GetLibrarySectionsAllErrors> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetLibrarySectionsAllBadRequestData;

  constructor(err: GetLibrarySectionsAllBadRequestData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.errors != null) this.errors = err.errors;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;

    this.name = "GetLibrarySectionsAllBadRequest";
  }
}

/** @internal */
export const GetLibrarySectionsAllLibraryErrors$inboundSchema: z.ZodType<
  GetLibrarySectionsAllLibraryErrors,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number().int().optional(),
  message: z.string().optional(),
  status: z.number().int().optional(),
});

/** @internal */
export type GetLibrarySectionsAllLibraryErrors$Outbound = {
  code?: number | undefined;
  message?: string | undefined;
  status?: number | undefined;
};

/** @internal */
export const GetLibrarySectionsAllLibraryErrors$outboundSchema: z.ZodType<
  GetLibrarySectionsAllLibraryErrors$Outbound,
  z.ZodTypeDef,
  GetLibrarySectionsAllLibraryErrors
> = z.object({
  code: z.number().int().optional(),
  message: z.string().optional(),
  status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrarySectionsAllLibraryErrors$ {
  /** @deprecated use `GetLibrarySectionsAllLibraryErrors$inboundSchema` instead. */
  export const inboundSchema = GetLibrarySectionsAllLibraryErrors$inboundSchema;
  /** @deprecated use `GetLibrarySectionsAllLibraryErrors$outboundSchema` instead. */
  export const outboundSchema =
    GetLibrarySectionsAllLibraryErrors$outboundSchema;
  /** @deprecated use `GetLibrarySectionsAllLibraryErrors$Outbound` instead. */
  export type Outbound = GetLibrarySectionsAllLibraryErrors$Outbound;
}

export function getLibrarySectionsAllLibraryErrorsToJSON(
  getLibrarySectionsAllLibraryErrors: GetLibrarySectionsAllLibraryErrors,
): string {
  return JSON.stringify(
    GetLibrarySectionsAllLibraryErrors$outboundSchema.parse(
      getLibrarySectionsAllLibraryErrors,
    ),
  );
}

export function getLibrarySectionsAllLibraryErrorsFromJSON(
  jsonString: string,
): SafeParseResult<GetLibrarySectionsAllLibraryErrors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetLibrarySectionsAllLibraryErrors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibrarySectionsAllLibraryErrors' from JSON`,
  );
}

/** @internal */
export const GetLibrarySectionsAllUnauthorized$inboundSchema: z.ZodType<
  GetLibrarySectionsAllUnauthorized,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => GetLibrarySectionsAllLibraryErrors$inboundSchema),
  ).optional(),
  RawResponse: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
    });

    return new GetLibrarySectionsAllUnauthorized(remapped);
  });

/** @internal */
export type GetLibrarySectionsAllUnauthorized$Outbound = {
  errors?: Array<GetLibrarySectionsAllLibraryErrors$Outbound> | undefined;
  RawResponse?: never | undefined;
};

/** @internal */
export const GetLibrarySectionsAllUnauthorized$outboundSchema: z.ZodType<
  GetLibrarySectionsAllUnauthorized$Outbound,
  z.ZodTypeDef,
  GetLibrarySectionsAllUnauthorized
> = z.instanceof(GetLibrarySectionsAllUnauthorized)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errors: z.array(
        z.lazy(() => GetLibrarySectionsAllLibraryErrors$outboundSchema),
      ).optional(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrarySectionsAllUnauthorized$ {
  /** @deprecated use `GetLibrarySectionsAllUnauthorized$inboundSchema` instead. */
  export const inboundSchema = GetLibrarySectionsAllUnauthorized$inboundSchema;
  /** @deprecated use `GetLibrarySectionsAllUnauthorized$outboundSchema` instead. */
  export const outboundSchema =
    GetLibrarySectionsAllUnauthorized$outboundSchema;
  /** @deprecated use `GetLibrarySectionsAllUnauthorized$Outbound` instead. */
  export type Outbound = GetLibrarySectionsAllUnauthorized$Outbound;
}

/** @internal */
export const GetLibrarySectionsAllErrors$inboundSchema: z.ZodType<
  GetLibrarySectionsAllErrors,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number().int().optional(),
  message: z.string().optional(),
  status: z.number().int().optional(),
});

/** @internal */
export type GetLibrarySectionsAllErrors$Outbound = {
  code?: number | undefined;
  message?: string | undefined;
  status?: number | undefined;
};

/** @internal */
export const GetLibrarySectionsAllErrors$outboundSchema: z.ZodType<
  GetLibrarySectionsAllErrors$Outbound,
  z.ZodTypeDef,
  GetLibrarySectionsAllErrors
> = z.object({
  code: z.number().int().optional(),
  message: z.string().optional(),
  status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrarySectionsAllErrors$ {
  /** @deprecated use `GetLibrarySectionsAllErrors$inboundSchema` instead. */
  export const inboundSchema = GetLibrarySectionsAllErrors$inboundSchema;
  /** @deprecated use `GetLibrarySectionsAllErrors$outboundSchema` instead. */
  export const outboundSchema = GetLibrarySectionsAllErrors$outboundSchema;
  /** @deprecated use `GetLibrarySectionsAllErrors$Outbound` instead. */
  export type Outbound = GetLibrarySectionsAllErrors$Outbound;
}

export function getLibrarySectionsAllErrorsToJSON(
  getLibrarySectionsAllErrors: GetLibrarySectionsAllErrors,
): string {
  return JSON.stringify(
    GetLibrarySectionsAllErrors$outboundSchema.parse(
      getLibrarySectionsAllErrors,
    ),
  );
}

export function getLibrarySectionsAllErrorsFromJSON(
  jsonString: string,
): SafeParseResult<GetLibrarySectionsAllErrors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibrarySectionsAllErrors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibrarySectionsAllErrors' from JSON`,
  );
}

/** @internal */
export const GetLibrarySectionsAllBadRequest$inboundSchema: z.ZodType<
  GetLibrarySectionsAllBadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => GetLibrarySectionsAllErrors$inboundSchema))
    .optional(),
  RawResponse: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
    });

    return new GetLibrarySectionsAllBadRequest(remapped);
  });

/** @internal */
export type GetLibrarySectionsAllBadRequest$Outbound = {
  errors?: Array<GetLibrarySectionsAllErrors$Outbound> | undefined;
  RawResponse?: never | undefined;
};

/** @internal */
export const GetLibrarySectionsAllBadRequest$outboundSchema: z.ZodType<
  GetLibrarySectionsAllBadRequest$Outbound,
  z.ZodTypeDef,
  GetLibrarySectionsAllBadRequest
> = z.instanceof(GetLibrarySectionsAllBadRequest)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errors: z.array(z.lazy(() => GetLibrarySectionsAllErrors$outboundSchema))
        .optional(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibrarySectionsAllBadRequest$ {
  /** @deprecated use `GetLibrarySectionsAllBadRequest$inboundSchema` instead. */
  export const inboundSchema = GetLibrarySectionsAllBadRequest$inboundSchema;
  /** @deprecated use `GetLibrarySectionsAllBadRequest$outboundSchema` instead. */
  export const outboundSchema = GetLibrarySectionsAllBadRequest$outboundSchema;
  /** @deprecated use `GetLibrarySectionsAllBadRequest$Outbound` instead. */
  export type Outbound = GetLibrarySectionsAllBadRequest$Outbound;
}
