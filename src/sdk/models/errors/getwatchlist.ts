/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetWatchListErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetWatchListResponseBodyData = {
    errors?: Array<GetWatchListErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetWatchListResponseBody extends Error {
    errors?: Array<GetWatchListErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetWatchListResponseBodyData;

    constructor(err: GetWatchListResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetWatchListResponseBody";
    }
}

/** @internal */
export const GetWatchListErrors$inboundSchema: z.ZodType<
    GetWatchListErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/** @internal */
export type GetWatchListErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetWatchListErrors$outboundSchema: z.ZodType<
    GetWatchListErrors$Outbound,
    z.ZodTypeDef,
    GetWatchListErrors
> = z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWatchListErrors$ {
    /** @deprecated use `GetWatchListErrors$inboundSchema` instead. */
    export const inboundSchema = GetWatchListErrors$inboundSchema;
    /** @deprecated use `GetWatchListErrors$outboundSchema` instead. */
    export const outboundSchema = GetWatchListErrors$outboundSchema;
    /** @deprecated use `GetWatchListErrors$Outbound` instead. */
    export type Outbound = GetWatchListErrors$Outbound;
}

/** @internal */
export const GetWatchListResponseBody$inboundSchema: z.ZodType<
    GetWatchListResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetWatchListErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetWatchListResponseBody(remapped);
    });

/** @internal */
export type GetWatchListResponseBody$Outbound = {
    errors?: Array<GetWatchListErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetWatchListResponseBody$outboundSchema: z.ZodType<
    GetWatchListResponseBody$Outbound,
    z.ZodTypeDef,
    GetWatchListResponseBody
> = z
    .instanceof(GetWatchListResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetWatchListErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWatchListResponseBody$ {
    /** @deprecated use `GetWatchListResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWatchListResponseBody$inboundSchema;
    /** @deprecated use `GetWatchListResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWatchListResponseBody$outboundSchema;
    /** @deprecated use `GetWatchListResponseBody$Outbound` instead. */
    export type Outbound = GetWatchListResponseBody$Outbound;
}
