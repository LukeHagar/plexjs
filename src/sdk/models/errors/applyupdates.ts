/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ApplyUpdatesUpdaterErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type ApplyUpdatesUpdaterResponseBodyData = {
    errors?: Array<ApplyUpdatesUpdaterErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class ApplyUpdatesUpdaterResponseBody extends Error {
    errors?: Array<ApplyUpdatesUpdaterErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: ApplyUpdatesUpdaterResponseBodyData;

    constructor(err: ApplyUpdatesUpdaterResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "ApplyUpdatesUpdaterResponseBody";
    }
}

export type ApplyUpdatesErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export type ApplyUpdatesResponseBodyData = {
    errors?: Array<ApplyUpdatesErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export class ApplyUpdatesResponseBody extends Error {
    errors?: Array<ApplyUpdatesErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: ApplyUpdatesResponseBodyData;

    constructor(err: ApplyUpdatesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "ApplyUpdatesResponseBody";
    }
}

/** @internal */
export const ApplyUpdatesUpdaterErrors$inboundSchema: z.ZodType<
    ApplyUpdatesUpdaterErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/** @internal */
export type ApplyUpdatesUpdaterErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const ApplyUpdatesUpdaterErrors$outboundSchema: z.ZodType<
    ApplyUpdatesUpdaterErrors$Outbound,
    z.ZodTypeDef,
    ApplyUpdatesUpdaterErrors
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplyUpdatesUpdaterErrors$ {
    /** @deprecated use `ApplyUpdatesUpdaterErrors$inboundSchema` instead. */
    export const inboundSchema = ApplyUpdatesUpdaterErrors$inboundSchema;
    /** @deprecated use `ApplyUpdatesUpdaterErrors$outboundSchema` instead. */
    export const outboundSchema = ApplyUpdatesUpdaterErrors$outboundSchema;
    /** @deprecated use `ApplyUpdatesUpdaterErrors$Outbound` instead. */
    export type Outbound = ApplyUpdatesUpdaterErrors$Outbound;
}

/** @internal */
export const ApplyUpdatesUpdaterResponseBody$inboundSchema: z.ZodType<
    ApplyUpdatesUpdaterResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => ApplyUpdatesUpdaterErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new ApplyUpdatesUpdaterResponseBody(remapped);
    });

/** @internal */
export type ApplyUpdatesUpdaterResponseBody$Outbound = {
    errors?: Array<ApplyUpdatesUpdaterErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const ApplyUpdatesUpdaterResponseBody$outboundSchema: z.ZodType<
    ApplyUpdatesUpdaterResponseBody$Outbound,
    z.ZodTypeDef,
    ApplyUpdatesUpdaterResponseBody
> = z
    .instanceof(ApplyUpdatesUpdaterResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => ApplyUpdatesUpdaterErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplyUpdatesUpdaterResponseBody$ {
    /** @deprecated use `ApplyUpdatesUpdaterResponseBody$inboundSchema` instead. */
    export const inboundSchema = ApplyUpdatesUpdaterResponseBody$inboundSchema;
    /** @deprecated use `ApplyUpdatesUpdaterResponseBody$outboundSchema` instead. */
    export const outboundSchema = ApplyUpdatesUpdaterResponseBody$outboundSchema;
    /** @deprecated use `ApplyUpdatesUpdaterResponseBody$Outbound` instead. */
    export type Outbound = ApplyUpdatesUpdaterResponseBody$Outbound;
}

/** @internal */
export const ApplyUpdatesErrors$inboundSchema: z.ZodType<
    ApplyUpdatesErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/** @internal */
export type ApplyUpdatesErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const ApplyUpdatesErrors$outboundSchema: z.ZodType<
    ApplyUpdatesErrors$Outbound,
    z.ZodTypeDef,
    ApplyUpdatesErrors
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplyUpdatesErrors$ {
    /** @deprecated use `ApplyUpdatesErrors$inboundSchema` instead. */
    export const inboundSchema = ApplyUpdatesErrors$inboundSchema;
    /** @deprecated use `ApplyUpdatesErrors$outboundSchema` instead. */
    export const outboundSchema = ApplyUpdatesErrors$outboundSchema;
    /** @deprecated use `ApplyUpdatesErrors$Outbound` instead. */
    export type Outbound = ApplyUpdatesErrors$Outbound;
}

/** @internal */
export const ApplyUpdatesResponseBody$inboundSchema: z.ZodType<
    ApplyUpdatesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => ApplyUpdatesErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new ApplyUpdatesResponseBody(remapped);
    });

/** @internal */
export type ApplyUpdatesResponseBody$Outbound = {
    errors?: Array<ApplyUpdatesErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const ApplyUpdatesResponseBody$outboundSchema: z.ZodType<
    ApplyUpdatesResponseBody$Outbound,
    z.ZodTypeDef,
    ApplyUpdatesResponseBody
> = z
    .instanceof(ApplyUpdatesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => ApplyUpdatesErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplyUpdatesResponseBody$ {
    /** @deprecated use `ApplyUpdatesResponseBody$inboundSchema` instead. */
    export const inboundSchema = ApplyUpdatesResponseBody$inboundSchema;
    /** @deprecated use `ApplyUpdatesResponseBody$outboundSchema` instead. */
    export const outboundSchema = ApplyUpdatesResponseBody$outboundSchema;
    /** @deprecated use `ApplyUpdatesResponseBody$Outbound` instead. */
    export type Outbound = ApplyUpdatesResponseBody$Outbound;
}
