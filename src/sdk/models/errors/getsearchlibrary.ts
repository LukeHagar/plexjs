/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetSearchLibraryLibraryErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export type GetSearchLibraryLibraryResponseBodyData = {
    errors?: Array<GetSearchLibraryLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
 */
export class GetSearchLibraryLibraryResponseBody extends Error {
    errors?: Array<GetSearchLibraryLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSearchLibraryLibraryResponseBodyData;

    constructor(err: GetSearchLibraryLibraryResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetSearchLibraryLibraryResponseBody";
    }
}

export type GetSearchLibraryErrors = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export type GetSearchLibraryResponseBodyData = {
    errors?: Array<GetSearchLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
};

/**
 * Bad Request - A parameter was not specified, or was specified incorrectly.
 */
export class GetSearchLibraryResponseBody extends Error {
    errors?: Array<GetSearchLibraryErrors> | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: GetSearchLibraryResponseBodyData;

    constructor(err: GetSearchLibraryResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }

        this.name = "GetSearchLibraryResponseBody";
    }
}

/** @internal */
export const GetSearchLibraryLibraryErrors$inboundSchema: z.ZodType<
    GetSearchLibraryLibraryErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/** @internal */
export type GetSearchLibraryLibraryErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetSearchLibraryLibraryErrors$outboundSchema: z.ZodType<
    GetSearchLibraryLibraryErrors$Outbound,
    z.ZodTypeDef,
    GetSearchLibraryLibraryErrors
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchLibraryLibraryErrors$ {
    /** @deprecated use `GetSearchLibraryLibraryErrors$inboundSchema` instead. */
    export const inboundSchema = GetSearchLibraryLibraryErrors$inboundSchema;
    /** @deprecated use `GetSearchLibraryLibraryErrors$outboundSchema` instead. */
    export const outboundSchema = GetSearchLibraryLibraryErrors$outboundSchema;
    /** @deprecated use `GetSearchLibraryLibraryErrors$Outbound` instead. */
    export type Outbound = GetSearchLibraryLibraryErrors$Outbound;
}

/** @internal */
export const GetSearchLibraryLibraryResponseBody$inboundSchema: z.ZodType<
    GetSearchLibraryLibraryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetSearchLibraryLibraryErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetSearchLibraryLibraryResponseBody(remapped);
    });

/** @internal */
export type GetSearchLibraryLibraryResponseBody$Outbound = {
    errors?: Array<GetSearchLibraryLibraryErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetSearchLibraryLibraryResponseBody$outboundSchema: z.ZodType<
    GetSearchLibraryLibraryResponseBody$Outbound,
    z.ZodTypeDef,
    GetSearchLibraryLibraryResponseBody
> = z
    .instanceof(GetSearchLibraryLibraryResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z
                    .array(z.lazy(() => GetSearchLibraryLibraryErrors$outboundSchema))
                    .optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchLibraryLibraryResponseBody$ {
    /** @deprecated use `GetSearchLibraryLibraryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetSearchLibraryLibraryResponseBody$inboundSchema;
    /** @deprecated use `GetSearchLibraryLibraryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetSearchLibraryLibraryResponseBody$outboundSchema;
    /** @deprecated use `GetSearchLibraryLibraryResponseBody$Outbound` instead. */
    export type Outbound = GetSearchLibraryLibraryResponseBody$Outbound;
}

/** @internal */
export const GetSearchLibraryErrors$inboundSchema: z.ZodType<
    GetSearchLibraryErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/** @internal */
export type GetSearchLibraryErrors$Outbound = {
    code?: number | undefined;
    message?: string | undefined;
    status?: number | undefined;
};

/** @internal */
export const GetSearchLibraryErrors$outboundSchema: z.ZodType<
    GetSearchLibraryErrors$Outbound,
    z.ZodTypeDef,
    GetSearchLibraryErrors
> = z.object({
    code: z.number().int().optional(),
    message: z.string().optional(),
    status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchLibraryErrors$ {
    /** @deprecated use `GetSearchLibraryErrors$inboundSchema` instead. */
    export const inboundSchema = GetSearchLibraryErrors$inboundSchema;
    /** @deprecated use `GetSearchLibraryErrors$outboundSchema` instead. */
    export const outboundSchema = GetSearchLibraryErrors$outboundSchema;
    /** @deprecated use `GetSearchLibraryErrors$Outbound` instead. */
    export type Outbound = GetSearchLibraryErrors$Outbound;
}

/** @internal */
export const GetSearchLibraryResponseBody$inboundSchema: z.ZodType<
    GetSearchLibraryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errors: z.array(z.lazy(() => GetSearchLibraryErrors$inboundSchema)).optional(),
        RawResponse: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new GetSearchLibraryResponseBody(remapped);
    });

/** @internal */
export type GetSearchLibraryResponseBody$Outbound = {
    errors?: Array<GetSearchLibraryErrors$Outbound> | undefined;
    RawResponse?: never | undefined;
};

/** @internal */
export const GetSearchLibraryResponseBody$outboundSchema: z.ZodType<
    GetSearchLibraryResponseBody$Outbound,
    z.ZodTypeDef,
    GetSearchLibraryResponseBody
> = z
    .instanceof(GetSearchLibraryResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                errors: z.array(z.lazy(() => GetSearchLibraryErrors$outboundSchema)).optional(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchLibraryResponseBody$ {
    /** @deprecated use `GetSearchLibraryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetSearchLibraryResponseBody$inboundSchema;
    /** @deprecated use `GetSearchLibraryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetSearchLibraryResponseBody$outboundSchema;
    /** @deprecated use `GetSearchLibraryResponseBody$Outbound` instead. */
    export type Outbound = GetSearchLibraryResponseBody$Outbound;
}
