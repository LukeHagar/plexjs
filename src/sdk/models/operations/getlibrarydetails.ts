/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * Whether or not to include details for a section (types, filters, and sorts).
 *
 * @remarks
 * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
 *
 */
export enum IncludeDetails {
    Zero = 0,
    One = 1,
}

export type GetLibraryDetailsRequest = {
    /**
     * The unique key of the Plex library.
     *
     * @remarks
     * Note: This is unique in the context of the Plex server.
     *
     */
    sectionKey: number;
    /**
     * Whether or not to include details for a section (types, filters, and sorts).
     *
     * @remarks
     * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     *
     */
    includeDetails?: IncludeDetails | undefined;
};

export type GetLibraryDetailsDirectory = {
    key?: string | undefined;
    title?: string | undefined;
    secondary?: boolean | undefined;
    prompt?: string | undefined;
    search?: boolean | undefined;
};

export type GetLibraryDetailsFilter = {
    filter?: string | undefined;
    filterType?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
};

export type Sort = {
    default?: string | undefined;
    defaultDirection?: string | undefined;
    descKey?: string | undefined;
    firstCharacterKey?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
};

export type Field = {
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    subType?: string | undefined;
};

export type GetLibraryDetailsType = {
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    active?: boolean | undefined;
    filter?: Array<GetLibraryDetailsFilter> | undefined;
    sort?: Array<Sort> | undefined;
    field?: Array<Field> | undefined;
};

export type Operator = {
    key?: string | undefined;
    title?: string | undefined;
};

export type FieldType = {
    type?: string | undefined;
    operator?: Array<Operator> | undefined;
};

export type GetLibraryDetailsMediaContainer = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    art?: string | undefined;
    content?: string | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    thumb?: string | undefined;
    title1?: string | undefined;
    viewGroup?: string | undefined;
    viewMode?: number | undefined;
    directory?: Array<GetLibraryDetailsDirectory> | undefined;
    type?: Array<GetLibraryDetailsType> | undefined;
    fieldType?: Array<FieldType> | undefined;
};

/**
 * The details of the library
 */
export type GetLibraryDetailsResponseBody = {
    mediaContainer?: GetLibraryDetailsMediaContainer | undefined;
};

export type GetLibraryDetailsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The details of the library
     */
    object?: GetLibraryDetailsResponseBody | undefined;
};

/** @internal */
export const IncludeDetails$inboundSchema: z.ZodNativeEnum<typeof IncludeDetails> =
    z.nativeEnum(IncludeDetails);

/** @internal */
export const IncludeDetails$outboundSchema: z.ZodNativeEnum<typeof IncludeDetails> =
    IncludeDetails$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeDetails$ {
    /** @deprecated use `IncludeDetails$inboundSchema` instead. */
    export const inboundSchema = IncludeDetails$inboundSchema;
    /** @deprecated use `IncludeDetails$outboundSchema` instead. */
    export const outboundSchema = IncludeDetails$outboundSchema;
}

/** @internal */
export const GetLibraryDetailsRequest$inboundSchema: z.ZodType<
    GetLibraryDetailsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    sectionKey: z.number().int(),
    includeDetails: IncludeDetails$inboundSchema,
});

/** @internal */
export type GetLibraryDetailsRequest$Outbound = {
    sectionKey: number;
    includeDetails: number;
};

/** @internal */
export const GetLibraryDetailsRequest$outboundSchema: z.ZodType<
    GetLibraryDetailsRequest$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsRequest
> = z.object({
    sectionKey: z.number().int(),
    includeDetails: IncludeDetails$outboundSchema.default(IncludeDetails.Zero),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsRequest$ {
    /** @deprecated use `GetLibraryDetailsRequest$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsRequest$inboundSchema;
    /** @deprecated use `GetLibraryDetailsRequest$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsRequest$outboundSchema;
    /** @deprecated use `GetLibraryDetailsRequest$Outbound` instead. */
    export type Outbound = GetLibraryDetailsRequest$Outbound;
}

/** @internal */
export const GetLibraryDetailsDirectory$inboundSchema: z.ZodType<
    GetLibraryDetailsDirectory,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    secondary: z.boolean().optional(),
    prompt: z.string().optional(),
    search: z.boolean().optional(),
});

/** @internal */
export type GetLibraryDetailsDirectory$Outbound = {
    key?: string | undefined;
    title?: string | undefined;
    secondary?: boolean | undefined;
    prompt?: string | undefined;
    search?: boolean | undefined;
};

/** @internal */
export const GetLibraryDetailsDirectory$outboundSchema: z.ZodType<
    GetLibraryDetailsDirectory$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsDirectory
> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    secondary: z.boolean().optional(),
    prompt: z.string().optional(),
    search: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsDirectory$ {
    /** @deprecated use `GetLibraryDetailsDirectory$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsDirectory$inboundSchema;
    /** @deprecated use `GetLibraryDetailsDirectory$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsDirectory$outboundSchema;
    /** @deprecated use `GetLibraryDetailsDirectory$Outbound` instead. */
    export type Outbound = GetLibraryDetailsDirectory$Outbound;
}

/** @internal */
export const GetLibraryDetailsFilter$inboundSchema: z.ZodType<
    GetLibraryDetailsFilter,
    z.ZodTypeDef,
    unknown
> = z.object({
    filter: z.string().optional(),
    filterType: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
});

/** @internal */
export type GetLibraryDetailsFilter$Outbound = {
    filter?: string | undefined;
    filterType?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
};

/** @internal */
export const GetLibraryDetailsFilter$outboundSchema: z.ZodType<
    GetLibraryDetailsFilter$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsFilter
> = z.object({
    filter: z.string().optional(),
    filterType: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsFilter$ {
    /** @deprecated use `GetLibraryDetailsFilter$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsFilter$inboundSchema;
    /** @deprecated use `GetLibraryDetailsFilter$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsFilter$outboundSchema;
    /** @deprecated use `GetLibraryDetailsFilter$Outbound` instead. */
    export type Outbound = GetLibraryDetailsFilter$Outbound;
}

/** @internal */
export const Sort$inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z.object({
    default: z.string().optional(),
    defaultDirection: z.string().optional(),
    descKey: z.string().optional(),
    firstCharacterKey: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
});

/** @internal */
export type Sort$Outbound = {
    default?: string | undefined;
    defaultDirection?: string | undefined;
    descKey?: string | undefined;
    firstCharacterKey?: string | undefined;
    key?: string | undefined;
    title?: string | undefined;
};

/** @internal */
export const Sort$outboundSchema: z.ZodType<Sort$Outbound, z.ZodTypeDef, Sort> = z.object({
    default: z.string().optional(),
    defaultDirection: z.string().optional(),
    descKey: z.string().optional(),
    firstCharacterKey: z.string().optional(),
    key: z.string().optional(),
    title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
    /** @deprecated use `Sort$inboundSchema` instead. */
    export const inboundSchema = Sort$inboundSchema;
    /** @deprecated use `Sort$outboundSchema` instead. */
    export const outboundSchema = Sort$outboundSchema;
    /** @deprecated use `Sort$Outbound` instead. */
    export type Outbound = Sort$Outbound;
}

/** @internal */
export const Field$inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
    subType: z.string().optional(),
});

/** @internal */
export type Field$Outbound = {
    key?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    subType?: string | undefined;
};

/** @internal */
export const Field$outboundSchema: z.ZodType<Field$Outbound, z.ZodTypeDef, Field> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
    subType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
    /** @deprecated use `Field$inboundSchema` instead. */
    export const inboundSchema = Field$inboundSchema;
    /** @deprecated use `Field$outboundSchema` instead. */
    export const outboundSchema = Field$outboundSchema;
    /** @deprecated use `Field$Outbound` instead. */
    export type Outbound = Field$Outbound;
}

/** @internal */
export const GetLibraryDetailsType$inboundSchema: z.ZodType<
    GetLibraryDetailsType,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        key: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        active: z.boolean().optional(),
        Filter: z.array(z.lazy(() => GetLibraryDetailsFilter$inboundSchema)).optional(),
        Sort: z.array(z.lazy(() => Sort$inboundSchema)).optional(),
        Field: z.array(z.lazy(() => Field$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Filter: "filter",
            Sort: "sort",
            Field: "field",
        });
    });

/** @internal */
export type GetLibraryDetailsType$Outbound = {
    key?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    active?: boolean | undefined;
    Filter?: Array<GetLibraryDetailsFilter$Outbound> | undefined;
    Sort?: Array<Sort$Outbound> | undefined;
    Field?: Array<Field$Outbound> | undefined;
};

/** @internal */
export const GetLibraryDetailsType$outboundSchema: z.ZodType<
    GetLibraryDetailsType$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsType
> = z
    .object({
        key: z.string().optional(),
        type: z.string().optional(),
        title: z.string().optional(),
        active: z.boolean().optional(),
        filter: z.array(z.lazy(() => GetLibraryDetailsFilter$outboundSchema)).optional(),
        sort: z.array(z.lazy(() => Sort$outboundSchema)).optional(),
        field: z.array(z.lazy(() => Field$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            filter: "Filter",
            sort: "Sort",
            field: "Field",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsType$ {
    /** @deprecated use `GetLibraryDetailsType$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsType$inboundSchema;
    /** @deprecated use `GetLibraryDetailsType$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsType$outboundSchema;
    /** @deprecated use `GetLibraryDetailsType$Outbound` instead. */
    export type Outbound = GetLibraryDetailsType$Outbound;
}

/** @internal */
export const Operator$inboundSchema: z.ZodType<Operator, z.ZodTypeDef, unknown> = z.object({
    key: z.string().optional(),
    title: z.string().optional(),
});

/** @internal */
export type Operator$Outbound = {
    key?: string | undefined;
    title?: string | undefined;
};

/** @internal */
export const Operator$outboundSchema: z.ZodType<Operator$Outbound, z.ZodTypeDef, Operator> =
    z.object({
        key: z.string().optional(),
        title: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
    /** @deprecated use `Operator$inboundSchema` instead. */
    export const inboundSchema = Operator$inboundSchema;
    /** @deprecated use `Operator$outboundSchema` instead. */
    export const outboundSchema = Operator$outboundSchema;
    /** @deprecated use `Operator$Outbound` instead. */
    export type Outbound = Operator$Outbound;
}

/** @internal */
export const FieldType$inboundSchema: z.ZodType<FieldType, z.ZodTypeDef, unknown> = z
    .object({
        type: z.string().optional(),
        Operator: z.array(z.lazy(() => Operator$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Operator: "operator",
        });
    });

/** @internal */
export type FieldType$Outbound = {
    type?: string | undefined;
    Operator?: Array<Operator$Outbound> | undefined;
};

/** @internal */
export const FieldType$outboundSchema: z.ZodType<FieldType$Outbound, z.ZodTypeDef, FieldType> = z
    .object({
        type: z.string().optional(),
        operator: z.array(z.lazy(() => Operator$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            operator: "Operator",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldType$ {
    /** @deprecated use `FieldType$inboundSchema` instead. */
    export const inboundSchema = FieldType$inboundSchema;
    /** @deprecated use `FieldType$outboundSchema` instead. */
    export const outboundSchema = FieldType$outboundSchema;
    /** @deprecated use `FieldType$Outbound` instead. */
    export type Outbound = FieldType$Outbound;
}

/** @internal */
export const GetLibraryDetailsMediaContainer$inboundSchema: z.ZodType<
    GetLibraryDetailsMediaContainer,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        art: z.string().optional(),
        content: z.string().optional(),
        identifier: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        mediaTagPrefix: z.string().optional(),
        mediaTagVersion: z.number().int().optional(),
        thumb: z.string().optional(),
        title1: z.string().optional(),
        viewGroup: z.string().optional(),
        viewMode: z.number().int().optional(),
        Directory: z.array(z.lazy(() => GetLibraryDetailsDirectory$inboundSchema)).optional(),
        Type: z.array(z.lazy(() => GetLibraryDetailsType$inboundSchema)).optional(),
        FieldType: z.array(z.lazy(() => FieldType$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Directory: "directory",
            Type: "type",
            FieldType: "fieldType",
        });
    });

/** @internal */
export type GetLibraryDetailsMediaContainer$Outbound = {
    size?: number | undefined;
    allowSync?: boolean | undefined;
    art?: string | undefined;
    content?: string | undefined;
    identifier?: string | undefined;
    librarySectionID?: number | undefined;
    mediaTagPrefix?: string | undefined;
    mediaTagVersion?: number | undefined;
    thumb?: string | undefined;
    title1?: string | undefined;
    viewGroup?: string | undefined;
    viewMode?: number | undefined;
    Directory?: Array<GetLibraryDetailsDirectory$Outbound> | undefined;
    Type?: Array<GetLibraryDetailsType$Outbound> | undefined;
    FieldType?: Array<FieldType$Outbound> | undefined;
};

/** @internal */
export const GetLibraryDetailsMediaContainer$outboundSchema: z.ZodType<
    GetLibraryDetailsMediaContainer$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsMediaContainer
> = z
    .object({
        size: z.number().int().optional(),
        allowSync: z.boolean().optional(),
        art: z.string().optional(),
        content: z.string().optional(),
        identifier: z.string().optional(),
        librarySectionID: z.number().int().optional(),
        mediaTagPrefix: z.string().optional(),
        mediaTagVersion: z.number().int().optional(),
        thumb: z.string().optional(),
        title1: z.string().optional(),
        viewGroup: z.string().optional(),
        viewMode: z.number().int().optional(),
        directory: z.array(z.lazy(() => GetLibraryDetailsDirectory$outboundSchema)).optional(),
        type: z.array(z.lazy(() => GetLibraryDetailsType$outboundSchema)).optional(),
        fieldType: z.array(z.lazy(() => FieldType$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            directory: "Directory",
            type: "Type",
            fieldType: "FieldType",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsMediaContainer$ {
    /** @deprecated use `GetLibraryDetailsMediaContainer$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsMediaContainer$inboundSchema;
    /** @deprecated use `GetLibraryDetailsMediaContainer$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsMediaContainer$outboundSchema;
    /** @deprecated use `GetLibraryDetailsMediaContainer$Outbound` instead. */
    export type Outbound = GetLibraryDetailsMediaContainer$Outbound;
}

/** @internal */
export const GetLibraryDetailsResponseBody$inboundSchema: z.ZodType<
    GetLibraryDetailsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        MediaContainer: z.lazy(() => GetLibraryDetailsMediaContainer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            MediaContainer: "mediaContainer",
        });
    });

/** @internal */
export type GetLibraryDetailsResponseBody$Outbound = {
    MediaContainer?: GetLibraryDetailsMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetLibraryDetailsResponseBody$outboundSchema: z.ZodType<
    GetLibraryDetailsResponseBody$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsResponseBody
> = z
    .object({
        mediaContainer: z.lazy(() => GetLibraryDetailsMediaContainer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            mediaContainer: "MediaContainer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsResponseBody$ {
    /** @deprecated use `GetLibraryDetailsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsResponseBody$inboundSchema;
    /** @deprecated use `GetLibraryDetailsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsResponseBody$outboundSchema;
    /** @deprecated use `GetLibraryDetailsResponseBody$Outbound` instead. */
    export type Outbound = GetLibraryDetailsResponseBody$Outbound;
}

/** @internal */
export const GetLibraryDetailsResponse$inboundSchema: z.ZodType<
    GetLibraryDetailsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        object: z.lazy(() => GetLibraryDetailsResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetLibraryDetailsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?: GetLibraryDetailsResponseBody$Outbound | undefined;
};

/** @internal */
export const GetLibraryDetailsResponse$outboundSchema: z.ZodType<
    GetLibraryDetailsResponse$Outbound,
    z.ZodTypeDef,
    GetLibraryDetailsResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        object: z.lazy(() => GetLibraryDetailsResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsResponse$ {
    /** @deprecated use `GetLibraryDetailsResponse$inboundSchema` instead. */
    export const inboundSchema = GetLibraryDetailsResponse$inboundSchema;
    /** @deprecated use `GetLibraryDetailsResponse$outboundSchema` instead. */
    export const outboundSchema = GetLibraryDetailsResponse$outboundSchema;
    /** @deprecated use `GetLibraryDetailsResponse$Outbound` instead. */
    export type Outbound = GetLibraryDetailsResponse$Outbound;
}
