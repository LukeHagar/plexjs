/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * Whether or not to include details for a section (types, filters, and sorts).
 *
 * @remarks
 * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
 */
export enum IncludeDetails {
  Zero = 0,
  One = 1,
}

export type GetLibraryDetailsRequest = {
  /**
   * The unique key of the Plex library.
   *
   * @remarks
   * Note: This is unique in the context of the Plex server.
   */
  sectionKey: number;
  /**
   * Whether or not to include details for a section (types, filters, and sorts).
   *
   * @remarks
   * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
   */
  includeDetails?: IncludeDetails | undefined;
};

export type GetLibraryDetailsDirectory = {
  key?: string | undefined;
  title?: string | undefined;
  secondary?: boolean | undefined;
  prompt?: string | undefined;
  search?: boolean | undefined;
};

export type GetLibraryDetailsFilter = {
  filter?: string | undefined;
  filterType?: string | undefined;
  key?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
};

export type GetLibraryDetailsSort = {
  default?: string | undefined;
  defaultDirection?: string | undefined;
  descKey?: string | undefined;
  firstCharacterKey?: string | undefined;
  key?: string | undefined;
  title?: string | undefined;
};

export type GetLibraryDetailsField = {
  key?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
  subType?: string | undefined;
};

export type GetLibraryDetailsType = {
  key?: string | undefined;
  type?: string | undefined;
  title?: string | undefined;
  active?: boolean | undefined;
  filter?: Array<GetLibraryDetailsFilter> | undefined;
  sort?: Array<GetLibraryDetailsSort> | undefined;
  field?: Array<GetLibraryDetailsField> | undefined;
};

export type GetLibraryDetailsOperator = {
  key?: string | undefined;
  title?: string | undefined;
};

export type GetLibraryDetailsFieldType = {
  type?: string | undefined;
  operator?: Array<GetLibraryDetailsOperator> | undefined;
};

export type GetLibraryDetailsMediaContainer = {
  size?: number | undefined;
  allowSync?: boolean | undefined;
  art?: string | undefined;
  content?: string | undefined;
  identifier?: string | undefined;
  librarySectionID?: number | undefined;
  mediaTagPrefix?: string | undefined;
  mediaTagVersion?: number | undefined;
  thumb?: string | undefined;
  title1?: string | undefined;
  viewGroup?: string | undefined;
  viewMode?: number | undefined;
  directory?: Array<GetLibraryDetailsDirectory> | undefined;
  type?: Array<GetLibraryDetailsType> | undefined;
  fieldType?: Array<GetLibraryDetailsFieldType> | undefined;
};

/**
 * The details of the library
 */
export type GetLibraryDetailsResponseBody = {
  mediaContainer?: GetLibraryDetailsMediaContainer | undefined;
};

export type GetLibraryDetailsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The details of the library
   */
  object?: GetLibraryDetailsResponseBody | undefined;
};

/** @internal */
export const IncludeDetails$inboundSchema: z.ZodNativeEnum<
  typeof IncludeDetails
> = z.nativeEnum(IncludeDetails);

/** @internal */
export const IncludeDetails$outboundSchema: z.ZodNativeEnum<
  typeof IncludeDetails
> = IncludeDetails$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeDetails$ {
  /** @deprecated use `IncludeDetails$inboundSchema` instead. */
  export const inboundSchema = IncludeDetails$inboundSchema;
  /** @deprecated use `IncludeDetails$outboundSchema` instead. */
  export const outboundSchema = IncludeDetails$outboundSchema;
}

/** @internal */
export const GetLibraryDetailsRequest$inboundSchema: z.ZodType<
  GetLibraryDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sectionKey: z.number().int(),
  includeDetails: IncludeDetails$inboundSchema,
});

/** @internal */
export type GetLibraryDetailsRequest$Outbound = {
  sectionKey: number;
  includeDetails: number;
};

/** @internal */
export const GetLibraryDetailsRequest$outboundSchema: z.ZodType<
  GetLibraryDetailsRequest$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsRequest
> = z.object({
  sectionKey: z.number().int(),
  includeDetails: IncludeDetails$outboundSchema.default(IncludeDetails.Zero),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsRequest$ {
  /** @deprecated use `GetLibraryDetailsRequest$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsRequest$inboundSchema;
  /** @deprecated use `GetLibraryDetailsRequest$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsRequest$outboundSchema;
  /** @deprecated use `GetLibraryDetailsRequest$Outbound` instead. */
  export type Outbound = GetLibraryDetailsRequest$Outbound;
}

/** @internal */
export const GetLibraryDetailsDirectory$inboundSchema: z.ZodType<
  GetLibraryDetailsDirectory,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  title: z.string().optional(),
  secondary: z.boolean().optional(),
  prompt: z.string().optional(),
  search: z.boolean().optional(),
});

/** @internal */
export type GetLibraryDetailsDirectory$Outbound = {
  key?: string | undefined;
  title?: string | undefined;
  secondary?: boolean | undefined;
  prompt?: string | undefined;
  search?: boolean | undefined;
};

/** @internal */
export const GetLibraryDetailsDirectory$outboundSchema: z.ZodType<
  GetLibraryDetailsDirectory$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsDirectory
> = z.object({
  key: z.string().optional(),
  title: z.string().optional(),
  secondary: z.boolean().optional(),
  prompt: z.string().optional(),
  search: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsDirectory$ {
  /** @deprecated use `GetLibraryDetailsDirectory$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsDirectory$inboundSchema;
  /** @deprecated use `GetLibraryDetailsDirectory$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsDirectory$outboundSchema;
  /** @deprecated use `GetLibraryDetailsDirectory$Outbound` instead. */
  export type Outbound = GetLibraryDetailsDirectory$Outbound;
}

/** @internal */
export const GetLibraryDetailsFilter$inboundSchema: z.ZodType<
  GetLibraryDetailsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  filterType: z.string().optional(),
  key: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetLibraryDetailsFilter$Outbound = {
  filter?: string | undefined;
  filterType?: string | undefined;
  key?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetLibraryDetailsFilter$outboundSchema: z.ZodType<
  GetLibraryDetailsFilter$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsFilter
> = z.object({
  filter: z.string().optional(),
  filterType: z.string().optional(),
  key: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsFilter$ {
  /** @deprecated use `GetLibraryDetailsFilter$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsFilter$inboundSchema;
  /** @deprecated use `GetLibraryDetailsFilter$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsFilter$outboundSchema;
  /** @deprecated use `GetLibraryDetailsFilter$Outbound` instead. */
  export type Outbound = GetLibraryDetailsFilter$Outbound;
}

/** @internal */
export const GetLibraryDetailsSort$inboundSchema: z.ZodType<
  GetLibraryDetailsSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.string().optional(),
  defaultDirection: z.string().optional(),
  descKey: z.string().optional(),
  firstCharacterKey: z.string().optional(),
  key: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type GetLibraryDetailsSort$Outbound = {
  default?: string | undefined;
  defaultDirection?: string | undefined;
  descKey?: string | undefined;
  firstCharacterKey?: string | undefined;
  key?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const GetLibraryDetailsSort$outboundSchema: z.ZodType<
  GetLibraryDetailsSort$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsSort
> = z.object({
  default: z.string().optional(),
  defaultDirection: z.string().optional(),
  descKey: z.string().optional(),
  firstCharacterKey: z.string().optional(),
  key: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsSort$ {
  /** @deprecated use `GetLibraryDetailsSort$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsSort$inboundSchema;
  /** @deprecated use `GetLibraryDetailsSort$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsSort$outboundSchema;
  /** @deprecated use `GetLibraryDetailsSort$Outbound` instead. */
  export type Outbound = GetLibraryDetailsSort$Outbound;
}

/** @internal */
export const GetLibraryDetailsField$inboundSchema: z.ZodType<
  GetLibraryDetailsField,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
  subType: z.string().optional(),
});

/** @internal */
export type GetLibraryDetailsField$Outbound = {
  key?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
  subType?: string | undefined;
};

/** @internal */
export const GetLibraryDetailsField$outboundSchema: z.ZodType<
  GetLibraryDetailsField$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsField
> = z.object({
  key: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
  subType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsField$ {
  /** @deprecated use `GetLibraryDetailsField$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsField$inboundSchema;
  /** @deprecated use `GetLibraryDetailsField$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsField$outboundSchema;
  /** @deprecated use `GetLibraryDetailsField$Outbound` instead. */
  export type Outbound = GetLibraryDetailsField$Outbound;
}

/** @internal */
export const GetLibraryDetailsType$inboundSchema: z.ZodType<
  GetLibraryDetailsType,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  type: z.string().optional(),
  title: z.string().optional(),
  active: z.boolean().optional(),
  Filter: z.array(z.lazy(() => GetLibraryDetailsFilter$inboundSchema))
    .optional(),
  Sort: z.array(z.lazy(() => GetLibraryDetailsSort$inboundSchema)).optional(),
  Field: z.array(z.lazy(() => GetLibraryDetailsField$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Filter": "filter",
    "Sort": "sort",
    "Field": "field",
  });
});

/** @internal */
export type GetLibraryDetailsType$Outbound = {
  key?: string | undefined;
  type?: string | undefined;
  title?: string | undefined;
  active?: boolean | undefined;
  Filter?: Array<GetLibraryDetailsFilter$Outbound> | undefined;
  Sort?: Array<GetLibraryDetailsSort$Outbound> | undefined;
  Field?: Array<GetLibraryDetailsField$Outbound> | undefined;
};

/** @internal */
export const GetLibraryDetailsType$outboundSchema: z.ZodType<
  GetLibraryDetailsType$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsType
> = z.object({
  key: z.string().optional(),
  type: z.string().optional(),
  title: z.string().optional(),
  active: z.boolean().optional(),
  filter: z.array(z.lazy(() => GetLibraryDetailsFilter$outboundSchema))
    .optional(),
  sort: z.array(z.lazy(() => GetLibraryDetailsSort$outboundSchema)).optional(),
  field: z.array(z.lazy(() => GetLibraryDetailsField$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    filter: "Filter",
    sort: "Sort",
    field: "Field",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsType$ {
  /** @deprecated use `GetLibraryDetailsType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsType$inboundSchema;
  /** @deprecated use `GetLibraryDetailsType$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsType$outboundSchema;
  /** @deprecated use `GetLibraryDetailsType$Outbound` instead. */
  export type Outbound = GetLibraryDetailsType$Outbound;
}

/** @internal */
export const GetLibraryDetailsOperator$inboundSchema: z.ZodType<
  GetLibraryDetailsOperator,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type GetLibraryDetailsOperator$Outbound = {
  key?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const GetLibraryDetailsOperator$outboundSchema: z.ZodType<
  GetLibraryDetailsOperator$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsOperator
> = z.object({
  key: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsOperator$ {
  /** @deprecated use `GetLibraryDetailsOperator$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsOperator$inboundSchema;
  /** @deprecated use `GetLibraryDetailsOperator$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsOperator$outboundSchema;
  /** @deprecated use `GetLibraryDetailsOperator$Outbound` instead. */
  export type Outbound = GetLibraryDetailsOperator$Outbound;
}

/** @internal */
export const GetLibraryDetailsFieldType$inboundSchema: z.ZodType<
  GetLibraryDetailsFieldType,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  Operator: z.array(z.lazy(() => GetLibraryDetailsOperator$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Operator": "operator",
  });
});

/** @internal */
export type GetLibraryDetailsFieldType$Outbound = {
  type?: string | undefined;
  Operator?: Array<GetLibraryDetailsOperator$Outbound> | undefined;
};

/** @internal */
export const GetLibraryDetailsFieldType$outboundSchema: z.ZodType<
  GetLibraryDetailsFieldType$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsFieldType
> = z.object({
  type: z.string().optional(),
  operator: z.array(z.lazy(() => GetLibraryDetailsOperator$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    operator: "Operator",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsFieldType$ {
  /** @deprecated use `GetLibraryDetailsFieldType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsFieldType$inboundSchema;
  /** @deprecated use `GetLibraryDetailsFieldType$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsFieldType$outboundSchema;
  /** @deprecated use `GetLibraryDetailsFieldType$Outbound` instead. */
  export type Outbound = GetLibraryDetailsFieldType$Outbound;
}

/** @internal */
export const GetLibraryDetailsMediaContainer$inboundSchema: z.ZodType<
  GetLibraryDetailsMediaContainer,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().int().optional(),
  allowSync: z.boolean().optional(),
  art: z.string().optional(),
  content: z.string().optional(),
  identifier: z.string().optional(),
  librarySectionID: z.number().int().optional(),
  mediaTagPrefix: z.string().optional(),
  mediaTagVersion: z.number().int().optional(),
  thumb: z.string().optional(),
  title1: z.string().optional(),
  viewGroup: z.string().optional(),
  viewMode: z.number().int().optional(),
  Directory: z.array(z.lazy(() => GetLibraryDetailsDirectory$inboundSchema))
    .optional(),
  Type: z.array(z.lazy(() => GetLibraryDetailsType$inboundSchema)).optional(),
  FieldType: z.array(z.lazy(() => GetLibraryDetailsFieldType$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Directory": "directory",
    "Type": "type",
    "FieldType": "fieldType",
  });
});

/** @internal */
export type GetLibraryDetailsMediaContainer$Outbound = {
  size?: number | undefined;
  allowSync?: boolean | undefined;
  art?: string | undefined;
  content?: string | undefined;
  identifier?: string | undefined;
  librarySectionID?: number | undefined;
  mediaTagPrefix?: string | undefined;
  mediaTagVersion?: number | undefined;
  thumb?: string | undefined;
  title1?: string | undefined;
  viewGroup?: string | undefined;
  viewMode?: number | undefined;
  Directory?: Array<GetLibraryDetailsDirectory$Outbound> | undefined;
  Type?: Array<GetLibraryDetailsType$Outbound> | undefined;
  FieldType?: Array<GetLibraryDetailsFieldType$Outbound> | undefined;
};

/** @internal */
export const GetLibraryDetailsMediaContainer$outboundSchema: z.ZodType<
  GetLibraryDetailsMediaContainer$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsMediaContainer
> = z.object({
  size: z.number().int().optional(),
  allowSync: z.boolean().optional(),
  art: z.string().optional(),
  content: z.string().optional(),
  identifier: z.string().optional(),
  librarySectionID: z.number().int().optional(),
  mediaTagPrefix: z.string().optional(),
  mediaTagVersion: z.number().int().optional(),
  thumb: z.string().optional(),
  title1: z.string().optional(),
  viewGroup: z.string().optional(),
  viewMode: z.number().int().optional(),
  directory: z.array(z.lazy(() => GetLibraryDetailsDirectory$outboundSchema))
    .optional(),
  type: z.array(z.lazy(() => GetLibraryDetailsType$outboundSchema)).optional(),
  fieldType: z.array(z.lazy(() => GetLibraryDetailsFieldType$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    directory: "Directory",
    type: "Type",
    fieldType: "FieldType",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsMediaContainer$ {
  /** @deprecated use `GetLibraryDetailsMediaContainer$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsMediaContainer$inboundSchema;
  /** @deprecated use `GetLibraryDetailsMediaContainer$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsMediaContainer$outboundSchema;
  /** @deprecated use `GetLibraryDetailsMediaContainer$Outbound` instead. */
  export type Outbound = GetLibraryDetailsMediaContainer$Outbound;
}

/** @internal */
export const GetLibraryDetailsResponseBody$inboundSchema: z.ZodType<
  GetLibraryDetailsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  MediaContainer: z.lazy(() => GetLibraryDetailsMediaContainer$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "MediaContainer": "mediaContainer",
  });
});

/** @internal */
export type GetLibraryDetailsResponseBody$Outbound = {
  MediaContainer?: GetLibraryDetailsMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetLibraryDetailsResponseBody$outboundSchema: z.ZodType<
  GetLibraryDetailsResponseBody$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsResponseBody
> = z.object({
  mediaContainer: z.lazy(() => GetLibraryDetailsMediaContainer$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    mediaContainer: "MediaContainer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsResponseBody$ {
  /** @deprecated use `GetLibraryDetailsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsResponseBody$inboundSchema;
  /** @deprecated use `GetLibraryDetailsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsResponseBody$outboundSchema;
  /** @deprecated use `GetLibraryDetailsResponseBody$Outbound` instead. */
  export type Outbound = GetLibraryDetailsResponseBody$Outbound;
}

/** @internal */
export const GetLibraryDetailsResponse$inboundSchema: z.ZodType<
  GetLibraryDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetLibraryDetailsResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetLibraryDetailsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetLibraryDetailsResponseBody$Outbound | undefined;
};

/** @internal */
export const GetLibraryDetailsResponse$outboundSchema: z.ZodType<
  GetLibraryDetailsResponse$Outbound,
  z.ZodTypeDef,
  GetLibraryDetailsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetLibraryDetailsResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryDetailsResponse$ {
  /** @deprecated use `GetLibraryDetailsResponse$inboundSchema` instead. */
  export const inboundSchema = GetLibraryDetailsResponse$inboundSchema;
  /** @deprecated use `GetLibraryDetailsResponse$outboundSchema` instead. */
  export const outboundSchema = GetLibraryDetailsResponse$outboundSchema;
  /** @deprecated use `GetLibraryDetailsResponse$Outbound` instead. */
  export type Outbound = GetLibraryDetailsResponse$Outbound;
}
