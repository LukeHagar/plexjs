/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A key representing a specific tag within the section.
 */
export enum Tag {
  Unwatched = "unwatched",
  Newest = "newest",
  RecentlyAdded = "recentlyAdded",
  RecentlyViewed = "recentlyViewed",
  OnDeck = "onDeck",
  Collection = "collection",
  Edition = "edition",
  Year = "year",
  Decade = "decade",
  Director = "director",
  ContentRating = "contentRating",
  Rating = "rating",
  Resolution = "resolution",
  FirstCharacter = "firstCharacter",
  Folder = "folder",
  Albums = "albums",
}
/**
 * A key representing a specific tag within the section.
 */
export type TagOpen = OpenEnum<typeof Tag>;

/**
 * Adds the Guids object to the response
 *
 * @remarks
 */
export enum IncludeGuids {
  Disable = 0,
  Enable = 1,
}

/**
 * The type of media to retrieve or filter by.
 *
 * @remarks
 * 1 = movie
 * 2 = show
 * 3 = season
 * 4 = episode
 * E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
 */
export enum GetLibraryItemsQueryParamType {
  Movie = 1,
  TvShow = 2,
  Season = 3,
  Episode = 4,
  Artist = 5,
  Album = 6,
  Track = 7,
  PhotoAlbum = 8,
  Photo = 9,
}
/**
 * The type of media to retrieve or filter by.
 *
 * @remarks
 * 1 = movie
 * 2 = show
 * 3 = season
 * 4 = episode
 * E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
 */
export type GetLibraryItemsQueryParamTypeOpen = OpenEnum<
  typeof GetLibraryItemsQueryParamType
>;

/**
 * Adds the Meta object to the response
 *
 * @remarks
 */
export enum GetLibraryItemsQueryParamIncludeMeta {
  Disable = 0,
  Enable = 1,
}

export type GetLibraryItemsRequest = {
  /**
   * A key representing a specific tag within the section.
   */
  tag: TagOpen;
  /**
   * Adds the Guids object to the response
   *
   * @remarks
   */
  includeGuids?: IncludeGuids | undefined;
  /**
   * The type of media to retrieve or filter by.
   *
   * @remarks
   * 1 = movie
   * 2 = show
   * 3 = season
   * 4 = episode
   * E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
   */
  type: GetLibraryItemsQueryParamTypeOpen;
  /**
   * The unique key of the Plex library.
   *
   * @remarks
   * Note: This is unique in the context of the Plex server.
   */
  sectionKey: number;
  /**
   * Adds the Meta object to the response
   *
   * @remarks
   */
  includeMeta?: GetLibraryItemsQueryParamIncludeMeta | undefined;
  /**
   * The index of the first item to return. If not specified, the first item will be returned.
   *
   * @remarks
   * If the number of items exceeds the limit, the response will be paginated.
   * By default this is 0
   */
  xPlexContainerStart?: number | undefined;
  /**
   * The number of items to return. If not specified, all items will be returned.
   *
   * @remarks
   * If the number of items exceeds the limit, the response will be paginated.
   * By default this is 50
   */
  xPlexContainerSize?: number | undefined;
};

/**
 * The type of media content in the Plex library. This can represent videos, music, or photos.
 *
 * @remarks
 */
export enum GetLibraryItemsType {
  Movie = "movie",
  TvShow = "show",
  Season = "season",
  Episode = "episode",
  Artist = "artist",
  Album = "album",
  Track = "track",
  PhotoAlbum = "photoalbum",
  Photo = "photo",
  Collection = "collection",
}
/**
 * The type of media content in the Plex library. This can represent videos, music, or photos.
 *
 * @remarks
 */
export type GetLibraryItemsTypeOpen = OpenEnum<typeof GetLibraryItemsType>;

export enum GetLibraryItemsLibraryResponseType {
  CoverPoster = "coverPoster",
  Background = "background",
  Snapshot = "snapshot",
  ClearLogo = "clearLogo",
}
export type GetLibraryItemsLibraryResponseTypeOpen = OpenEnum<
  typeof GetLibraryItemsLibraryResponseType
>;

export type GetLibraryItemsImage = {
  alt: string;
  type: GetLibraryItemsLibraryResponseTypeOpen;
  url: string;
};

export type GetLibraryItemsUltraBlurColors = {
  topLeft: string;
  topRight: string;
  bottomRight: string;
  bottomLeft: string;
};

export type GetLibraryItemsGuids = {
  /**
   * The unique identifier for the Guid. Can be prefixed with imdb://, tmdb://, tvdb://
   *
   * @remarks
   */
  id: string;
};

/**
 * Setting that indicates the episode ordering for the show.
 *
 * @remarks
 * Options:
 *   - None = Library default
 *   - tmdbAiring = The Movie Database (Aired)
 *   - aired = TheTVDB (Aired)
 *   - dvd = TheTVDB (DVD)
 *   - absolute = TheTVDB (Absolute)
 */
export enum ShowOrdering {
  None = "None",
  TmdbAiring = "tmdbAiring",
  TvdbAired = "aired",
  TvdbDvd = "dvd",
  TvdbAbsolute = "absolute",
}
/**
 * Setting that indicates the episode ordering for the show.
 *
 * @remarks
 * Options:
 *   - None = Library default
 *   - tmdbAiring = The Movie Database (Aired)
 *   - aired = TheTVDB (Aired)
 *   - dvd = TheTVDB (DVD)
 *   - absolute = TheTVDB (Absolute)
 */
export type ShowOrderingOpen = OpenEnum<typeof ShowOrdering>;

/**
 * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
 *
 * @remarks
 */
export enum FlattenSeasons {
  LibraryDefault = "-1",
  Hide = "0",
  Show = "1",
}
/**
 * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
 *
 * @remarks
 */
export type FlattenSeasonsOpen = OpenEnum<typeof FlattenSeasons>;

export enum OptimizedForStreaming1 {
  Zero = 0,
  One = 1,
}

/**
 * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
 */
export type GetLibraryItemsOptimizedForStreaming =
  | OptimizedForStreaming1
  | boolean;

export enum GetLibraryItemsOptimizedForStreaming1 {
  Zero = 0,
  One = 1,
}

/**
 * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
 *
 * @remarks
 */
export type GetLibraryItemsLibraryOptimizedForStreaming =
  | GetLibraryItemsOptimizedForStreaming1
  | boolean;

/**
 * Indicates if the part has a thumbnail.
 *
 * @remarks
 */
export enum GetLibraryItemsHasThumbnail {
  False = "0",
  True = "1",
}

export type GetLibraryItemsPart = {
  /**
   * Indicates if the part is accessible.
   */
  accessible?: boolean | undefined;
  /**
   * Indicates if the part exists.
   */
  exists?: boolean | undefined;
  /**
   * Unique part identifier.
   */
  id: number;
  /**
   * Key to access this part.
   */
  key?: string | undefined;
  indexes?: string | undefined;
  /**
   * Duration of the part in milliseconds.
   */
  duration?: number | undefined;
  /**
   * File path for the part.
   */
  file?: string | undefined;
  /**
   * File size in bytes.
   */
  size?: number | undefined;
  packetLength?: number | undefined;
  /**
   * Container format of the part.
   */
  container?: string | undefined;
  /**
   * Video profile for the part.
   */
  videoProfile?: string | undefined;
  /**
   * The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
   */
  audioProfile?: string | undefined;
  has64bitOffsets?: boolean | undefined;
  /**
   * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
   *
   * @remarks
   */
  optimizedForStreaming?:
    | GetLibraryItemsOptimizedForStreaming1
    | boolean
    | undefined;
  hasThumbnail?: GetLibraryItemsHasThumbnail | undefined;
};

export type GetLibraryItemsMedia = {
  /**
   * Unique media identifier.
   */
  id: number;
  /**
   * Duration of the media in milliseconds.
   */
  duration?: number | undefined;
  /**
   * Bitrate in bits per second.
   */
  bitrate?: number | undefined;
  /**
   * Video width in pixels.
   */
  width?: number | undefined;
  /**
   * Video height in pixels.
   */
  height?: number | undefined;
  /**
   * Aspect ratio of the video.
   */
  aspectRatio?: number | undefined;
  /**
   * Number of audio channels.
   */
  audioChannels?: number | undefined;
  displayOffset?: number | undefined;
  /**
   * Audio codec used.
   */
  audioCodec?: string | undefined;
  /**
   * Video codec used.
   */
  videoCodec?: string | undefined;
  /**
   * Video resolution (e.g., 4k).
   */
  videoResolution?: string | undefined;
  /**
   * Container format of the media.
   */
  container?: string | undefined;
  /**
   * Frame rate of the video. Values found include NTSC, PAL, 24p
   *
   * @remarks
   */
  videoFrameRate?: string | undefined;
  /**
   * Video profile (e.g., main 10).
   */
  videoProfile?: string | undefined;
  /**
   * Indicates whether voice activity is detected.
   */
  hasVoiceActivity?: boolean | undefined;
  /**
   * The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
   */
  audioProfile?: string | undefined;
  /**
   * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
   */
  optimizedForStreaming?: OptimizedForStreaming1 | boolean | undefined;
  /**
   * Indicates whether the media has 64-bit offsets.
   *
   * @remarks
   * This is relevant for media files that may require larger offsets than what 32-bit integers can provide.
   */
  has64bitOffsets?: boolean | undefined;
  part?: Array<GetLibraryItemsPart> | undefined;
};

export type GetLibraryItemsGenre = {
  /**
   * The unique identifier for the genre.
   *
   * @remarks
   * NOTE: This is different for each Plex server and is not globally unique.
   */
  id: number;
  /**
   * The genre name of this media-item
   *
   * @remarks
   */
  tag: string;
};

export type GetLibraryItemsCountry = {
  /**
   * The unique identifier for the country.
   *
   * @remarks
   * NOTE: This is different for each Plex server and is not globally unique.
   */
  id: number;
  /**
   * The country of origin of this media item
   */
  tag: string;
};

export type GetLibraryItemsDirector = {
  /**
   * Unique identifier for the director.
   */
  id: number;
  /**
   * The role of Director
   */
  tag: string;
  /**
   * The absolute URL of the thumbnail image for the director.
   */
  thumb?: string | undefined;
};

export type GetLibraryItemsWriter = {
  /**
   * Unique identifier for the writer.
   */
  id: number;
  /**
   * The role of Writer
   */
  tag: string;
  /**
   * The absolute URL of the thumbnail image for the writer.
   */
  thumb?: string | undefined;
};

export type GetLibraryItemsProducer = {
  /**
   * The unique role identifier.
   */
  id: number;
  /**
   * The filter string for the role.
   */
  filter: string;
  /**
   * The actor's name.
   */
  tag: string;
  /**
   * A key associated with the actor tag.
   */
  tagKey: string;
  /**
   * The character name or role.
   */
  role?: string | undefined;
  /**
   * URL for the role thumbnail image.
   */
  thumb?: string | undefined;
};

export type GetLibraryItemsCollection = {
  /**
   * The user-made collection this media item belongs to
   */
  tag: string;
};

export type GetLibraryItemsRole = {
  /**
   * The unique identifier for the role.
   *
   * @remarks
   * NOTE: This is different for each Plex server and is not globally unique.
   */
  id: number;
  /**
   * The display tag for the actor (typically the actor's name).
   */
  tag: string;
  /**
   * The role played by the actor in the media item.
   */
  role?: string | undefined;
  /**
   * The absolute URL of the thumbnail image for the actor.
   */
  thumb?: string | undefined;
};

export type Ratings = {
  /**
   * The image or reference for the rating.
   */
  image: string;
  /**
   * The rating value.
   */
  value: number;
  /**
   * The type of rating (e.g., audience, critic).
   */
  type: string;
};

export type GetLibraryItemsSimilar = {
  /**
   * The unique similar item identifier.
   */
  id: number;
  /**
   * The filter string for similar items.
   */
  filter: string;
  /**
   * The tag or title of the similar content.
   */
  tag: string;
};

/**
 * The folder path for the media item.
 */
export type GetLibraryItemsLocation = {
  path: string;
};

/**
 * The thumbnail for the chapter
 */
export type Chapter = {
  id: number;
  filter: string;
  index: number;
  startTimeOffset: number;
  endTimeOffset: number;
  thumb: string;
};

/**
 * Attributes associated with the marker.
 */
export type Attributes = {
  /**
   * The identifier for the attributes.
   */
  id: number;
  /**
   * The version number of the marker attributes.
   */
  version?: number | undefined;
};

/**
 * The final status of the marker
 */
export type Marker = {
  id: number;
  type: string;
  startTimeOffset: number;
  endTimeOffset: number;
  final?: boolean | undefined;
  /**
   * Attributes associated with the marker.
   */
  attributes?: Attributes | undefined;
};

export type Extras = {
  /**
   * The size of the extras.
   */
  size?: number | undefined;
};

/**
 * Unknown
 *
 * @remarks
 */
export type GetLibraryItemsMetadata = {
  /**
   * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
   */
  ratingKey: string;
  /**
   * The unique key for the media item.
   */
  key: string;
  /**
   * The globally unique identifier for the media item.
   */
  guid: string;
  /**
   * A URL‐friendly version of the media title.
   */
  slug: string;
  /**
   * The studio that produced the media item.
   */
  studio?: string | undefined;
  type: GetLibraryItemsTypeOpen;
  /**
   * The title of the media item.
   */
  title: string;
  /**
   * The banner image URL for the media item.
   */
  banner: string;
  /**
   * The sort title used for ordering media items.
   */
  titleSort: string;
  /**
   * The content rating for the media item.
   */
  contentRating?: string | undefined;
  /**
   * A synopsis of the media item.
   */
  summary: string;
  /**
   * The critic rating for the media item.
   */
  rating: number;
  /**
   * The audience rating for the media item.
   */
  audienceRating: number;
  /**
   * The release year of the media item.
   */
  year?: number | undefined;
  /**
   * A brief tagline for the media item.
   */
  tagline: string;
  /**
   * The thumbnail image URL for the media item.
   */
  thumb: string;
  /**
   * The art image URL for the media item.
   */
  art: string;
  /**
   * The theme URL for the media item.
   */
  theme: string;
  /**
   * The index position of the media item.
   */
  index: number;
  /**
   * The number of leaf items (end nodes) under this media item.
   */
  leafCount?: number | undefined;
  /**
   * The number of leaf items that have been viewed.
   */
  viewedLeafCount?: number | undefined;
  /**
   * The number of child items associated with this media item.
   */
  childCount: number;
  /**
   * The total number of seasons (for TV shows).
   */
  seasonCount: number;
  /**
   * The duration of the media item in milliseconds.
   */
  duration: number;
  /**
   * The original release date of the media item.
   */
  originallyAvailableAt?: RFCDate | undefined;
  addedAt: number;
  /**
   * Unix epoch datetime in seconds
   */
  updatedAt?: number | undefined;
  /**
   * The URL for the audience rating image.
   */
  audienceRatingImage?: string | undefined;
  /**
   * The source from which chapter data is derived.
   */
  chapterSource?: string | undefined;
  /**
   * The primary extra key associated with this media item.
   */
  primaryExtraKey?: string | undefined;
  /**
   * The original title of the media item (if different).
   */
  originalTitle?: string | undefined;
  /**
   * The rating key of the parent media item.
   */
  parentRatingKey?: string | undefined;
  /**
   * The rating key of the grandparent media item.
   */
  grandparentRatingKey?: string | undefined;
  /**
   * The GUID of the parent media item.
   */
  parentGuid?: string | undefined;
  /**
   * The GUID of the grandparent media item.
   */
  grandparentGuid?: string | undefined;
  /**
   * The slug for the grandparent media item.
   */
  grandparentSlug?: string | undefined;
  /**
   * The key of the grandparent media item.
   */
  grandparentKey?: string | undefined;
  /**
   * The key of the parent media item.
   */
  parentKey?: string | undefined;
  /**
   * The title of the grandparent media item.
   */
  grandparentTitle?: string | undefined;
  /**
   * The thumbnail URL for the grandparent media item.
   */
  grandparentThumb?: string | undefined;
  /**
   * The theme URL for the grandparent media item.
   */
  grandparentTheme?: string | undefined;
  /**
   * The art URL for the grandparent media item.
   */
  grandparentArt?: string | undefined;
  /**
   * The title of the parent media item.
   */
  parentTitle?: string | undefined;
  /**
   * The index position of the parent media item.
   */
  parentIndex?: number | undefined;
  /**
   * The thumbnail URL for the parent media item.
   */
  parentThumb?: string | undefined;
  /**
   * The URL for the rating image.
   */
  ratingImage?: string | undefined;
  /**
   * The number of times this media item has been viewed.
   */
  viewCount?: number | undefined;
  /**
   * The current playback offset (in milliseconds).
   */
  viewOffset?: number | undefined;
  /**
   * The number of times this media item has been skipped.
   */
  skipCount?: number | undefined;
  /**
   * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
   */
  subtype?: string | undefined;
  /**
   * The Unix timestamp representing the last time the item was rated.
   */
  lastRatedAt?: number | undefined;
  /**
   * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
   */
  createdAtAccuracy?: string | undefined;
  /**
   * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
   */
  createdAtTZOffset?: string | undefined;
  /**
   * Unix timestamp for when the media item was last viewed.
   */
  lastViewedAt?: number | undefined;
  /**
   * The rating provided by a user for the item. This value is expressed as a decimal number.
   */
  userRating?: number | undefined;
  image?: Array<GetLibraryItemsImage> | undefined;
  ultraBlurColors?: GetLibraryItemsUltraBlurColors | undefined;
  guids?: Array<GetLibraryItemsGuids> | undefined;
  /**
   * The identifier for the library section.
   */
  librarySectionID?: number | undefined;
  /**
   * The title of the library section.
   */
  librarySectionTitle?: string | undefined;
  /**
   * The key corresponding to the library section.
   */
  librarySectionKey?: string | undefined;
  /**
   * Setting that indicates the episode ordering for the show.
   *
   * @remarks
   * Options:
   *   - None = Library default
   *   - tmdbAiring = The Movie Database (Aired)
   *   - aired = TheTVDB (Aired)
   *   - dvd = TheTVDB (DVD)
   *   - absolute = TheTVDB (Absolute)
   */
  showOrdering?: ShowOrderingOpen | undefined;
  /**
   * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
   *
   * @remarks
   */
  flattenSeasons?: FlattenSeasonsOpen | undefined;
  /**
   * Indicates whether child items should be skipped.
   */
  skipChildren?: boolean | undefined;
  media?: Array<GetLibraryItemsMedia> | undefined;
  genre?: Array<GetLibraryItemsGenre> | undefined;
  country?: Array<GetLibraryItemsCountry> | undefined;
  director?: Array<GetLibraryItemsDirector> | undefined;
  writer?: Array<GetLibraryItemsWriter> | undefined;
  producer?: Array<GetLibraryItemsProducer> | undefined;
  collection?: Array<GetLibraryItemsCollection> | undefined;
  role?: Array<GetLibraryItemsRole> | undefined;
  ratings?: Array<Ratings> | undefined;
  similar?: Array<GetLibraryItemsSimilar> | undefined;
  location?: Array<GetLibraryItemsLocation> | undefined;
  chapter?: Array<Chapter> | undefined;
  marker?: Array<Marker> | undefined;
  extras?: Extras | undefined;
};

export type GetLibraryItemsFilter = {
  filter: string;
  filterType: string;
  key: string;
  title: string;
  type: string;
};

/**
 * The direction of the sort. Can be either `asc` or `desc`.
 *
 * @remarks
 */
export enum GetLibraryItemsActiveDirection {
  Ascending = "asc",
  Descending = "desc",
}

/**
 * The direction of the sort. Can be either `asc` or `desc`.
 *
 * @remarks
 */
export enum GetLibraryItemsDefaultDirection {
  Ascending = "asc",
  Descending = "desc",
}

export type GetLibraryItemsSort = {
  default?: string | undefined;
  active?: boolean | undefined;
  /**
   * The direction of the sort. Can be either `asc` or `desc`.
   *
   * @remarks
   */
  activeDirection?: GetLibraryItemsActiveDirection | undefined;
  /**
   * The direction of the sort. Can be either `asc` or `desc`.
   *
   * @remarks
   */
  defaultDirection?: GetLibraryItemsDefaultDirection | undefined;
  descKey?: string | undefined;
  firstCharacterKey?: string | undefined;
  key: string;
  title: string;
};

export type GetLibraryItemsField = {
  key: string;
  title: string;
  type: string;
  subType?: string | undefined;
};

export type GetLibraryItemsLibraryType = {
  key: string;
  type: string;
  title: string;
  active: boolean;
  filter?: Array<GetLibraryItemsFilter> | undefined;
  sort?: Array<GetLibraryItemsSort> | undefined;
  field?: Array<GetLibraryItemsField> | undefined;
};

export type GetLibraryItemsOperator = {
  key: string;
  title: string;
};

export type GetLibraryItemsFieldType = {
  type: string;
  operator: Array<GetLibraryItemsOperator>;
};

/**
 * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
 *
 * @remarks
 */
export type GetLibraryItemsMeta = {
  type?: Array<GetLibraryItemsLibraryType> | undefined;
  fieldType?: Array<GetLibraryItemsFieldType> | undefined;
};

export type GetLibraryItemsMediaContainer = {
  /**
   * Number of media items returned in this response.
   */
  size: number;
  /**
   * Total number of media items in the library.
   */
  totalSize: number;
  /**
   * Offset value for pagination.
   */
  offset: number;
  /**
   * The content type or mode.
   */
  content: string;
  /**
   * Indicates whether syncing is allowed.
   */
  allowSync: boolean;
  /**
   * Specifies whether caching is disabled.
   */
  nocache: boolean;
  /**
   * URL for the background artwork of the media container.
   */
  art: string;
  /**
   * An plugin identifier for the media container.
   */
  identifier: string;
  /**
   * The unique identifier for the library section.
   */
  librarySectionID?: number | undefined;
  /**
   * The title of the library section.
   */
  librarySectionTitle?: string | undefined;
  /**
   * The universally unique identifier for the library section.
   */
  librarySectionUUID?: string | undefined;
  /**
   * The prefix used for media tag resource paths.
   */
  mediaTagPrefix: string;
  /**
   * The version number for media tags.
   */
  mediaTagVersion: number;
  /**
   * URL for the thumbnail image of the media container.
   */
  thumb: string;
  /**
   * The primary title of the media container.
   */
  title1: string;
  /**
   * The secondary title of the media container.
   */
  title2: string;
  /**
   * Identifier for the view group layout.
   */
  viewGroup: string;
  /**
   * Identifier for the view mode.
   */
  viewMode?: string | undefined;
  /**
   * Indicates if the media container has mixed parents.
   */
  mixedParents?: boolean | undefined;
  /**
   * An array of metadata items.
   */
  metadata: Array<GetLibraryItemsMetadata>;
  /**
   * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
   *
   * @remarks
   */
  meta?: GetLibraryItemsMeta | undefined;
};

/**
 * The contents of the library by section and tag
 */
export type GetLibraryItemsResponseBody = {
  mediaContainer?: GetLibraryItemsMediaContainer | undefined;
};

export type GetLibraryItemsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The contents of the library by section and tag
   */
  object?: GetLibraryItemsResponseBody | undefined;
};

/** @internal */
export const Tag$inboundSchema: z.ZodType<TagOpen, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Tag),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Tag$outboundSchema: z.ZodType<TagOpen, z.ZodTypeDef, TagOpen> = z
  .union([
    z.nativeEnum(Tag),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
}

/** @internal */
export const IncludeGuids$inboundSchema: z.ZodNativeEnum<typeof IncludeGuids> =
  z.nativeEnum(IncludeGuids);

/** @internal */
export const IncludeGuids$outboundSchema: z.ZodNativeEnum<typeof IncludeGuids> =
  IncludeGuids$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeGuids$ {
  /** @deprecated use `IncludeGuids$inboundSchema` instead. */
  export const inboundSchema = IncludeGuids$inboundSchema;
  /** @deprecated use `IncludeGuids$outboundSchema` instead. */
  export const outboundSchema = IncludeGuids$outboundSchema;
}

/** @internal */
export const GetLibraryItemsQueryParamType$inboundSchema: z.ZodType<
  GetLibraryItemsQueryParamTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetLibraryItemsQueryParamType),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetLibraryItemsQueryParamType$outboundSchema: z.ZodType<
  GetLibraryItemsQueryParamTypeOpen,
  z.ZodTypeDef,
  GetLibraryItemsQueryParamTypeOpen
> = z.union([
  z.nativeEnum(GetLibraryItemsQueryParamType),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsQueryParamType$ {
  /** @deprecated use `GetLibraryItemsQueryParamType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsQueryParamType$inboundSchema;
  /** @deprecated use `GetLibraryItemsQueryParamType$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsQueryParamType$outboundSchema;
}

/** @internal */
export const GetLibraryItemsQueryParamIncludeMeta$inboundSchema:
  z.ZodNativeEnum<typeof GetLibraryItemsQueryParamIncludeMeta> = z.nativeEnum(
    GetLibraryItemsQueryParamIncludeMeta,
  );

/** @internal */
export const GetLibraryItemsQueryParamIncludeMeta$outboundSchema:
  z.ZodNativeEnum<typeof GetLibraryItemsQueryParamIncludeMeta> =
    GetLibraryItemsQueryParamIncludeMeta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsQueryParamIncludeMeta$ {
  /** @deprecated use `GetLibraryItemsQueryParamIncludeMeta$inboundSchema` instead. */
  export const inboundSchema =
    GetLibraryItemsQueryParamIncludeMeta$inboundSchema;
  /** @deprecated use `GetLibraryItemsQueryParamIncludeMeta$outboundSchema` instead. */
  export const outboundSchema =
    GetLibraryItemsQueryParamIncludeMeta$outboundSchema;
}

/** @internal */
export const GetLibraryItemsRequest$inboundSchema: z.ZodType<
  GetLibraryItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: Tag$inboundSchema,
  includeGuids: IncludeGuids$inboundSchema,
  type: GetLibraryItemsQueryParamType$inboundSchema,
  sectionKey: z.number().int(),
  includeMeta: GetLibraryItemsQueryParamIncludeMeta$inboundSchema,
  "X-Plex-Container-Start": z.number().int().default(0),
  "X-Plex-Container-Size": z.number().int().default(50),
}).transform((v) => {
  return remap$(v, {
    "X-Plex-Container-Start": "xPlexContainerStart",
    "X-Plex-Container-Size": "xPlexContainerSize",
  });
});

/** @internal */
export type GetLibraryItemsRequest$Outbound = {
  tag: string;
  includeGuids: number;
  type: number;
  sectionKey: number;
  includeMeta: number;
  "X-Plex-Container-Start": number;
  "X-Plex-Container-Size": number;
};

/** @internal */
export const GetLibraryItemsRequest$outboundSchema: z.ZodType<
  GetLibraryItemsRequest$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsRequest
> = z.object({
  tag: Tag$outboundSchema,
  includeGuids: IncludeGuids$outboundSchema.default(IncludeGuids.Disable),
  type: GetLibraryItemsQueryParamType$outboundSchema,
  sectionKey: z.number().int(),
  includeMeta: GetLibraryItemsQueryParamIncludeMeta$outboundSchema.default(
    GetLibraryItemsQueryParamIncludeMeta.Disable,
  ),
  xPlexContainerStart: z.number().int().default(0),
  xPlexContainerSize: z.number().int().default(50),
}).transform((v) => {
  return remap$(v, {
    xPlexContainerStart: "X-Plex-Container-Start",
    xPlexContainerSize: "X-Plex-Container-Size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsRequest$ {
  /** @deprecated use `GetLibraryItemsRequest$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsRequest$inboundSchema;
  /** @deprecated use `GetLibraryItemsRequest$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsRequest$outboundSchema;
  /** @deprecated use `GetLibraryItemsRequest$Outbound` instead. */
  export type Outbound = GetLibraryItemsRequest$Outbound;
}

export function getLibraryItemsRequestToJSON(
  getLibraryItemsRequest: GetLibraryItemsRequest,
): string {
  return JSON.stringify(
    GetLibraryItemsRequest$outboundSchema.parse(getLibraryItemsRequest),
  );
}

export function getLibraryItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsRequest' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsType$inboundSchema: z.ZodType<
  GetLibraryItemsTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetLibraryItemsType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetLibraryItemsType$outboundSchema: z.ZodType<
  GetLibraryItemsTypeOpen,
  z.ZodTypeDef,
  GetLibraryItemsTypeOpen
> = z.union([
  z.nativeEnum(GetLibraryItemsType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsType$ {
  /** @deprecated use `GetLibraryItemsType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsType$inboundSchema;
  /** @deprecated use `GetLibraryItemsType$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsType$outboundSchema;
}

/** @internal */
export const GetLibraryItemsLibraryResponseType$inboundSchema: z.ZodType<
  GetLibraryItemsLibraryResponseTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetLibraryItemsLibraryResponseType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetLibraryItemsLibraryResponseType$outboundSchema: z.ZodType<
  GetLibraryItemsLibraryResponseTypeOpen,
  z.ZodTypeDef,
  GetLibraryItemsLibraryResponseTypeOpen
> = z.union([
  z.nativeEnum(GetLibraryItemsLibraryResponseType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsLibraryResponseType$ {
  /** @deprecated use `GetLibraryItemsLibraryResponseType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsLibraryResponseType$inboundSchema;
  /** @deprecated use `GetLibraryItemsLibraryResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetLibraryItemsLibraryResponseType$outboundSchema;
}

/** @internal */
export const GetLibraryItemsImage$inboundSchema: z.ZodType<
  GetLibraryItemsImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  alt: z.string(),
  type: GetLibraryItemsLibraryResponseType$inboundSchema,
  url: z.string(),
});

/** @internal */
export type GetLibraryItemsImage$Outbound = {
  alt: string;
  type: string;
  url: string;
};

/** @internal */
export const GetLibraryItemsImage$outboundSchema: z.ZodType<
  GetLibraryItemsImage$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsImage
> = z.object({
  alt: z.string(),
  type: GetLibraryItemsLibraryResponseType$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsImage$ {
  /** @deprecated use `GetLibraryItemsImage$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsImage$inboundSchema;
  /** @deprecated use `GetLibraryItemsImage$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsImage$outboundSchema;
  /** @deprecated use `GetLibraryItemsImage$Outbound` instead. */
  export type Outbound = GetLibraryItemsImage$Outbound;
}

export function getLibraryItemsImageToJSON(
  getLibraryItemsImage: GetLibraryItemsImage,
): string {
  return JSON.stringify(
    GetLibraryItemsImage$outboundSchema.parse(getLibraryItemsImage),
  );
}

export function getLibraryItemsImageFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsImage' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsUltraBlurColors$inboundSchema: z.ZodType<
  GetLibraryItemsUltraBlurColors,
  z.ZodTypeDef,
  unknown
> = z.object({
  topLeft: z.string(),
  topRight: z.string(),
  bottomRight: z.string(),
  bottomLeft: z.string(),
});

/** @internal */
export type GetLibraryItemsUltraBlurColors$Outbound = {
  topLeft: string;
  topRight: string;
  bottomRight: string;
  bottomLeft: string;
};

/** @internal */
export const GetLibraryItemsUltraBlurColors$outboundSchema: z.ZodType<
  GetLibraryItemsUltraBlurColors$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsUltraBlurColors
> = z.object({
  topLeft: z.string(),
  topRight: z.string(),
  bottomRight: z.string(),
  bottomLeft: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsUltraBlurColors$ {
  /** @deprecated use `GetLibraryItemsUltraBlurColors$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsUltraBlurColors$inboundSchema;
  /** @deprecated use `GetLibraryItemsUltraBlurColors$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsUltraBlurColors$outboundSchema;
  /** @deprecated use `GetLibraryItemsUltraBlurColors$Outbound` instead. */
  export type Outbound = GetLibraryItemsUltraBlurColors$Outbound;
}

export function getLibraryItemsUltraBlurColorsToJSON(
  getLibraryItemsUltraBlurColors: GetLibraryItemsUltraBlurColors,
): string {
  return JSON.stringify(
    GetLibraryItemsUltraBlurColors$outboundSchema.parse(
      getLibraryItemsUltraBlurColors,
    ),
  );
}

export function getLibraryItemsUltraBlurColorsFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsUltraBlurColors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsUltraBlurColors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsUltraBlurColors' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsGuids$inboundSchema: z.ZodType<
  GetLibraryItemsGuids,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetLibraryItemsGuids$Outbound = {
  id: string;
};

/** @internal */
export const GetLibraryItemsGuids$outboundSchema: z.ZodType<
  GetLibraryItemsGuids$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsGuids
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsGuids$ {
  /** @deprecated use `GetLibraryItemsGuids$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsGuids$inboundSchema;
  /** @deprecated use `GetLibraryItemsGuids$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsGuids$outboundSchema;
  /** @deprecated use `GetLibraryItemsGuids$Outbound` instead. */
  export type Outbound = GetLibraryItemsGuids$Outbound;
}

export function getLibraryItemsGuidsToJSON(
  getLibraryItemsGuids: GetLibraryItemsGuids,
): string {
  return JSON.stringify(
    GetLibraryItemsGuids$outboundSchema.parse(getLibraryItemsGuids),
  );
}

export function getLibraryItemsGuidsFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsGuids, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsGuids$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsGuids' from JSON`,
  );
}

/** @internal */
export const ShowOrdering$inboundSchema: z.ZodType<
  ShowOrderingOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ShowOrdering),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ShowOrdering$outboundSchema: z.ZodType<
  ShowOrderingOpen,
  z.ZodTypeDef,
  ShowOrderingOpen
> = z.union([
  z.nativeEnum(ShowOrdering),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowOrdering$ {
  /** @deprecated use `ShowOrdering$inboundSchema` instead. */
  export const inboundSchema = ShowOrdering$inboundSchema;
  /** @deprecated use `ShowOrdering$outboundSchema` instead. */
  export const outboundSchema = ShowOrdering$outboundSchema;
}

/** @internal */
export const FlattenSeasons$inboundSchema: z.ZodType<
  FlattenSeasonsOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(FlattenSeasons),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const FlattenSeasons$outboundSchema: z.ZodType<
  FlattenSeasonsOpen,
  z.ZodTypeDef,
  FlattenSeasonsOpen
> = z.union([
  z.nativeEnum(FlattenSeasons),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenSeasons$ {
  /** @deprecated use `FlattenSeasons$inboundSchema` instead. */
  export const inboundSchema = FlattenSeasons$inboundSchema;
  /** @deprecated use `FlattenSeasons$outboundSchema` instead. */
  export const outboundSchema = FlattenSeasons$outboundSchema;
}

/** @internal */
export const OptimizedForStreaming1$inboundSchema: z.ZodNativeEnum<
  typeof OptimizedForStreaming1
> = z.nativeEnum(OptimizedForStreaming1);

/** @internal */
export const OptimizedForStreaming1$outboundSchema: z.ZodNativeEnum<
  typeof OptimizedForStreaming1
> = OptimizedForStreaming1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OptimizedForStreaming1$ {
  /** @deprecated use `OptimizedForStreaming1$inboundSchema` instead. */
  export const inboundSchema = OptimizedForStreaming1$inboundSchema;
  /** @deprecated use `OptimizedForStreaming1$outboundSchema` instead. */
  export const outboundSchema = OptimizedForStreaming1$outboundSchema;
}

/** @internal */
export const GetLibraryItemsOptimizedForStreaming$inboundSchema: z.ZodType<
  GetLibraryItemsOptimizedForStreaming,
  z.ZodTypeDef,
  unknown
> = z.union([OptimizedForStreaming1$inboundSchema, z.boolean()]);

/** @internal */
export type GetLibraryItemsOptimizedForStreaming$Outbound = number | boolean;

/** @internal */
export const GetLibraryItemsOptimizedForStreaming$outboundSchema: z.ZodType<
  GetLibraryItemsOptimizedForStreaming$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsOptimizedForStreaming
> = z.union([OptimizedForStreaming1$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsOptimizedForStreaming$ {
  /** @deprecated use `GetLibraryItemsOptimizedForStreaming$inboundSchema` instead. */
  export const inboundSchema =
    GetLibraryItemsOptimizedForStreaming$inboundSchema;
  /** @deprecated use `GetLibraryItemsOptimizedForStreaming$outboundSchema` instead. */
  export const outboundSchema =
    GetLibraryItemsOptimizedForStreaming$outboundSchema;
  /** @deprecated use `GetLibraryItemsOptimizedForStreaming$Outbound` instead. */
  export type Outbound = GetLibraryItemsOptimizedForStreaming$Outbound;
}

export function getLibraryItemsOptimizedForStreamingToJSON(
  getLibraryItemsOptimizedForStreaming: GetLibraryItemsOptimizedForStreaming,
): string {
  return JSON.stringify(
    GetLibraryItemsOptimizedForStreaming$outboundSchema.parse(
      getLibraryItemsOptimizedForStreaming,
    ),
  );
}

export function getLibraryItemsOptimizedForStreamingFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsOptimizedForStreaming, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetLibraryItemsOptimizedForStreaming$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsOptimizedForStreaming' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsOptimizedForStreaming1$inboundSchema:
  z.ZodNativeEnum<typeof GetLibraryItemsOptimizedForStreaming1> = z.nativeEnum(
    GetLibraryItemsOptimizedForStreaming1,
  );

/** @internal */
export const GetLibraryItemsOptimizedForStreaming1$outboundSchema:
  z.ZodNativeEnum<typeof GetLibraryItemsOptimizedForStreaming1> =
    GetLibraryItemsOptimizedForStreaming1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsOptimizedForStreaming1$ {
  /** @deprecated use `GetLibraryItemsOptimizedForStreaming1$inboundSchema` instead. */
  export const inboundSchema =
    GetLibraryItemsOptimizedForStreaming1$inboundSchema;
  /** @deprecated use `GetLibraryItemsOptimizedForStreaming1$outboundSchema` instead. */
  export const outboundSchema =
    GetLibraryItemsOptimizedForStreaming1$outboundSchema;
}

/** @internal */
export const GetLibraryItemsLibraryOptimizedForStreaming$inboundSchema:
  z.ZodType<
    GetLibraryItemsLibraryOptimizedForStreaming,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetLibraryItemsOptimizedForStreaming1$inboundSchema,
    z.boolean(),
  ]);

/** @internal */
export type GetLibraryItemsLibraryOptimizedForStreaming$Outbound =
  | number
  | boolean;

/** @internal */
export const GetLibraryItemsLibraryOptimizedForStreaming$outboundSchema:
  z.ZodType<
    GetLibraryItemsLibraryOptimizedForStreaming$Outbound,
    z.ZodTypeDef,
    GetLibraryItemsLibraryOptimizedForStreaming
  > = z.union([
    GetLibraryItemsOptimizedForStreaming1$outboundSchema,
    z.boolean(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsLibraryOptimizedForStreaming$ {
  /** @deprecated use `GetLibraryItemsLibraryOptimizedForStreaming$inboundSchema` instead. */
  export const inboundSchema =
    GetLibraryItemsLibraryOptimizedForStreaming$inboundSchema;
  /** @deprecated use `GetLibraryItemsLibraryOptimizedForStreaming$outboundSchema` instead. */
  export const outboundSchema =
    GetLibraryItemsLibraryOptimizedForStreaming$outboundSchema;
  /** @deprecated use `GetLibraryItemsLibraryOptimizedForStreaming$Outbound` instead. */
  export type Outbound = GetLibraryItemsLibraryOptimizedForStreaming$Outbound;
}

export function getLibraryItemsLibraryOptimizedForStreamingToJSON(
  getLibraryItemsLibraryOptimizedForStreaming:
    GetLibraryItemsLibraryOptimizedForStreaming,
): string {
  return JSON.stringify(
    GetLibraryItemsLibraryOptimizedForStreaming$outboundSchema.parse(
      getLibraryItemsLibraryOptimizedForStreaming,
    ),
  );
}

export function getLibraryItemsLibraryOptimizedForStreamingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetLibraryItemsLibraryOptimizedForStreaming,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetLibraryItemsLibraryOptimizedForStreaming$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetLibraryItemsLibraryOptimizedForStreaming' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsHasThumbnail$inboundSchema: z.ZodNativeEnum<
  typeof GetLibraryItemsHasThumbnail
> = z.nativeEnum(GetLibraryItemsHasThumbnail);

/** @internal */
export const GetLibraryItemsHasThumbnail$outboundSchema: z.ZodNativeEnum<
  typeof GetLibraryItemsHasThumbnail
> = GetLibraryItemsHasThumbnail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsHasThumbnail$ {
  /** @deprecated use `GetLibraryItemsHasThumbnail$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsHasThumbnail$inboundSchema;
  /** @deprecated use `GetLibraryItemsHasThumbnail$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsHasThumbnail$outboundSchema;
}

/** @internal */
export const GetLibraryItemsPart$inboundSchema: z.ZodType<
  GetLibraryItemsPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessible: z.boolean().optional(),
  exists: z.boolean().optional(),
  id: z.number().int(),
  key: z.string().optional(),
  indexes: z.string().optional(),
  duration: z.number().int().optional(),
  file: z.string().optional(),
  size: z.number().int().optional(),
  packetLength: z.number().int().optional(),
  container: z.string().optional(),
  videoProfile: z.string().optional(),
  audioProfile: z.string().optional(),
  has64bitOffsets: z.boolean().optional(),
  optimizedForStreaming: z.union([
    GetLibraryItemsOptimizedForStreaming1$inboundSchema,
    z.boolean(),
  ]).optional(),
  hasThumbnail: GetLibraryItemsHasThumbnail$inboundSchema.default(
    GetLibraryItemsHasThumbnail.False,
  ),
});

/** @internal */
export type GetLibraryItemsPart$Outbound = {
  accessible?: boolean | undefined;
  exists?: boolean | undefined;
  id: number;
  key?: string | undefined;
  indexes?: string | undefined;
  duration?: number | undefined;
  file?: string | undefined;
  size?: number | undefined;
  packetLength?: number | undefined;
  container?: string | undefined;
  videoProfile?: string | undefined;
  audioProfile?: string | undefined;
  has64bitOffsets?: boolean | undefined;
  optimizedForStreaming?: number | boolean | undefined;
  hasThumbnail: string;
};

/** @internal */
export const GetLibraryItemsPart$outboundSchema: z.ZodType<
  GetLibraryItemsPart$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsPart
> = z.object({
  accessible: z.boolean().optional(),
  exists: z.boolean().optional(),
  id: z.number().int(),
  key: z.string().optional(),
  indexes: z.string().optional(),
  duration: z.number().int().optional(),
  file: z.string().optional(),
  size: z.number().int().optional(),
  packetLength: z.number().int().optional(),
  container: z.string().optional(),
  videoProfile: z.string().optional(),
  audioProfile: z.string().optional(),
  has64bitOffsets: z.boolean().optional(),
  optimizedForStreaming: z.union([
    GetLibraryItemsOptimizedForStreaming1$outboundSchema,
    z.boolean(),
  ]).optional(),
  hasThumbnail: GetLibraryItemsHasThumbnail$outboundSchema.default(
    GetLibraryItemsHasThumbnail.False,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsPart$ {
  /** @deprecated use `GetLibraryItemsPart$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsPart$inboundSchema;
  /** @deprecated use `GetLibraryItemsPart$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsPart$outboundSchema;
  /** @deprecated use `GetLibraryItemsPart$Outbound` instead. */
  export type Outbound = GetLibraryItemsPart$Outbound;
}

export function getLibraryItemsPartToJSON(
  getLibraryItemsPart: GetLibraryItemsPart,
): string {
  return JSON.stringify(
    GetLibraryItemsPart$outboundSchema.parse(getLibraryItemsPart),
  );
}

export function getLibraryItemsPartFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsPart' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsMedia$inboundSchema: z.ZodType<
  GetLibraryItemsMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  duration: z.number().int().optional(),
  bitrate: z.number().int().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  aspectRatio: z.number().optional(),
  audioChannels: z.number().int().optional(),
  displayOffset: z.number().int().optional(),
  audioCodec: z.string().optional(),
  videoCodec: z.string().optional(),
  videoResolution: z.string().optional(),
  container: z.string().optional(),
  videoFrameRate: z.string().optional(),
  videoProfile: z.string().optional(),
  hasVoiceActivity: z.boolean().optional(),
  audioProfile: z.string().optional(),
  optimizedForStreaming: z.union([
    OptimizedForStreaming1$inboundSchema,
    z.boolean(),
  ]).optional(),
  has64bitOffsets: z.boolean().optional(),
  Part: z.array(z.lazy(() => GetLibraryItemsPart$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Part": "part",
  });
});

/** @internal */
export type GetLibraryItemsMedia$Outbound = {
  id: number;
  duration?: number | undefined;
  bitrate?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  aspectRatio?: number | undefined;
  audioChannels?: number | undefined;
  displayOffset?: number | undefined;
  audioCodec?: string | undefined;
  videoCodec?: string | undefined;
  videoResolution?: string | undefined;
  container?: string | undefined;
  videoFrameRate?: string | undefined;
  videoProfile?: string | undefined;
  hasVoiceActivity?: boolean | undefined;
  audioProfile?: string | undefined;
  optimizedForStreaming?: number | boolean | undefined;
  has64bitOffsets?: boolean | undefined;
  Part?: Array<GetLibraryItemsPart$Outbound> | undefined;
};

/** @internal */
export const GetLibraryItemsMedia$outboundSchema: z.ZodType<
  GetLibraryItemsMedia$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsMedia
> = z.object({
  id: z.number().int(),
  duration: z.number().int().optional(),
  bitrate: z.number().int().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  aspectRatio: z.number().optional(),
  audioChannels: z.number().int().optional(),
  displayOffset: z.number().int().optional(),
  audioCodec: z.string().optional(),
  videoCodec: z.string().optional(),
  videoResolution: z.string().optional(),
  container: z.string().optional(),
  videoFrameRate: z.string().optional(),
  videoProfile: z.string().optional(),
  hasVoiceActivity: z.boolean().optional(),
  audioProfile: z.string().optional(),
  optimizedForStreaming: z.union([
    OptimizedForStreaming1$outboundSchema,
    z.boolean(),
  ]).optional(),
  has64bitOffsets: z.boolean().optional(),
  part: z.array(z.lazy(() => GetLibraryItemsPart$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    part: "Part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsMedia$ {
  /** @deprecated use `GetLibraryItemsMedia$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsMedia$inboundSchema;
  /** @deprecated use `GetLibraryItemsMedia$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsMedia$outboundSchema;
  /** @deprecated use `GetLibraryItemsMedia$Outbound` instead. */
  export type Outbound = GetLibraryItemsMedia$Outbound;
}

export function getLibraryItemsMediaToJSON(
  getLibraryItemsMedia: GetLibraryItemsMedia,
): string {
  return JSON.stringify(
    GetLibraryItemsMedia$outboundSchema.parse(getLibraryItemsMedia),
  );
}

export function getLibraryItemsMediaFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsMedia' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsGenre$inboundSchema: z.ZodType<
  GetLibraryItemsGenre,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/** @internal */
export type GetLibraryItemsGenre$Outbound = {
  id: number;
  tag: string;
};

/** @internal */
export const GetLibraryItemsGenre$outboundSchema: z.ZodType<
  GetLibraryItemsGenre$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsGenre
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsGenre$ {
  /** @deprecated use `GetLibraryItemsGenre$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsGenre$inboundSchema;
  /** @deprecated use `GetLibraryItemsGenre$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsGenre$outboundSchema;
  /** @deprecated use `GetLibraryItemsGenre$Outbound` instead. */
  export type Outbound = GetLibraryItemsGenre$Outbound;
}

export function getLibraryItemsGenreToJSON(
  getLibraryItemsGenre: GetLibraryItemsGenre,
): string {
  return JSON.stringify(
    GetLibraryItemsGenre$outboundSchema.parse(getLibraryItemsGenre),
  );
}

export function getLibraryItemsGenreFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsGenre, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsGenre$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsGenre' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsCountry$inboundSchema: z.ZodType<
  GetLibraryItemsCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/** @internal */
export type GetLibraryItemsCountry$Outbound = {
  id: number;
  tag: string;
};

/** @internal */
export const GetLibraryItemsCountry$outboundSchema: z.ZodType<
  GetLibraryItemsCountry$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsCountry
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsCountry$ {
  /** @deprecated use `GetLibraryItemsCountry$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsCountry$inboundSchema;
  /** @deprecated use `GetLibraryItemsCountry$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsCountry$outboundSchema;
  /** @deprecated use `GetLibraryItemsCountry$Outbound` instead. */
  export type Outbound = GetLibraryItemsCountry$Outbound;
}

export function getLibraryItemsCountryToJSON(
  getLibraryItemsCountry: GetLibraryItemsCountry,
): string {
  return JSON.stringify(
    GetLibraryItemsCountry$outboundSchema.parse(getLibraryItemsCountry),
  );
}

export function getLibraryItemsCountryFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsCountry' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsDirector$inboundSchema: z.ZodType<
  GetLibraryItemsDirector,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetLibraryItemsDirector$Outbound = {
  id: number;
  tag: string;
  thumb?: string | undefined;
};

/** @internal */
export const GetLibraryItemsDirector$outboundSchema: z.ZodType<
  GetLibraryItemsDirector$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsDirector
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsDirector$ {
  /** @deprecated use `GetLibraryItemsDirector$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsDirector$inboundSchema;
  /** @deprecated use `GetLibraryItemsDirector$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsDirector$outboundSchema;
  /** @deprecated use `GetLibraryItemsDirector$Outbound` instead. */
  export type Outbound = GetLibraryItemsDirector$Outbound;
}

export function getLibraryItemsDirectorToJSON(
  getLibraryItemsDirector: GetLibraryItemsDirector,
): string {
  return JSON.stringify(
    GetLibraryItemsDirector$outboundSchema.parse(getLibraryItemsDirector),
  );
}

export function getLibraryItemsDirectorFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsDirector, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsDirector$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsDirector' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsWriter$inboundSchema: z.ZodType<
  GetLibraryItemsWriter,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetLibraryItemsWriter$Outbound = {
  id: number;
  tag: string;
  thumb?: string | undefined;
};

/** @internal */
export const GetLibraryItemsWriter$outboundSchema: z.ZodType<
  GetLibraryItemsWriter$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsWriter
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsWriter$ {
  /** @deprecated use `GetLibraryItemsWriter$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsWriter$inboundSchema;
  /** @deprecated use `GetLibraryItemsWriter$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsWriter$outboundSchema;
  /** @deprecated use `GetLibraryItemsWriter$Outbound` instead. */
  export type Outbound = GetLibraryItemsWriter$Outbound;
}

export function getLibraryItemsWriterToJSON(
  getLibraryItemsWriter: GetLibraryItemsWriter,
): string {
  return JSON.stringify(
    GetLibraryItemsWriter$outboundSchema.parse(getLibraryItemsWriter),
  );
}

export function getLibraryItemsWriterFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsWriter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsWriter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsWriter' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsProducer$inboundSchema: z.ZodType<
  GetLibraryItemsProducer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  filter: z.string(),
  tag: z.string(),
  tagKey: z.string(),
  role: z.string().optional(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetLibraryItemsProducer$Outbound = {
  id: number;
  filter: string;
  tag: string;
  tagKey: string;
  role?: string | undefined;
  thumb?: string | undefined;
};

/** @internal */
export const GetLibraryItemsProducer$outboundSchema: z.ZodType<
  GetLibraryItemsProducer$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsProducer
> = z.object({
  id: z.number().int(),
  filter: z.string(),
  tag: z.string(),
  tagKey: z.string(),
  role: z.string().optional(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsProducer$ {
  /** @deprecated use `GetLibraryItemsProducer$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsProducer$inboundSchema;
  /** @deprecated use `GetLibraryItemsProducer$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsProducer$outboundSchema;
  /** @deprecated use `GetLibraryItemsProducer$Outbound` instead. */
  export type Outbound = GetLibraryItemsProducer$Outbound;
}

export function getLibraryItemsProducerToJSON(
  getLibraryItemsProducer: GetLibraryItemsProducer,
): string {
  return JSON.stringify(
    GetLibraryItemsProducer$outboundSchema.parse(getLibraryItemsProducer),
  );
}

export function getLibraryItemsProducerFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsProducer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsProducer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsProducer' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsCollection$inboundSchema: z.ZodType<
  GetLibraryItemsCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string(),
});

/** @internal */
export type GetLibraryItemsCollection$Outbound = {
  tag: string;
};

/** @internal */
export const GetLibraryItemsCollection$outboundSchema: z.ZodType<
  GetLibraryItemsCollection$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsCollection
> = z.object({
  tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsCollection$ {
  /** @deprecated use `GetLibraryItemsCollection$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsCollection$inboundSchema;
  /** @deprecated use `GetLibraryItemsCollection$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsCollection$outboundSchema;
  /** @deprecated use `GetLibraryItemsCollection$Outbound` instead. */
  export type Outbound = GetLibraryItemsCollection$Outbound;
}

export function getLibraryItemsCollectionToJSON(
  getLibraryItemsCollection: GetLibraryItemsCollection,
): string {
  return JSON.stringify(
    GetLibraryItemsCollection$outboundSchema.parse(getLibraryItemsCollection),
  );
}

export function getLibraryItemsCollectionFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsCollection' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsRole$inboundSchema: z.ZodType<
  GetLibraryItemsRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  role: z.string().optional(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetLibraryItemsRole$Outbound = {
  id: number;
  tag: string;
  role?: string | undefined;
  thumb?: string | undefined;
};

/** @internal */
export const GetLibraryItemsRole$outboundSchema: z.ZodType<
  GetLibraryItemsRole$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsRole
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  role: z.string().optional(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsRole$ {
  /** @deprecated use `GetLibraryItemsRole$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsRole$inboundSchema;
  /** @deprecated use `GetLibraryItemsRole$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsRole$outboundSchema;
  /** @deprecated use `GetLibraryItemsRole$Outbound` instead. */
  export type Outbound = GetLibraryItemsRole$Outbound;
}

export function getLibraryItemsRoleToJSON(
  getLibraryItemsRole: GetLibraryItemsRole,
): string {
  return JSON.stringify(
    GetLibraryItemsRole$outboundSchema.parse(getLibraryItemsRole),
  );
}

export function getLibraryItemsRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsRole' from JSON`,
  );
}

/** @internal */
export const Ratings$inboundSchema: z.ZodType<Ratings, z.ZodTypeDef, unknown> =
  z.object({
    image: z.string(),
    value: z.number(),
    type: z.string(),
  });

/** @internal */
export type Ratings$Outbound = {
  image: string;
  value: number;
  type: string;
};

/** @internal */
export const Ratings$outboundSchema: z.ZodType<
  Ratings$Outbound,
  z.ZodTypeDef,
  Ratings
> = z.object({
  image: z.string(),
  value: z.number(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ratings$ {
  /** @deprecated use `Ratings$inboundSchema` instead. */
  export const inboundSchema = Ratings$inboundSchema;
  /** @deprecated use `Ratings$outboundSchema` instead. */
  export const outboundSchema = Ratings$outboundSchema;
  /** @deprecated use `Ratings$Outbound` instead. */
  export type Outbound = Ratings$Outbound;
}

export function ratingsToJSON(ratings: Ratings): string {
  return JSON.stringify(Ratings$outboundSchema.parse(ratings));
}

export function ratingsFromJSON(
  jsonString: string,
): SafeParseResult<Ratings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ratings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ratings' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsSimilar$inboundSchema: z.ZodType<
  GetLibraryItemsSimilar,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  filter: z.string(),
  tag: z.string(),
});

/** @internal */
export type GetLibraryItemsSimilar$Outbound = {
  id: number;
  filter: string;
  tag: string;
};

/** @internal */
export const GetLibraryItemsSimilar$outboundSchema: z.ZodType<
  GetLibraryItemsSimilar$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsSimilar
> = z.object({
  id: z.number().int(),
  filter: z.string(),
  tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsSimilar$ {
  /** @deprecated use `GetLibraryItemsSimilar$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsSimilar$inboundSchema;
  /** @deprecated use `GetLibraryItemsSimilar$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsSimilar$outboundSchema;
  /** @deprecated use `GetLibraryItemsSimilar$Outbound` instead. */
  export type Outbound = GetLibraryItemsSimilar$Outbound;
}

export function getLibraryItemsSimilarToJSON(
  getLibraryItemsSimilar: GetLibraryItemsSimilar,
): string {
  return JSON.stringify(
    GetLibraryItemsSimilar$outboundSchema.parse(getLibraryItemsSimilar),
  );
}

export function getLibraryItemsSimilarFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsSimilar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsSimilar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsSimilar' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsLocation$inboundSchema: z.ZodType<
  GetLibraryItemsLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
});

/** @internal */
export type GetLibraryItemsLocation$Outbound = {
  path: string;
};

/** @internal */
export const GetLibraryItemsLocation$outboundSchema: z.ZodType<
  GetLibraryItemsLocation$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsLocation
> = z.object({
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsLocation$ {
  /** @deprecated use `GetLibraryItemsLocation$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsLocation$inboundSchema;
  /** @deprecated use `GetLibraryItemsLocation$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsLocation$outboundSchema;
  /** @deprecated use `GetLibraryItemsLocation$Outbound` instead. */
  export type Outbound = GetLibraryItemsLocation$Outbound;
}

export function getLibraryItemsLocationToJSON(
  getLibraryItemsLocation: GetLibraryItemsLocation,
): string {
  return JSON.stringify(
    GetLibraryItemsLocation$outboundSchema.parse(getLibraryItemsLocation),
  );
}

export function getLibraryItemsLocationFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsLocation' from JSON`,
  );
}

/** @internal */
export const Chapter$inboundSchema: z.ZodType<Chapter, z.ZodTypeDef, unknown> =
  z.object({
    id: z.number().int(),
    filter: z.string(),
    index: z.number().int(),
    startTimeOffset: z.number().int(),
    endTimeOffset: z.number().int(),
    thumb: z.string(),
  });

/** @internal */
export type Chapter$Outbound = {
  id: number;
  filter: string;
  index: number;
  startTimeOffset: number;
  endTimeOffset: number;
  thumb: string;
};

/** @internal */
export const Chapter$outboundSchema: z.ZodType<
  Chapter$Outbound,
  z.ZodTypeDef,
  Chapter
> = z.object({
  id: z.number().int(),
  filter: z.string(),
  index: z.number().int(),
  startTimeOffset: z.number().int(),
  endTimeOffset: z.number().int(),
  thumb: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chapter$ {
  /** @deprecated use `Chapter$inboundSchema` instead. */
  export const inboundSchema = Chapter$inboundSchema;
  /** @deprecated use `Chapter$outboundSchema` instead. */
  export const outboundSchema = Chapter$outboundSchema;
  /** @deprecated use `Chapter$Outbound` instead. */
  export type Outbound = Chapter$Outbound;
}

export function chapterToJSON(chapter: Chapter): string {
  return JSON.stringify(Chapter$outboundSchema.parse(chapter));
}

export function chapterFromJSON(
  jsonString: string,
): SafeParseResult<Chapter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Chapter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Chapter' from JSON`,
  );
}

/** @internal */
export const Attributes$inboundSchema: z.ZodType<
  Attributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  version: z.number().int().optional(),
});

/** @internal */
export type Attributes$Outbound = {
  id: number;
  version?: number | undefined;
};

/** @internal */
export const Attributes$outboundSchema: z.ZodType<
  Attributes$Outbound,
  z.ZodTypeDef,
  Attributes
> = z.object({
  id: z.number().int(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attributes$ {
  /** @deprecated use `Attributes$inboundSchema` instead. */
  export const inboundSchema = Attributes$inboundSchema;
  /** @deprecated use `Attributes$outboundSchema` instead. */
  export const outboundSchema = Attributes$outboundSchema;
  /** @deprecated use `Attributes$Outbound` instead. */
  export type Outbound = Attributes$Outbound;
}

export function attributesToJSON(attributes: Attributes): string {
  return JSON.stringify(Attributes$outboundSchema.parse(attributes));
}

export function attributesFromJSON(
  jsonString: string,
): SafeParseResult<Attributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attributes' from JSON`,
  );
}

/** @internal */
export const Marker$inboundSchema: z.ZodType<Marker, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int(),
    type: z.string(),
    startTimeOffset: z.number().int(),
    endTimeOffset: z.number().int(),
    final: z.boolean().optional(),
    Attributes: z.lazy(() => Attributes$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "Attributes": "attributes",
    });
  });

/** @internal */
export type Marker$Outbound = {
  id: number;
  type: string;
  startTimeOffset: number;
  endTimeOffset: number;
  final?: boolean | undefined;
  Attributes?: Attributes$Outbound | undefined;
};

/** @internal */
export const Marker$outboundSchema: z.ZodType<
  Marker$Outbound,
  z.ZodTypeDef,
  Marker
> = z.object({
  id: z.number().int(),
  type: z.string(),
  startTimeOffset: z.number().int(),
  endTimeOffset: z.number().int(),
  final: z.boolean().optional(),
  attributes: z.lazy(() => Attributes$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "Attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Marker$ {
  /** @deprecated use `Marker$inboundSchema` instead. */
  export const inboundSchema = Marker$inboundSchema;
  /** @deprecated use `Marker$outboundSchema` instead. */
  export const outboundSchema = Marker$outboundSchema;
  /** @deprecated use `Marker$Outbound` instead. */
  export type Outbound = Marker$Outbound;
}

export function markerToJSON(marker: Marker): string {
  return JSON.stringify(Marker$outboundSchema.parse(marker));
}

export function markerFromJSON(
  jsonString: string,
): SafeParseResult<Marker, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Marker$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Marker' from JSON`,
  );
}

/** @internal */
export const Extras$inboundSchema: z.ZodType<Extras, z.ZodTypeDef, unknown> = z
  .object({
    size: z.number().int().optional(),
  });

/** @internal */
export type Extras$Outbound = {
  size?: number | undefined;
};

/** @internal */
export const Extras$outboundSchema: z.ZodType<
  Extras$Outbound,
  z.ZodTypeDef,
  Extras
> = z.object({
  size: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Extras$ {
  /** @deprecated use `Extras$inboundSchema` instead. */
  export const inboundSchema = Extras$inboundSchema;
  /** @deprecated use `Extras$outboundSchema` instead. */
  export const outboundSchema = Extras$outboundSchema;
  /** @deprecated use `Extras$Outbound` instead. */
  export type Outbound = Extras$Outbound;
}

export function extrasToJSON(extras: Extras): string {
  return JSON.stringify(Extras$outboundSchema.parse(extras));
}

export function extrasFromJSON(
  jsonString: string,
): SafeParseResult<Extras, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Extras$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Extras' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsMetadata$inboundSchema: z.ZodType<
  GetLibraryItemsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  ratingKey: z.string(),
  key: z.string(),
  guid: z.string(),
  slug: z.string(),
  studio: z.string().optional(),
  type: GetLibraryItemsType$inboundSchema,
  title: z.string(),
  banner: z.string(),
  titleSort: z.string(),
  contentRating: z.string().optional(),
  summary: z.string(),
  rating: z.number(),
  audienceRating: z.number(),
  year: z.number().int().optional(),
  tagline: z.string(),
  thumb: z.string(),
  art: z.string(),
  theme: z.string(),
  index: z.number().int(),
  leafCount: z.number().int().optional(),
  viewedLeafCount: z.number().int().optional(),
  childCount: z.number().int(),
  seasonCount: z.number().int(),
  duration: z.number().int(),
  originallyAvailableAt: z.string().transform(v => new RFCDate(v)).optional(),
  addedAt: z.number().int(),
  updatedAt: z.number().int().optional(),
  audienceRatingImage: z.string().optional(),
  chapterSource: z.string().optional(),
  primaryExtraKey: z.string().optional(),
  originalTitle: z.string().optional(),
  parentRatingKey: z.string().optional(),
  grandparentRatingKey: z.string().optional(),
  parentGuid: z.string().optional(),
  grandparentGuid: z.string().optional(),
  grandparentSlug: z.string().optional(),
  grandparentKey: z.string().optional(),
  parentKey: z.string().optional(),
  grandparentTitle: z.string().optional(),
  grandparentThumb: z.string().optional(),
  grandparentTheme: z.string().optional(),
  grandparentArt: z.string().optional(),
  parentTitle: z.string().optional(),
  parentIndex: z.number().int().optional(),
  parentThumb: z.string().optional(),
  ratingImage: z.string().optional(),
  viewCount: z.number().int().optional(),
  viewOffset: z.number().int().optional(),
  skipCount: z.number().int().optional(),
  subtype: z.string().optional(),
  lastRatedAt: z.number().int().optional(),
  createdAtAccuracy: z.string().optional(),
  createdAtTZOffset: z.string().optional(),
  lastViewedAt: z.number().int().optional(),
  userRating: z.number().optional(),
  Image: z.array(z.lazy(() => GetLibraryItemsImage$inboundSchema)).optional(),
  UltraBlurColors: z.lazy(() => GetLibraryItemsUltraBlurColors$inboundSchema)
    .optional(),
  Guid: z.array(z.lazy(() => GetLibraryItemsGuids$inboundSchema)).optional(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionKey: z.string().optional(),
  showOrdering: ShowOrdering$inboundSchema.optional(),
  flattenSeasons: FlattenSeasons$inboundSchema.optional(),
  skipChildren: z.boolean().optional(),
  Media: z.array(z.lazy(() => GetLibraryItemsMedia$inboundSchema)).optional(),
  Genre: z.array(z.lazy(() => GetLibraryItemsGenre$inboundSchema)).optional(),
  Country: z.array(z.lazy(() => GetLibraryItemsCountry$inboundSchema))
    .optional(),
  Director: z.array(z.lazy(() => GetLibraryItemsDirector$inboundSchema))
    .optional(),
  Writer: z.array(z.lazy(() => GetLibraryItemsWriter$inboundSchema)).optional(),
  Producer: z.array(z.lazy(() => GetLibraryItemsProducer$inboundSchema))
    .optional(),
  Collection: z.array(z.lazy(() => GetLibraryItemsCollection$inboundSchema))
    .optional(),
  Role: z.array(z.lazy(() => GetLibraryItemsRole$inboundSchema)).optional(),
  Rating: z.array(z.lazy(() => Ratings$inboundSchema)).optional(),
  Similar: z.array(z.lazy(() => GetLibraryItemsSimilar$inboundSchema))
    .optional(),
  Location: z.array(z.lazy(() => GetLibraryItemsLocation$inboundSchema))
    .optional(),
  Chapter: z.array(z.lazy(() => Chapter$inboundSchema)).optional(),
  Marker: z.array(z.lazy(() => Marker$inboundSchema)).optional(),
  Extras: z.lazy(() => Extras$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Image": "image",
    "UltraBlurColors": "ultraBlurColors",
    "Guid": "guids",
    "Media": "media",
    "Genre": "genre",
    "Country": "country",
    "Director": "director",
    "Writer": "writer",
    "Producer": "producer",
    "Collection": "collection",
    "Role": "role",
    "Rating": "ratings",
    "Similar": "similar",
    "Location": "location",
    "Chapter": "chapter",
    "Marker": "marker",
    "Extras": "extras",
  });
});

/** @internal */
export type GetLibraryItemsMetadata$Outbound = {
  ratingKey: string;
  key: string;
  guid: string;
  slug: string;
  studio?: string | undefined;
  type: string;
  title: string;
  banner: string;
  titleSort: string;
  contentRating?: string | undefined;
  summary: string;
  rating: number;
  audienceRating: number;
  year?: number | undefined;
  tagline: string;
  thumb: string;
  art: string;
  theme: string;
  index: number;
  leafCount?: number | undefined;
  viewedLeafCount?: number | undefined;
  childCount: number;
  seasonCount: number;
  duration: number;
  originallyAvailableAt?: string | undefined;
  addedAt: number;
  updatedAt?: number | undefined;
  audienceRatingImage?: string | undefined;
  chapterSource?: string | undefined;
  primaryExtraKey?: string | undefined;
  originalTitle?: string | undefined;
  parentRatingKey?: string | undefined;
  grandparentRatingKey?: string | undefined;
  parentGuid?: string | undefined;
  grandparentGuid?: string | undefined;
  grandparentSlug?: string | undefined;
  grandparentKey?: string | undefined;
  parentKey?: string | undefined;
  grandparentTitle?: string | undefined;
  grandparentThumb?: string | undefined;
  grandparentTheme?: string | undefined;
  grandparentArt?: string | undefined;
  parentTitle?: string | undefined;
  parentIndex?: number | undefined;
  parentThumb?: string | undefined;
  ratingImage?: string | undefined;
  viewCount?: number | undefined;
  viewOffset?: number | undefined;
  skipCount?: number | undefined;
  subtype?: string | undefined;
  lastRatedAt?: number | undefined;
  createdAtAccuracy?: string | undefined;
  createdAtTZOffset?: string | undefined;
  lastViewedAt?: number | undefined;
  userRating?: number | undefined;
  Image?: Array<GetLibraryItemsImage$Outbound> | undefined;
  UltraBlurColors?: GetLibraryItemsUltraBlurColors$Outbound | undefined;
  Guid?: Array<GetLibraryItemsGuids$Outbound> | undefined;
  librarySectionID?: number | undefined;
  librarySectionTitle?: string | undefined;
  librarySectionKey?: string | undefined;
  showOrdering?: string | undefined;
  flattenSeasons?: string | undefined;
  skipChildren?: boolean | undefined;
  Media?: Array<GetLibraryItemsMedia$Outbound> | undefined;
  Genre?: Array<GetLibraryItemsGenre$Outbound> | undefined;
  Country?: Array<GetLibraryItemsCountry$Outbound> | undefined;
  Director?: Array<GetLibraryItemsDirector$Outbound> | undefined;
  Writer?: Array<GetLibraryItemsWriter$Outbound> | undefined;
  Producer?: Array<GetLibraryItemsProducer$Outbound> | undefined;
  Collection?: Array<GetLibraryItemsCollection$Outbound> | undefined;
  Role?: Array<GetLibraryItemsRole$Outbound> | undefined;
  Rating?: Array<Ratings$Outbound> | undefined;
  Similar?: Array<GetLibraryItemsSimilar$Outbound> | undefined;
  Location?: Array<GetLibraryItemsLocation$Outbound> | undefined;
  Chapter?: Array<Chapter$Outbound> | undefined;
  Marker?: Array<Marker$Outbound> | undefined;
  Extras?: Extras$Outbound | undefined;
};

/** @internal */
export const GetLibraryItemsMetadata$outboundSchema: z.ZodType<
  GetLibraryItemsMetadata$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsMetadata
> = z.object({
  ratingKey: z.string(),
  key: z.string(),
  guid: z.string(),
  slug: z.string(),
  studio: z.string().optional(),
  type: GetLibraryItemsType$outboundSchema,
  title: z.string(),
  banner: z.string(),
  titleSort: z.string(),
  contentRating: z.string().optional(),
  summary: z.string(),
  rating: z.number(),
  audienceRating: z.number(),
  year: z.number().int().optional(),
  tagline: z.string(),
  thumb: z.string(),
  art: z.string(),
  theme: z.string(),
  index: z.number().int(),
  leafCount: z.number().int().optional(),
  viewedLeafCount: z.number().int().optional(),
  childCount: z.number().int(),
  seasonCount: z.number().int(),
  duration: z.number().int(),
  originallyAvailableAt: z.instanceof(RFCDate).transform(v => v.toString())
    .optional(),
  addedAt: z.number().int(),
  updatedAt: z.number().int().optional(),
  audienceRatingImage: z.string().optional(),
  chapterSource: z.string().optional(),
  primaryExtraKey: z.string().optional(),
  originalTitle: z.string().optional(),
  parentRatingKey: z.string().optional(),
  grandparentRatingKey: z.string().optional(),
  parentGuid: z.string().optional(),
  grandparentGuid: z.string().optional(),
  grandparentSlug: z.string().optional(),
  grandparentKey: z.string().optional(),
  parentKey: z.string().optional(),
  grandparentTitle: z.string().optional(),
  grandparentThumb: z.string().optional(),
  grandparentTheme: z.string().optional(),
  grandparentArt: z.string().optional(),
  parentTitle: z.string().optional(),
  parentIndex: z.number().int().optional(),
  parentThumb: z.string().optional(),
  ratingImage: z.string().optional(),
  viewCount: z.number().int().optional(),
  viewOffset: z.number().int().optional(),
  skipCount: z.number().int().optional(),
  subtype: z.string().optional(),
  lastRatedAt: z.number().int().optional(),
  createdAtAccuracy: z.string().optional(),
  createdAtTZOffset: z.string().optional(),
  lastViewedAt: z.number().int().optional(),
  userRating: z.number().optional(),
  image: z.array(z.lazy(() => GetLibraryItemsImage$outboundSchema)).optional(),
  ultraBlurColors: z.lazy(() => GetLibraryItemsUltraBlurColors$outboundSchema)
    .optional(),
  guids: z.array(z.lazy(() => GetLibraryItemsGuids$outboundSchema)).optional(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionKey: z.string().optional(),
  showOrdering: ShowOrdering$outboundSchema.optional(),
  flattenSeasons: FlattenSeasons$outboundSchema.optional(),
  skipChildren: z.boolean().optional(),
  media: z.array(z.lazy(() => GetLibraryItemsMedia$outboundSchema)).optional(),
  genre: z.array(z.lazy(() => GetLibraryItemsGenre$outboundSchema)).optional(),
  country: z.array(z.lazy(() => GetLibraryItemsCountry$outboundSchema))
    .optional(),
  director: z.array(z.lazy(() => GetLibraryItemsDirector$outboundSchema))
    .optional(),
  writer: z.array(z.lazy(() => GetLibraryItemsWriter$outboundSchema))
    .optional(),
  producer: z.array(z.lazy(() => GetLibraryItemsProducer$outboundSchema))
    .optional(),
  collection: z.array(z.lazy(() => GetLibraryItemsCollection$outboundSchema))
    .optional(),
  role: z.array(z.lazy(() => GetLibraryItemsRole$outboundSchema)).optional(),
  ratings: z.array(z.lazy(() => Ratings$outboundSchema)).optional(),
  similar: z.array(z.lazy(() => GetLibraryItemsSimilar$outboundSchema))
    .optional(),
  location: z.array(z.lazy(() => GetLibraryItemsLocation$outboundSchema))
    .optional(),
  chapter: z.array(z.lazy(() => Chapter$outboundSchema)).optional(),
  marker: z.array(z.lazy(() => Marker$outboundSchema)).optional(),
  extras: z.lazy(() => Extras$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    image: "Image",
    ultraBlurColors: "UltraBlurColors",
    guids: "Guid",
    media: "Media",
    genre: "Genre",
    country: "Country",
    director: "Director",
    writer: "Writer",
    producer: "Producer",
    collection: "Collection",
    role: "Role",
    ratings: "Rating",
    similar: "Similar",
    location: "Location",
    chapter: "Chapter",
    marker: "Marker",
    extras: "Extras",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsMetadata$ {
  /** @deprecated use `GetLibraryItemsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsMetadata$inboundSchema;
  /** @deprecated use `GetLibraryItemsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsMetadata$outboundSchema;
  /** @deprecated use `GetLibraryItemsMetadata$Outbound` instead. */
  export type Outbound = GetLibraryItemsMetadata$Outbound;
}

export function getLibraryItemsMetadataToJSON(
  getLibraryItemsMetadata: GetLibraryItemsMetadata,
): string {
  return JSON.stringify(
    GetLibraryItemsMetadata$outboundSchema.parse(getLibraryItemsMetadata),
  );
}

export function getLibraryItemsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsMetadata' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsFilter$inboundSchema: z.ZodType<
  GetLibraryItemsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string(),
  filterType: z.string(),
  key: z.string(),
  title: z.string(),
  type: z.string(),
});

/** @internal */
export type GetLibraryItemsFilter$Outbound = {
  filter: string;
  filterType: string;
  key: string;
  title: string;
  type: string;
};

/** @internal */
export const GetLibraryItemsFilter$outboundSchema: z.ZodType<
  GetLibraryItemsFilter$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsFilter
> = z.object({
  filter: z.string(),
  filterType: z.string(),
  key: z.string(),
  title: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsFilter$ {
  /** @deprecated use `GetLibraryItemsFilter$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsFilter$inboundSchema;
  /** @deprecated use `GetLibraryItemsFilter$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsFilter$outboundSchema;
  /** @deprecated use `GetLibraryItemsFilter$Outbound` instead. */
  export type Outbound = GetLibraryItemsFilter$Outbound;
}

export function getLibraryItemsFilterToJSON(
  getLibraryItemsFilter: GetLibraryItemsFilter,
): string {
  return JSON.stringify(
    GetLibraryItemsFilter$outboundSchema.parse(getLibraryItemsFilter),
  );
}

export function getLibraryItemsFilterFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsFilter' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsActiveDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetLibraryItemsActiveDirection
> = z.nativeEnum(GetLibraryItemsActiveDirection);

/** @internal */
export const GetLibraryItemsActiveDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetLibraryItemsActiveDirection
> = GetLibraryItemsActiveDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsActiveDirection$ {
  /** @deprecated use `GetLibraryItemsActiveDirection$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsActiveDirection$inboundSchema;
  /** @deprecated use `GetLibraryItemsActiveDirection$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsActiveDirection$outboundSchema;
}

/** @internal */
export const GetLibraryItemsDefaultDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetLibraryItemsDefaultDirection
> = z.nativeEnum(GetLibraryItemsDefaultDirection);

/** @internal */
export const GetLibraryItemsDefaultDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetLibraryItemsDefaultDirection
> = GetLibraryItemsDefaultDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsDefaultDirection$ {
  /** @deprecated use `GetLibraryItemsDefaultDirection$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsDefaultDirection$inboundSchema;
  /** @deprecated use `GetLibraryItemsDefaultDirection$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsDefaultDirection$outboundSchema;
}

/** @internal */
export const GetLibraryItemsSort$inboundSchema: z.ZodType<
  GetLibraryItemsSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.string().optional(),
  active: z.boolean().optional(),
  activeDirection: GetLibraryItemsActiveDirection$inboundSchema.default(
    GetLibraryItemsActiveDirection.Ascending,
  ),
  defaultDirection: GetLibraryItemsDefaultDirection$inboundSchema.default(
    GetLibraryItemsDefaultDirection.Ascending,
  ),
  descKey: z.string().optional(),
  firstCharacterKey: z.string().optional(),
  key: z.string(),
  title: z.string(),
});

/** @internal */
export type GetLibraryItemsSort$Outbound = {
  default?: string | undefined;
  active?: boolean | undefined;
  activeDirection: string;
  defaultDirection: string;
  descKey?: string | undefined;
  firstCharacterKey?: string | undefined;
  key: string;
  title: string;
};

/** @internal */
export const GetLibraryItemsSort$outboundSchema: z.ZodType<
  GetLibraryItemsSort$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsSort
> = z.object({
  default: z.string().optional(),
  active: z.boolean().optional(),
  activeDirection: GetLibraryItemsActiveDirection$outboundSchema.default(
    GetLibraryItemsActiveDirection.Ascending,
  ),
  defaultDirection: GetLibraryItemsDefaultDirection$outboundSchema.default(
    GetLibraryItemsDefaultDirection.Ascending,
  ),
  descKey: z.string().optional(),
  firstCharacterKey: z.string().optional(),
  key: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsSort$ {
  /** @deprecated use `GetLibraryItemsSort$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsSort$inboundSchema;
  /** @deprecated use `GetLibraryItemsSort$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsSort$outboundSchema;
  /** @deprecated use `GetLibraryItemsSort$Outbound` instead. */
  export type Outbound = GetLibraryItemsSort$Outbound;
}

export function getLibraryItemsSortToJSON(
  getLibraryItemsSort: GetLibraryItemsSort,
): string {
  return JSON.stringify(
    GetLibraryItemsSort$outboundSchema.parse(getLibraryItemsSort),
  );
}

export function getLibraryItemsSortFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsSort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsSort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsSort' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsField$inboundSchema: z.ZodType<
  GetLibraryItemsField,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  title: z.string(),
  type: z.string(),
  subType: z.string().optional(),
});

/** @internal */
export type GetLibraryItemsField$Outbound = {
  key: string;
  title: string;
  type: string;
  subType?: string | undefined;
};

/** @internal */
export const GetLibraryItemsField$outboundSchema: z.ZodType<
  GetLibraryItemsField$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsField
> = z.object({
  key: z.string(),
  title: z.string(),
  type: z.string(),
  subType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsField$ {
  /** @deprecated use `GetLibraryItemsField$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsField$inboundSchema;
  /** @deprecated use `GetLibraryItemsField$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsField$outboundSchema;
  /** @deprecated use `GetLibraryItemsField$Outbound` instead. */
  export type Outbound = GetLibraryItemsField$Outbound;
}

export function getLibraryItemsFieldToJSON(
  getLibraryItemsField: GetLibraryItemsField,
): string {
  return JSON.stringify(
    GetLibraryItemsField$outboundSchema.parse(getLibraryItemsField),
  );
}

export function getLibraryItemsFieldFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsField' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsLibraryType$inboundSchema: z.ZodType<
  GetLibraryItemsLibraryType,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  type: z.string(),
  title: z.string(),
  active: z.boolean(),
  Filter: z.array(z.lazy(() => GetLibraryItemsFilter$inboundSchema)).optional(),
  Sort: z.array(z.lazy(() => GetLibraryItemsSort$inboundSchema)).optional(),
  Field: z.array(z.lazy(() => GetLibraryItemsField$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Filter": "filter",
    "Sort": "sort",
    "Field": "field",
  });
});

/** @internal */
export type GetLibraryItemsLibraryType$Outbound = {
  key: string;
  type: string;
  title: string;
  active: boolean;
  Filter?: Array<GetLibraryItemsFilter$Outbound> | undefined;
  Sort?: Array<GetLibraryItemsSort$Outbound> | undefined;
  Field?: Array<GetLibraryItemsField$Outbound> | undefined;
};

/** @internal */
export const GetLibraryItemsLibraryType$outboundSchema: z.ZodType<
  GetLibraryItemsLibraryType$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsLibraryType
> = z.object({
  key: z.string(),
  type: z.string(),
  title: z.string(),
  active: z.boolean(),
  filter: z.array(z.lazy(() => GetLibraryItemsFilter$outboundSchema))
    .optional(),
  sort: z.array(z.lazy(() => GetLibraryItemsSort$outboundSchema)).optional(),
  field: z.array(z.lazy(() => GetLibraryItemsField$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    filter: "Filter",
    sort: "Sort",
    field: "Field",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsLibraryType$ {
  /** @deprecated use `GetLibraryItemsLibraryType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsLibraryType$inboundSchema;
  /** @deprecated use `GetLibraryItemsLibraryType$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsLibraryType$outboundSchema;
  /** @deprecated use `GetLibraryItemsLibraryType$Outbound` instead. */
  export type Outbound = GetLibraryItemsLibraryType$Outbound;
}

export function getLibraryItemsLibraryTypeToJSON(
  getLibraryItemsLibraryType: GetLibraryItemsLibraryType,
): string {
  return JSON.stringify(
    GetLibraryItemsLibraryType$outboundSchema.parse(getLibraryItemsLibraryType),
  );
}

export function getLibraryItemsLibraryTypeFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsLibraryType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsLibraryType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsLibraryType' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsOperator$inboundSchema: z.ZodType<
  GetLibraryItemsOperator,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  title: z.string(),
});

/** @internal */
export type GetLibraryItemsOperator$Outbound = {
  key: string;
  title: string;
};

/** @internal */
export const GetLibraryItemsOperator$outboundSchema: z.ZodType<
  GetLibraryItemsOperator$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsOperator
> = z.object({
  key: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsOperator$ {
  /** @deprecated use `GetLibraryItemsOperator$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsOperator$inboundSchema;
  /** @deprecated use `GetLibraryItemsOperator$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsOperator$outboundSchema;
  /** @deprecated use `GetLibraryItemsOperator$Outbound` instead. */
  export type Outbound = GetLibraryItemsOperator$Outbound;
}

export function getLibraryItemsOperatorToJSON(
  getLibraryItemsOperator: GetLibraryItemsOperator,
): string {
  return JSON.stringify(
    GetLibraryItemsOperator$outboundSchema.parse(getLibraryItemsOperator),
  );
}

export function getLibraryItemsOperatorFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsOperator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsOperator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsOperator' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsFieldType$inboundSchema: z.ZodType<
  GetLibraryItemsFieldType,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  Operator: z.array(z.lazy(() => GetLibraryItemsOperator$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "Operator": "operator",
  });
});

/** @internal */
export type GetLibraryItemsFieldType$Outbound = {
  type: string;
  Operator: Array<GetLibraryItemsOperator$Outbound>;
};

/** @internal */
export const GetLibraryItemsFieldType$outboundSchema: z.ZodType<
  GetLibraryItemsFieldType$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsFieldType
> = z.object({
  type: z.string(),
  operator: z.array(z.lazy(() => GetLibraryItemsOperator$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    operator: "Operator",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsFieldType$ {
  /** @deprecated use `GetLibraryItemsFieldType$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsFieldType$inboundSchema;
  /** @deprecated use `GetLibraryItemsFieldType$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsFieldType$outboundSchema;
  /** @deprecated use `GetLibraryItemsFieldType$Outbound` instead. */
  export type Outbound = GetLibraryItemsFieldType$Outbound;
}

export function getLibraryItemsFieldTypeToJSON(
  getLibraryItemsFieldType: GetLibraryItemsFieldType,
): string {
  return JSON.stringify(
    GetLibraryItemsFieldType$outboundSchema.parse(getLibraryItemsFieldType),
  );
}

export function getLibraryItemsFieldTypeFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsFieldType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsFieldType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsFieldType' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsMeta$inboundSchema: z.ZodType<
  GetLibraryItemsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  Type: z.array(z.lazy(() => GetLibraryItemsLibraryType$inboundSchema))
    .optional(),
  FieldType: z.array(z.lazy(() => GetLibraryItemsFieldType$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Type": "type",
    "FieldType": "fieldType",
  });
});

/** @internal */
export type GetLibraryItemsMeta$Outbound = {
  Type?: Array<GetLibraryItemsLibraryType$Outbound> | undefined;
  FieldType?: Array<GetLibraryItemsFieldType$Outbound> | undefined;
};

/** @internal */
export const GetLibraryItemsMeta$outboundSchema: z.ZodType<
  GetLibraryItemsMeta$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsMeta
> = z.object({
  type: z.array(z.lazy(() => GetLibraryItemsLibraryType$outboundSchema))
    .optional(),
  fieldType: z.array(z.lazy(() => GetLibraryItemsFieldType$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    type: "Type",
    fieldType: "FieldType",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsMeta$ {
  /** @deprecated use `GetLibraryItemsMeta$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsMeta$inboundSchema;
  /** @deprecated use `GetLibraryItemsMeta$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsMeta$outboundSchema;
  /** @deprecated use `GetLibraryItemsMeta$Outbound` instead. */
  export type Outbound = GetLibraryItemsMeta$Outbound;
}

export function getLibraryItemsMetaToJSON(
  getLibraryItemsMeta: GetLibraryItemsMeta,
): string {
  return JSON.stringify(
    GetLibraryItemsMeta$outboundSchema.parse(getLibraryItemsMeta),
  );
}

export function getLibraryItemsMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsMeta' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsMediaContainer$inboundSchema: z.ZodType<
  GetLibraryItemsMediaContainer,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().int(),
  totalSize: z.number().int(),
  offset: z.number().int(),
  content: z.string(),
  allowSync: z.boolean(),
  nocache: z.boolean(),
  art: z.string(),
  identifier: z.string(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionUUID: z.string().optional(),
  mediaTagPrefix: z.string(),
  mediaTagVersion: z.number().int(),
  thumb: z.string(),
  title1: z.string(),
  title2: z.string(),
  viewGroup: z.string(),
  viewMode: z.string().optional(),
  mixedParents: z.boolean().optional(),
  Metadata: z.array(z.lazy(() => GetLibraryItemsMetadata$inboundSchema)),
  Meta: z.lazy(() => GetLibraryItemsMeta$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Metadata": "metadata",
    "Meta": "meta",
  });
});

/** @internal */
export type GetLibraryItemsMediaContainer$Outbound = {
  size: number;
  totalSize: number;
  offset: number;
  content: string;
  allowSync: boolean;
  nocache: boolean;
  art: string;
  identifier: string;
  librarySectionID?: number | undefined;
  librarySectionTitle?: string | undefined;
  librarySectionUUID?: string | undefined;
  mediaTagPrefix: string;
  mediaTagVersion: number;
  thumb: string;
  title1: string;
  title2: string;
  viewGroup: string;
  viewMode?: string | undefined;
  mixedParents?: boolean | undefined;
  Metadata: Array<GetLibraryItemsMetadata$Outbound>;
  Meta?: GetLibraryItemsMeta$Outbound | undefined;
};

/** @internal */
export const GetLibraryItemsMediaContainer$outboundSchema: z.ZodType<
  GetLibraryItemsMediaContainer$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsMediaContainer
> = z.object({
  size: z.number().int(),
  totalSize: z.number().int(),
  offset: z.number().int(),
  content: z.string(),
  allowSync: z.boolean(),
  nocache: z.boolean(),
  art: z.string(),
  identifier: z.string(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionUUID: z.string().optional(),
  mediaTagPrefix: z.string(),
  mediaTagVersion: z.number().int(),
  thumb: z.string(),
  title1: z.string(),
  title2: z.string(),
  viewGroup: z.string(),
  viewMode: z.string().optional(),
  mixedParents: z.boolean().optional(),
  metadata: z.array(z.lazy(() => GetLibraryItemsMetadata$outboundSchema)),
  meta: z.lazy(() => GetLibraryItemsMeta$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "Metadata",
    meta: "Meta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsMediaContainer$ {
  /** @deprecated use `GetLibraryItemsMediaContainer$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsMediaContainer$inboundSchema;
  /** @deprecated use `GetLibraryItemsMediaContainer$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsMediaContainer$outboundSchema;
  /** @deprecated use `GetLibraryItemsMediaContainer$Outbound` instead. */
  export type Outbound = GetLibraryItemsMediaContainer$Outbound;
}

export function getLibraryItemsMediaContainerToJSON(
  getLibraryItemsMediaContainer: GetLibraryItemsMediaContainer,
): string {
  return JSON.stringify(
    GetLibraryItemsMediaContainer$outboundSchema.parse(
      getLibraryItemsMediaContainer,
    ),
  );
}

export function getLibraryItemsMediaContainerFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsMediaContainer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsMediaContainer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsMediaContainer' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsResponseBody$inboundSchema: z.ZodType<
  GetLibraryItemsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  MediaContainer: z.lazy(() => GetLibraryItemsMediaContainer$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "MediaContainer": "mediaContainer",
  });
});

/** @internal */
export type GetLibraryItemsResponseBody$Outbound = {
  MediaContainer?: GetLibraryItemsMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetLibraryItemsResponseBody$outboundSchema: z.ZodType<
  GetLibraryItemsResponseBody$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsResponseBody
> = z.object({
  mediaContainer: z.lazy(() => GetLibraryItemsMediaContainer$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    mediaContainer: "MediaContainer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsResponseBody$ {
  /** @deprecated use `GetLibraryItemsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsResponseBody$inboundSchema;
  /** @deprecated use `GetLibraryItemsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsResponseBody$outboundSchema;
  /** @deprecated use `GetLibraryItemsResponseBody$Outbound` instead. */
  export type Outbound = GetLibraryItemsResponseBody$Outbound;
}

export function getLibraryItemsResponseBodyToJSON(
  getLibraryItemsResponseBody: GetLibraryItemsResponseBody,
): string {
  return JSON.stringify(
    GetLibraryItemsResponseBody$outboundSchema.parse(
      getLibraryItemsResponseBody,
    ),
  );
}

export function getLibraryItemsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetLibraryItemsResponse$inboundSchema: z.ZodType<
  GetLibraryItemsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetLibraryItemsResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetLibraryItemsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetLibraryItemsResponseBody$Outbound | undefined;
};

/** @internal */
export const GetLibraryItemsResponse$outboundSchema: z.ZodType<
  GetLibraryItemsResponse$Outbound,
  z.ZodTypeDef,
  GetLibraryItemsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetLibraryItemsResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLibraryItemsResponse$ {
  /** @deprecated use `GetLibraryItemsResponse$inboundSchema` instead. */
  export const inboundSchema = GetLibraryItemsResponse$inboundSchema;
  /** @deprecated use `GetLibraryItemsResponse$outboundSchema` instead. */
  export const outboundSchema = GetLibraryItemsResponse$outboundSchema;
  /** @deprecated use `GetLibraryItemsResponse$Outbound` instead. */
  export type Outbound = GetLibraryItemsResponse$Outbound;
}

export function getLibraryItemsResponseToJSON(
  getLibraryItemsResponse: GetLibraryItemsResponse,
): string {
  return JSON.stringify(
    GetLibraryItemsResponse$outboundSchema.parse(getLibraryItemsResponse),
  );
}

export function getLibraryItemsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetLibraryItemsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLibraryItemsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLibraryItemsResponse' from JSON`,
  );
}
