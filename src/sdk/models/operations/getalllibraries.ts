/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type Location = {
  id?: number | undefined;
  path?: string | undefined;
};

export type GetAllLibrariesDirectory = {
  allowSync?: boolean | undefined;
  art?: string | undefined;
  composite?: string | undefined;
  filters?: boolean | undefined;
  refreshing?: boolean | undefined;
  thumb?: string | undefined;
  key?: string | undefined;
  type?: string | undefined;
  title?: string | undefined;
  agent?: string | undefined;
  scanner?: string | undefined;
  language?: string | undefined;
  uuid?: string | undefined;
  /**
   * Unix epoch datetime
   */
  updatedAt?: number | undefined;
  /**
   * Unix epoch datetime
   */
  createdAt?: number | undefined;
  /**
   * Unix epoch datetime
   */
  scannedAt?: number | undefined;
  content?: boolean | undefined;
  directory?: boolean | undefined;
  contentChangedAt?: number | undefined;
  hidden?: number | undefined;
  location?: Array<Location> | undefined;
};

export type GetAllLibrariesMediaContainer = {
  size: number;
  allowSync: boolean;
  title1: string;
  directory?: Array<GetAllLibrariesDirectory> | undefined;
};

/**
 * The libraries available on the Server
 */
export type GetAllLibrariesResponseBody = {
  mediaContainer?: GetAllLibrariesMediaContainer | undefined;
};

export type GetAllLibrariesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The libraries available on the Server
   */
  object?: GetAllLibrariesResponseBody | undefined;
};

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  path: z.string().optional(),
});

/** @internal */
export type Location$Outbound = {
  id?: number | undefined;
  path?: string | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  id: z.number().int().optional(),
  path: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

/** @internal */
export const GetAllLibrariesDirectory$inboundSchema: z.ZodType<
  GetAllLibrariesDirectory,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSync: z.boolean().optional(),
  art: z.string().optional(),
  composite: z.string().optional(),
  filters: z.boolean().optional(),
  refreshing: z.boolean().optional(),
  thumb: z.string().optional(),
  key: z.string().optional(),
  type: z.string().optional(),
  title: z.string().optional(),
  agent: z.string().optional(),
  scanner: z.string().optional(),
  language: z.string().optional(),
  uuid: z.string().optional(),
  updatedAt: z.number().int().optional(),
  createdAt: z.number().int().optional(),
  scannedAt: z.number().int().optional(),
  content: z.boolean().optional(),
  directory: z.boolean().optional(),
  contentChangedAt: z.number().int().optional(),
  hidden: z.number().int().optional(),
  Location: z.array(z.lazy(() => Location$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Location": "location",
  });
});

/** @internal */
export type GetAllLibrariesDirectory$Outbound = {
  allowSync?: boolean | undefined;
  art?: string | undefined;
  composite?: string | undefined;
  filters?: boolean | undefined;
  refreshing?: boolean | undefined;
  thumb?: string | undefined;
  key?: string | undefined;
  type?: string | undefined;
  title?: string | undefined;
  agent?: string | undefined;
  scanner?: string | undefined;
  language?: string | undefined;
  uuid?: string | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  scannedAt?: number | undefined;
  content?: boolean | undefined;
  directory?: boolean | undefined;
  contentChangedAt?: number | undefined;
  hidden?: number | undefined;
  Location?: Array<Location$Outbound> | undefined;
};

/** @internal */
export const GetAllLibrariesDirectory$outboundSchema: z.ZodType<
  GetAllLibrariesDirectory$Outbound,
  z.ZodTypeDef,
  GetAllLibrariesDirectory
> = z.object({
  allowSync: z.boolean().optional(),
  art: z.string().optional(),
  composite: z.string().optional(),
  filters: z.boolean().optional(),
  refreshing: z.boolean().optional(),
  thumb: z.string().optional(),
  key: z.string().optional(),
  type: z.string().optional(),
  title: z.string().optional(),
  agent: z.string().optional(),
  scanner: z.string().optional(),
  language: z.string().optional(),
  uuid: z.string().optional(),
  updatedAt: z.number().int().optional(),
  createdAt: z.number().int().optional(),
  scannedAt: z.number().int().optional(),
  content: z.boolean().optional(),
  directory: z.boolean().optional(),
  contentChangedAt: z.number().int().optional(),
  hidden: z.number().int().optional(),
  location: z.array(z.lazy(() => Location$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    location: "Location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLibrariesDirectory$ {
  /** @deprecated use `GetAllLibrariesDirectory$inboundSchema` instead. */
  export const inboundSchema = GetAllLibrariesDirectory$inboundSchema;
  /** @deprecated use `GetAllLibrariesDirectory$outboundSchema` instead. */
  export const outboundSchema = GetAllLibrariesDirectory$outboundSchema;
  /** @deprecated use `GetAllLibrariesDirectory$Outbound` instead. */
  export type Outbound = GetAllLibrariesDirectory$Outbound;
}

/** @internal */
export const GetAllLibrariesMediaContainer$inboundSchema: z.ZodType<
  GetAllLibrariesMediaContainer,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().int(),
  allowSync: z.boolean(),
  title1: z.string(),
  Directory: z.array(z.lazy(() => GetAllLibrariesDirectory$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Directory": "directory",
  });
});

/** @internal */
export type GetAllLibrariesMediaContainer$Outbound = {
  size: number;
  allowSync: boolean;
  title1: string;
  Directory?: Array<GetAllLibrariesDirectory$Outbound> | undefined;
};

/** @internal */
export const GetAllLibrariesMediaContainer$outboundSchema: z.ZodType<
  GetAllLibrariesMediaContainer$Outbound,
  z.ZodTypeDef,
  GetAllLibrariesMediaContainer
> = z.object({
  size: z.number().int(),
  allowSync: z.boolean(),
  title1: z.string(),
  directory: z.array(z.lazy(() => GetAllLibrariesDirectory$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    directory: "Directory",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLibrariesMediaContainer$ {
  /** @deprecated use `GetAllLibrariesMediaContainer$inboundSchema` instead. */
  export const inboundSchema = GetAllLibrariesMediaContainer$inboundSchema;
  /** @deprecated use `GetAllLibrariesMediaContainer$outboundSchema` instead. */
  export const outboundSchema = GetAllLibrariesMediaContainer$outboundSchema;
  /** @deprecated use `GetAllLibrariesMediaContainer$Outbound` instead. */
  export type Outbound = GetAllLibrariesMediaContainer$Outbound;
}

/** @internal */
export const GetAllLibrariesResponseBody$inboundSchema: z.ZodType<
  GetAllLibrariesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  MediaContainer: z.lazy(() => GetAllLibrariesMediaContainer$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "MediaContainer": "mediaContainer",
  });
});

/** @internal */
export type GetAllLibrariesResponseBody$Outbound = {
  MediaContainer?: GetAllLibrariesMediaContainer$Outbound | undefined;
};

/** @internal */
export const GetAllLibrariesResponseBody$outboundSchema: z.ZodType<
  GetAllLibrariesResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllLibrariesResponseBody
> = z.object({
  mediaContainer: z.lazy(() => GetAllLibrariesMediaContainer$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    mediaContainer: "MediaContainer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLibrariesResponseBody$ {
  /** @deprecated use `GetAllLibrariesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllLibrariesResponseBody$inboundSchema;
  /** @deprecated use `GetAllLibrariesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllLibrariesResponseBody$outboundSchema;
  /** @deprecated use `GetAllLibrariesResponseBody$Outbound` instead. */
  export type Outbound = GetAllLibrariesResponseBody$Outbound;
}

/** @internal */
export const GetAllLibrariesResponse$inboundSchema: z.ZodType<
  GetAllLibrariesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetAllLibrariesResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAllLibrariesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetAllLibrariesResponseBody$Outbound | undefined;
};

/** @internal */
export const GetAllLibrariesResponse$outboundSchema: z.ZodType<
  GetAllLibrariesResponse$Outbound,
  z.ZodTypeDef,
  GetAllLibrariesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetAllLibrariesResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLibrariesResponse$ {
  /** @deprecated use `GetAllLibrariesResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllLibrariesResponse$inboundSchema;
  /** @deprecated use `GetAllLibrariesResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllLibrariesResponse$outboundSchema;
  /** @deprecated use `GetAllLibrariesResponse$Outbound` instead. */
  export type Outbound = GetAllLibrariesResponse$Outbound;
}
