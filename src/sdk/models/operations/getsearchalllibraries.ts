/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum SearchTypes {
  Movies = "movies",
  Music = "music",
  OtherVideos = "otherVideos",
  People = "people",
  Tv = "tv",
}
export type SearchTypesOpen = OpenEnum<typeof SearchTypes>;

/**
 * Whether to include collections in the search results.
 */
export enum GetSearchAllLibrariesQueryParamIncludeCollections {
  Disable = 0,
  Enable = 1,
}

/**
 * Whether to include external media in the search results.
 */
export enum GetSearchAllLibrariesQueryParamIncludeExternalMedia {
  Disable = 0,
  Enable = 1,
}

export type GetSearchAllLibrariesRequest = {
  /**
   * The search query term.
   */
  query: string;
  /**
   * An opaque identifier unique to the client (UUID, serial number, or other unique device ID)
   */
  clientID: string;
  /**
   * Limit the number of results returned.
   */
  limit?: number | undefined;
  /**
   * A comma-separated list of search types to include. Valid values are: movies, music, otherVideos, people, tv.
   *
   * @remarks
   */
  searchTypes?: Array<SearchTypesOpen> | undefined;
  /**
   * Whether to include collections in the search results.
   */
  includeCollections?:
    | GetSearchAllLibrariesQueryParamIncludeCollections
    | undefined;
  /**
   * Whether to include external media in the search results.
   */
  includeExternalMedia?:
    | GetSearchAllLibrariesQueryParamIncludeExternalMedia
    | undefined;
};

export type GetSearchAllLibrariesDirectory = {
  /**
   * The unique identifier path for the search result item.
   */
  key: string;
  /**
   * The identifier for the library section.
   */
  librarySectionID: number;
  /**
   * The key corresponding to the library section.
   */
  librarySectionKey: string;
  /**
   * The title of the library section.
   */
  librarySectionTitle: string;
  librarySectionType?: 1 | undefined;
  /**
   * The type of the directory.
   */
  type: string;
  id: number;
  /**
   * The filter string used to query this specific item in the library.
   */
  filter?: string | undefined;
  tag: string;
  /**
   * The type of tag associated with this search result (e.g., Director, Actor).
   */
  tagType?: 4 | undefined;
  /**
   * The unique identifier for the tag associated with this search result.
   */
  tagKey?: string | undefined;
  /**
   * The URL to the thumbnail image associated with this search result.
   */
  thumb?: string | undefined;
  /**
   * The number of items associated with this search result.
   */
  count?: number | undefined;
};

/**
 * The type of media content in the Plex library. This can represent videos, music, or photos.
 *
 * @remarks
 */
export enum GetSearchAllLibrariesType {
  Movie = "movie",
  TvShow = "show",
  Season = "season",
  Episode = "episode",
  Artist = "artist",
  Album = "album",
  Track = "track",
  PhotoAlbum = "photoalbum",
  Photo = "photo",
  Collection = "collection",
}
/**
 * The type of media content in the Plex library. This can represent videos, music, or photos.
 *
 * @remarks
 */
export type GetSearchAllLibrariesTypeOpen = OpenEnum<
  typeof GetSearchAllLibrariesType
>;

export enum GetSearchAllLibrariesLibraryType {
  CoverPoster = "coverPoster",
  Background = "background",
  Snapshot = "snapshot",
  ClearLogo = "clearLogo",
}
export type GetSearchAllLibrariesLibraryTypeOpen = OpenEnum<
  typeof GetSearchAllLibrariesLibraryType
>;

export type GetSearchAllLibrariesImage = {
  alt: string;
  type: GetSearchAllLibrariesLibraryTypeOpen;
  url: string;
};

export type GetSearchAllLibrariesUltraBlurColors = {
  topLeft: string;
  topRight: string;
  bottomRight: string;
  bottomLeft: string;
};

export type GetSearchAllLibrariesGuids = {
  /**
   * The unique identifier for the Guid. Can be prefixed with imdb://, tmdb://, tvdb://
   *
   * @remarks
   */
  id: string;
};

/**
 * Setting that indicates the episode ordering for the show.
 *
 * @remarks
 * Options:
 *   - None = Library default
 *   - tmdbAiring = The Movie Database (Aired)
 *   - aired = TheTVDB (Aired)
 *   - dvd = TheTVDB (DVD)
 *   - absolute = TheTVDB (Absolute)
 */
export enum GetSearchAllLibrariesShowOrdering {
  None = "None",
  TmdbAiring = "tmdbAiring",
  TvdbAired = "aired",
  TvdbDvd = "dvd",
  TvdbAbsolute = "absolute",
}
/**
 * Setting that indicates the episode ordering for the show.
 *
 * @remarks
 * Options:
 *   - None = Library default
 *   - tmdbAiring = The Movie Database (Aired)
 *   - aired = TheTVDB (Aired)
 *   - dvd = TheTVDB (DVD)
 *   - absolute = TheTVDB (Absolute)
 */
export type GetSearchAllLibrariesShowOrderingOpen = OpenEnum<
  typeof GetSearchAllLibrariesShowOrdering
>;

/**
 * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
 *
 * @remarks
 */
export enum GetSearchAllLibrariesFlattenSeasons {
  LibraryDefault = "-1",
  Hide = "0",
  Show = "1",
}
/**
 * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
 *
 * @remarks
 */
export type GetSearchAllLibrariesFlattenSeasonsOpen = OpenEnum<
  typeof GetSearchAllLibrariesFlattenSeasons
>;

export enum GetSearchAllLibrariesOptimizedForStreaming1 {
  Zero = 0,
  One = 1,
}

/**
 * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
 */
export type GetSearchAllLibrariesOptimizedForStreaming =
  | GetSearchAllLibrariesOptimizedForStreaming1
  | boolean;

export enum GetSearchAllLibrariesOptimizedForStreamingLibrary1 {
  Zero = 0,
  One = 1,
}

/**
 * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
 *
 * @remarks
 */
export type GetSearchAllLibrariesLibraryOptimizedForStreaming =
  | GetSearchAllLibrariesOptimizedForStreamingLibrary1
  | boolean;

/**
 * Indicates if the part has a thumbnail.
 *
 * @remarks
 */
export enum GetSearchAllLibrariesHasThumbnail {
  False = "0",
  True = "1",
}

export type GetSearchAllLibrariesPart = {
  /**
   * Indicates if the part is accessible.
   */
  accessible?: boolean | undefined;
  /**
   * Indicates if the part exists.
   */
  exists?: boolean | undefined;
  /**
   * Unique part identifier.
   */
  id: number;
  /**
   * Key to access this part.
   */
  key?: string | undefined;
  indexes?: string | undefined;
  /**
   * Duration of the part in milliseconds.
   */
  duration?: number | undefined;
  /**
   * File path for the part.
   */
  file?: string | undefined;
  /**
   * File size in bytes.
   */
  size?: number | undefined;
  packetLength?: number | undefined;
  /**
   * Container format of the part.
   */
  container?: string | undefined;
  /**
   * Video profile for the part.
   */
  videoProfile?: string | undefined;
  /**
   * The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
   */
  audioProfile?: string | undefined;
  has64bitOffsets?: boolean | undefined;
  /**
   * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
   *
   * @remarks
   */
  optimizedForStreaming?:
    | GetSearchAllLibrariesOptimizedForStreamingLibrary1
    | boolean
    | undefined;
  hasThumbnail?: GetSearchAllLibrariesHasThumbnail | undefined;
};

export type GetSearchAllLibrariesMedia = {
  /**
   * Unique media identifier.
   */
  id: number;
  /**
   * Duration of the media in milliseconds.
   */
  duration?: number | undefined;
  /**
   * Bitrate in bits per second.
   */
  bitrate?: number | undefined;
  /**
   * Video width in pixels.
   */
  width?: number | undefined;
  /**
   * Video height in pixels.
   */
  height?: number | undefined;
  /**
   * Aspect ratio of the video.
   */
  aspectRatio?: number | undefined;
  /**
   * Number of audio channels.
   */
  audioChannels?: number | undefined;
  displayOffset?: number | undefined;
  /**
   * Audio codec used.
   */
  audioCodec?: string | undefined;
  /**
   * Video codec used.
   */
  videoCodec?: string | undefined;
  /**
   * Video resolution (e.g., 4k).
   */
  videoResolution?: string | undefined;
  /**
   * Container format of the media.
   */
  container?: string | undefined;
  /**
   * Frame rate of the video. Values found include NTSC, PAL, 24p
   *
   * @remarks
   */
  videoFrameRate?: string | undefined;
  /**
   * Video profile (e.g., main 10).
   */
  videoProfile?: string | undefined;
  /**
   * Indicates whether voice activity is detected.
   */
  hasVoiceActivity?: boolean | undefined;
  /**
   * The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
   */
  audioProfile?: string | undefined;
  /**
   * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
   */
  optimizedForStreaming?:
    | GetSearchAllLibrariesOptimizedForStreaming1
    | boolean
    | undefined;
  /**
   * Indicates whether the media has 64-bit offsets.
   *
   * @remarks
   * This is relevant for media files that may require larger offsets than what 32-bit integers can provide.
   */
  has64bitOffsets?: boolean | undefined;
  part?: Array<GetSearchAllLibrariesPart> | undefined;
};

export type GetSearchAllLibrariesGenre = {
  /**
   * The unique identifier for the genre.
   *
   * @remarks
   * NOTE: This is different for each Plex server and is not globally unique.
   */
  id: number;
  /**
   * The genre name of this media-item
   *
   * @remarks
   */
  tag: string;
};

export type GetSearchAllLibrariesCountry = {
  /**
   * The unique identifier for the country.
   *
   * @remarks
   * NOTE: This is different for each Plex server and is not globally unique.
   */
  id: number;
  /**
   * The country of origin of this media item
   */
  tag: string;
};

export type GetSearchAllLibrariesDirector = {
  /**
   * Unique identifier for the director.
   */
  id: number;
  /**
   * The role of Director
   */
  tag: string;
  /**
   * The absolute URL of the thumbnail image for the director.
   */
  thumb?: string | undefined;
};

export type GetSearchAllLibrariesWriter = {
  /**
   * Unique identifier for the writer.
   */
  id: number;
  /**
   * The role of Writer
   */
  tag: string;
  /**
   * The absolute URL of the thumbnail image for the writer.
   */
  thumb?: string | undefined;
};

export type GetSearchAllLibrariesRole = {
  /**
   * The unique identifier for the role.
   *
   * @remarks
   * NOTE: This is different for each Plex server and is not globally unique.
   */
  id: number;
  /**
   * The display tag for the actor (typically the actor's name).
   */
  tag: string;
  /**
   * The role played by the actor in the media item.
   */
  role?: string | undefined;
  /**
   * The absolute URL of the thumbnail image for the actor.
   */
  thumb?: string | undefined;
};

/**
 * The folder path for the media item.
 */
export type GetSearchAllLibrariesLocation = {
  path: string;
};

/**
 * Unknown
 *
 * @remarks
 */
export type GetSearchAllLibrariesMetadata = {
  /**
   * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
   */
  ratingKey: string;
  /**
   * The unique key for the media item.
   */
  key: string;
  /**
   * The globally unique identifier for the media item.
   */
  guid: string;
  /**
   * A URL‐friendly version of the media title.
   */
  slug: string;
  /**
   * The studio that produced the media item.
   */
  studio?: string | undefined;
  type: GetSearchAllLibrariesTypeOpen;
  /**
   * The title of the media item.
   */
  title: string;
  /**
   * The banner image URL for the media item.
   */
  banner: string;
  /**
   * The sort title used for ordering media items.
   */
  titleSort: string;
  /**
   * The content rating for the media item.
   */
  contentRating?: string | undefined;
  /**
   * A synopsis of the media item.
   */
  summary: string;
  /**
   * The critic rating for the media item.
   */
  rating: number;
  /**
   * The audience rating for the media item.
   */
  audienceRating: number;
  /**
   * The release year of the media item.
   */
  year?: number | undefined;
  /**
   * A brief tagline for the media item.
   */
  tagline: string;
  /**
   * The thumbnail image URL for the media item.
   */
  thumb: string;
  /**
   * The art image URL for the media item.
   */
  art: string;
  /**
   * The theme URL for the media item.
   */
  theme: string;
  /**
   * The index position of the media item.
   */
  index: number;
  /**
   * The number of leaf items (end nodes) under this media item.
   */
  leafCount?: number | undefined;
  /**
   * The number of leaf items that have been viewed.
   */
  viewedLeafCount?: number | undefined;
  /**
   * The number of child items associated with this media item.
   */
  childCount: number;
  /**
   * The total number of seasons (for TV shows).
   */
  seasonCount: number;
  /**
   * The duration of the media item in milliseconds.
   */
  duration: number;
  /**
   * The original release date of the media item.
   */
  originallyAvailableAt?: RFCDate | undefined;
  addedAt: number;
  /**
   * Unix epoch datetime in seconds
   */
  updatedAt?: number | undefined;
  /**
   * The release year of the parent media item.
   */
  parentYear?: number | undefined;
  /**
   * The URL for the audience rating image.
   */
  audienceRatingImage?: string | undefined;
  /**
   * The source from which chapter data is derived.
   */
  chapterSource?: string | undefined;
  /**
   * The primary extra key associated with this media item.
   */
  primaryExtraKey?: string | undefined;
  /**
   * The original title of the media item (if different).
   */
  originalTitle?: string | undefined;
  /**
   * The rating key of the parent media item.
   */
  parentRatingKey?: string | undefined;
  /**
   * The rating key of the grandparent media item.
   */
  grandparentRatingKey?: string | undefined;
  /**
   * The GUID of the parent media item.
   */
  parentGuid?: string | undefined;
  /**
   * The GUID of the grandparent media item.
   */
  grandparentGuid?: string | undefined;
  /**
   * The slug for the grandparent media item.
   */
  grandparentSlug?: string | undefined;
  /**
   * The key of the grandparent media item.
   */
  grandparentKey?: string | undefined;
  /**
   * The key of the parent media item.
   */
  parentKey?: string | undefined;
  /**
   * The title of the grandparent media item.
   */
  grandparentTitle?: string | undefined;
  /**
   * The thumbnail URL for the grandparent media item.
   */
  grandparentThumb?: string | undefined;
  /**
   * The theme URL for the grandparent media item.
   */
  grandparentTheme?: string | undefined;
  /**
   * The art URL for the grandparent media item.
   */
  grandparentArt?: string | undefined;
  /**
   * The title of the parent media item.
   */
  parentTitle?: string | undefined;
  /**
   * The index position of the parent media item.
   */
  parentIndex?: number | undefined;
  /**
   * The thumbnail URL for the parent media item.
   */
  parentThumb?: string | undefined;
  /**
   * The URL for the rating image.
   */
  ratingImage?: string | undefined;
  /**
   * The number of times this media item has been viewed.
   */
  viewCount?: number | undefined;
  /**
   * The current playback offset (in milliseconds).
   */
  viewOffset?: number | undefined;
  /**
   * The number of times this media item has been skipped.
   */
  skipCount?: number | undefined;
  /**
   * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
   */
  subtype?: string | undefined;
  /**
   * The Unix timestamp representing the last time the item was rated.
   */
  lastRatedAt?: number | undefined;
  /**
   * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
   */
  createdAtAccuracy?: string | undefined;
  /**
   * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
   */
  createdAtTZOffset?: string | undefined;
  /**
   * Unix timestamp for when the media item was last viewed.
   */
  lastViewedAt?: number | undefined;
  /**
   * The rating provided by a user for the item. This value is expressed as a decimal number.
   */
  userRating?: number | undefined;
  image?: Array<GetSearchAllLibrariesImage> | undefined;
  ultraBlurColors?: GetSearchAllLibrariesUltraBlurColors | undefined;
  guids?: Array<GetSearchAllLibrariesGuids> | undefined;
  /**
   * The identifier for the library section.
   */
  librarySectionID?: number | undefined;
  /**
   * The title of the library section.
   */
  librarySectionTitle?: string | undefined;
  /**
   * The key corresponding to the library section.
   */
  librarySectionKey?: string | undefined;
  /**
   * Setting that indicates the episode ordering for the show.
   *
   * @remarks
   * Options:
   *   - None = Library default
   *   - tmdbAiring = The Movie Database (Aired)
   *   - aired = TheTVDB (Aired)
   *   - dvd = TheTVDB (DVD)
   *   - absolute = TheTVDB (Absolute)
   */
  showOrdering?: GetSearchAllLibrariesShowOrderingOpen | undefined;
  /**
   * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
   *
   * @remarks
   */
  flattenSeasons?: GetSearchAllLibrariesFlattenSeasonsOpen | undefined;
  /**
   * Indicates whether child items should be skipped.
   */
  skipChildren?: boolean | undefined;
  media?: Array<GetSearchAllLibrariesMedia> | undefined;
  genre?: Array<GetSearchAllLibrariesGenre> | undefined;
  country?: Array<GetSearchAllLibrariesCountry> | undefined;
  director?: Array<GetSearchAllLibrariesDirector> | undefined;
  writer?: Array<GetSearchAllLibrariesWriter> | undefined;
  role?: Array<GetSearchAllLibrariesRole> | undefined;
  location?: Array<GetSearchAllLibrariesLocation> | undefined;
};

export type SearchResult = {
  /**
   * The score of the search result, typically a float value between 0 and 1.
   */
  score: number;
  directory?: GetSearchAllLibrariesDirectory | undefined;
  metadata?: GetSearchAllLibrariesMetadata | undefined;
};

export type GetSearchAllLibrariesMediaContainer = {
  /**
   * Number of media items returned in this response.
   */
  size: number;
  /**
   * Indicates whether syncing is allowed.
   */
  allowSync: boolean;
  /**
   * An plugin identifier for the media container.
   */
  identifier: string;
  /**
   * The unique identifier for the library section.
   */
  librarySectionID?: number | undefined;
  /**
   * The title of the library section.
   */
  librarySectionTitle?: string | undefined;
  /**
   * The universally unique identifier for the library section.
   */
  librarySectionUUID?: string | undefined;
  /**
   * The prefix used for media tag resource paths.
   */
  mediaTagPrefix: string;
  /**
   * The version number for media tags.
   */
  mediaTagVersion: number;
  searchResult: Array<SearchResult>;
};

/**
 * The libraries available on the Server
 */
export type GetSearchAllLibrariesResponseBody = {
  mediaContainer: GetSearchAllLibrariesMediaContainer;
};

export type GetSearchAllLibrariesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The libraries available on the Server
   */
  object?: GetSearchAllLibrariesResponseBody | undefined;
};

/** @internal */
export const SearchTypes$inboundSchema: z.ZodType<
  SearchTypesOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchTypes$outboundSchema: z.ZodType<
  SearchTypesOpen,
  z.ZodTypeDef,
  SearchTypesOpen
> = z.union([
  z.nativeEnum(SearchTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTypes$ {
  /** @deprecated use `SearchTypes$inboundSchema` instead. */
  export const inboundSchema = SearchTypes$inboundSchema;
  /** @deprecated use `SearchTypes$outboundSchema` instead. */
  export const outboundSchema = SearchTypes$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesQueryParamIncludeCollections$inboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesQueryParamIncludeCollections> = z
    .nativeEnum(GetSearchAllLibrariesQueryParamIncludeCollections);

/** @internal */
export const GetSearchAllLibrariesQueryParamIncludeCollections$outboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesQueryParamIncludeCollections> =
    GetSearchAllLibrariesQueryParamIncludeCollections$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesQueryParamIncludeCollections$ {
  /** @deprecated use `GetSearchAllLibrariesQueryParamIncludeCollections$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesQueryParamIncludeCollections$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesQueryParamIncludeCollections$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesQueryParamIncludeCollections$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesQueryParamIncludeExternalMedia$inboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesQueryParamIncludeExternalMedia> =
    z.nativeEnum(GetSearchAllLibrariesQueryParamIncludeExternalMedia);

/** @internal */
export const GetSearchAllLibrariesQueryParamIncludeExternalMedia$outboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesQueryParamIncludeExternalMedia> =
    GetSearchAllLibrariesQueryParamIncludeExternalMedia$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesQueryParamIncludeExternalMedia$ {
  /** @deprecated use `GetSearchAllLibrariesQueryParamIncludeExternalMedia$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesQueryParamIncludeExternalMedia$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesQueryParamIncludeExternalMedia$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesQueryParamIncludeExternalMedia$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesRequest$inboundSchema: z.ZodType<
  GetSearchAllLibrariesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  ClientID: z.string(),
  limit: z.number().int().optional(),
  searchTypes: z.array(SearchTypes$inboundSchema).optional(),
  includeCollections:
    GetSearchAllLibrariesQueryParamIncludeCollections$inboundSchema,
  includeExternalMedia:
    GetSearchAllLibrariesQueryParamIncludeExternalMedia$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ClientID": "clientID",
  });
});

/** @internal */
export type GetSearchAllLibrariesRequest$Outbound = {
  query: string;
  ClientID: string;
  limit?: number | undefined;
  searchTypes?: Array<string> | undefined;
  includeCollections: number;
  includeExternalMedia: number;
};

/** @internal */
export const GetSearchAllLibrariesRequest$outboundSchema: z.ZodType<
  GetSearchAllLibrariesRequest$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesRequest
> = z.object({
  query: z.string(),
  clientID: z.string(),
  limit: z.number().int().optional(),
  searchTypes: z.array(SearchTypes$outboundSchema).optional(),
  includeCollections:
    GetSearchAllLibrariesQueryParamIncludeCollections$outboundSchema.default(
      GetSearchAllLibrariesQueryParamIncludeCollections.Disable,
    ),
  includeExternalMedia:
    GetSearchAllLibrariesQueryParamIncludeExternalMedia$outboundSchema.default(
      GetSearchAllLibrariesQueryParamIncludeExternalMedia.Disable,
    ),
}).transform((v) => {
  return remap$(v, {
    clientID: "ClientID",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesRequest$ {
  /** @deprecated use `GetSearchAllLibrariesRequest$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesRequest$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesRequest$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesRequest$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesRequest$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesRequest$Outbound;
}

export function getSearchAllLibrariesRequestToJSON(
  getSearchAllLibrariesRequest: GetSearchAllLibrariesRequest,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesRequest$outboundSchema.parse(
      getSearchAllLibrariesRequest,
    ),
  );
}

export function getSearchAllLibrariesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesRequest' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesDirectory$inboundSchema: z.ZodType<
  GetSearchAllLibrariesDirectory,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  librarySectionID: z.number().int(),
  librarySectionKey: z.string(),
  librarySectionTitle: z.string(),
  librarySectionType: z.literal(1).optional(),
  type: z.string(),
  id: z.number().int(),
  filter: z.string().optional(),
  tag: z.string(),
  tagType: z.literal(4).optional(),
  tagKey: z.string().optional(),
  thumb: z.string().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type GetSearchAllLibrariesDirectory$Outbound = {
  key: string;
  librarySectionID: number;
  librarySectionKey: string;
  librarySectionTitle: string;
  librarySectionType: 1;
  type: string;
  id: number;
  filter?: string | undefined;
  tag: string;
  tagType: 4;
  tagKey?: string | undefined;
  thumb?: string | undefined;
  count?: number | undefined;
};

/** @internal */
export const GetSearchAllLibrariesDirectory$outboundSchema: z.ZodType<
  GetSearchAllLibrariesDirectory$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesDirectory
> = z.object({
  key: z.string(),
  librarySectionID: z.number().int(),
  librarySectionKey: z.string(),
  librarySectionTitle: z.string(),
  librarySectionType: z.literal(1).default(1 as const),
  type: z.string(),
  id: z.number().int(),
  filter: z.string().optional(),
  tag: z.string(),
  tagType: z.literal(4).default(4 as const),
  tagKey: z.string().optional(),
  thumb: z.string().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesDirectory$ {
  /** @deprecated use `GetSearchAllLibrariesDirectory$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesDirectory$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesDirectory$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesDirectory$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesDirectory$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesDirectory$Outbound;
}

export function getSearchAllLibrariesDirectoryToJSON(
  getSearchAllLibrariesDirectory: GetSearchAllLibrariesDirectory,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesDirectory$outboundSchema.parse(
      getSearchAllLibrariesDirectory,
    ),
  );
}

export function getSearchAllLibrariesDirectoryFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesDirectory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesDirectory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesDirectory' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesType$inboundSchema: z.ZodType<
  GetSearchAllLibrariesTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetSearchAllLibrariesType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetSearchAllLibrariesType$outboundSchema: z.ZodType<
  GetSearchAllLibrariesTypeOpen,
  z.ZodTypeDef,
  GetSearchAllLibrariesTypeOpen
> = z.union([
  z.nativeEnum(GetSearchAllLibrariesType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesType$ {
  /** @deprecated use `GetSearchAllLibrariesType$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesType$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesType$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesType$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesLibraryType$inboundSchema: z.ZodType<
  GetSearchAllLibrariesLibraryTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetSearchAllLibrariesLibraryType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetSearchAllLibrariesLibraryType$outboundSchema: z.ZodType<
  GetSearchAllLibrariesLibraryTypeOpen,
  z.ZodTypeDef,
  GetSearchAllLibrariesLibraryTypeOpen
> = z.union([
  z.nativeEnum(GetSearchAllLibrariesLibraryType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesLibraryType$ {
  /** @deprecated use `GetSearchAllLibrariesLibraryType$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesLibraryType$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesLibraryType$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesLibraryType$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesImage$inboundSchema: z.ZodType<
  GetSearchAllLibrariesImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  alt: z.string(),
  type: GetSearchAllLibrariesLibraryType$inboundSchema,
  url: z.string(),
});

/** @internal */
export type GetSearchAllLibrariesImage$Outbound = {
  alt: string;
  type: string;
  url: string;
};

/** @internal */
export const GetSearchAllLibrariesImage$outboundSchema: z.ZodType<
  GetSearchAllLibrariesImage$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesImage
> = z.object({
  alt: z.string(),
  type: GetSearchAllLibrariesLibraryType$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesImage$ {
  /** @deprecated use `GetSearchAllLibrariesImage$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesImage$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesImage$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesImage$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesImage$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesImage$Outbound;
}

export function getSearchAllLibrariesImageToJSON(
  getSearchAllLibrariesImage: GetSearchAllLibrariesImage,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesImage$outboundSchema.parse(getSearchAllLibrariesImage),
  );
}

export function getSearchAllLibrariesImageFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesImage' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesUltraBlurColors$inboundSchema: z.ZodType<
  GetSearchAllLibrariesUltraBlurColors,
  z.ZodTypeDef,
  unknown
> = z.object({
  topLeft: z.string(),
  topRight: z.string(),
  bottomRight: z.string(),
  bottomLeft: z.string(),
});

/** @internal */
export type GetSearchAllLibrariesUltraBlurColors$Outbound = {
  topLeft: string;
  topRight: string;
  bottomRight: string;
  bottomLeft: string;
};

/** @internal */
export const GetSearchAllLibrariesUltraBlurColors$outboundSchema: z.ZodType<
  GetSearchAllLibrariesUltraBlurColors$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesUltraBlurColors
> = z.object({
  topLeft: z.string(),
  topRight: z.string(),
  bottomRight: z.string(),
  bottomLeft: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesUltraBlurColors$ {
  /** @deprecated use `GetSearchAllLibrariesUltraBlurColors$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesUltraBlurColors$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesUltraBlurColors$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesUltraBlurColors$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesUltraBlurColors$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesUltraBlurColors$Outbound;
}

export function getSearchAllLibrariesUltraBlurColorsToJSON(
  getSearchAllLibrariesUltraBlurColors: GetSearchAllLibrariesUltraBlurColors,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesUltraBlurColors$outboundSchema.parse(
      getSearchAllLibrariesUltraBlurColors,
    ),
  );
}

export function getSearchAllLibrariesUltraBlurColorsFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesUltraBlurColors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSearchAllLibrariesUltraBlurColors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesUltraBlurColors' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesGuids$inboundSchema: z.ZodType<
  GetSearchAllLibrariesGuids,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetSearchAllLibrariesGuids$Outbound = {
  id: string;
};

/** @internal */
export const GetSearchAllLibrariesGuids$outboundSchema: z.ZodType<
  GetSearchAllLibrariesGuids$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesGuids
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesGuids$ {
  /** @deprecated use `GetSearchAllLibrariesGuids$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesGuids$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesGuids$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesGuids$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesGuids$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesGuids$Outbound;
}

export function getSearchAllLibrariesGuidsToJSON(
  getSearchAllLibrariesGuids: GetSearchAllLibrariesGuids,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesGuids$outboundSchema.parse(getSearchAllLibrariesGuids),
  );
}

export function getSearchAllLibrariesGuidsFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesGuids, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesGuids$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesGuids' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesShowOrdering$inboundSchema: z.ZodType<
  GetSearchAllLibrariesShowOrderingOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetSearchAllLibrariesShowOrdering),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetSearchAllLibrariesShowOrdering$outboundSchema: z.ZodType<
  GetSearchAllLibrariesShowOrderingOpen,
  z.ZodTypeDef,
  GetSearchAllLibrariesShowOrderingOpen
> = z.union([
  z.nativeEnum(GetSearchAllLibrariesShowOrdering),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesShowOrdering$ {
  /** @deprecated use `GetSearchAllLibrariesShowOrdering$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesShowOrdering$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesShowOrdering$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesShowOrdering$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesFlattenSeasons$inboundSchema: z.ZodType<
  GetSearchAllLibrariesFlattenSeasonsOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GetSearchAllLibrariesFlattenSeasons),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GetSearchAllLibrariesFlattenSeasons$outboundSchema: z.ZodType<
  GetSearchAllLibrariesFlattenSeasonsOpen,
  z.ZodTypeDef,
  GetSearchAllLibrariesFlattenSeasonsOpen
> = z.union([
  z.nativeEnum(GetSearchAllLibrariesFlattenSeasons),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesFlattenSeasons$ {
  /** @deprecated use `GetSearchAllLibrariesFlattenSeasons$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesFlattenSeasons$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesFlattenSeasons$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesFlattenSeasons$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesOptimizedForStreaming1$inboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesOptimizedForStreaming1> = z
    .nativeEnum(GetSearchAllLibrariesOptimizedForStreaming1);

/** @internal */
export const GetSearchAllLibrariesOptimizedForStreaming1$outboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesOptimizedForStreaming1> =
    GetSearchAllLibrariesOptimizedForStreaming1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesOptimizedForStreaming1$ {
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreaming1$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesOptimizedForStreaming1$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreaming1$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesOptimizedForStreaming1$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesOptimizedForStreaming$inboundSchema:
  z.ZodType<GetSearchAllLibrariesOptimizedForStreaming, z.ZodTypeDef, unknown> =
    z.union([
      GetSearchAllLibrariesOptimizedForStreaming1$inboundSchema,
      z.boolean(),
    ]);

/** @internal */
export type GetSearchAllLibrariesOptimizedForStreaming$Outbound =
  | number
  | boolean;

/** @internal */
export const GetSearchAllLibrariesOptimizedForStreaming$outboundSchema:
  z.ZodType<
    GetSearchAllLibrariesOptimizedForStreaming$Outbound,
    z.ZodTypeDef,
    GetSearchAllLibrariesOptimizedForStreaming
  > = z.union([
    GetSearchAllLibrariesOptimizedForStreaming1$outboundSchema,
    z.boolean(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesOptimizedForStreaming$ {
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreaming$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesOptimizedForStreaming$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreaming$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesOptimizedForStreaming$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreaming$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesOptimizedForStreaming$Outbound;
}

export function getSearchAllLibrariesOptimizedForStreamingToJSON(
  getSearchAllLibrariesOptimizedForStreaming:
    GetSearchAllLibrariesOptimizedForStreaming,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesOptimizedForStreaming$outboundSchema.parse(
      getSearchAllLibrariesOptimizedForStreaming,
    ),
  );
}

export function getSearchAllLibrariesOptimizedForStreamingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSearchAllLibrariesOptimizedForStreaming,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSearchAllLibrariesOptimizedForStreaming$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSearchAllLibrariesOptimizedForStreaming' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesOptimizedForStreamingLibrary1$inboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesOptimizedForStreamingLibrary1> = z
    .nativeEnum(GetSearchAllLibrariesOptimizedForStreamingLibrary1);

/** @internal */
export const GetSearchAllLibrariesOptimizedForStreamingLibrary1$outboundSchema:
  z.ZodNativeEnum<typeof GetSearchAllLibrariesOptimizedForStreamingLibrary1> =
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesOptimizedForStreamingLibrary1$ {
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreamingLibrary1$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesOptimizedForStreamingLibrary1$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesLibraryOptimizedForStreaming$inboundSchema:
  z.ZodType<
    GetSearchAllLibrariesLibraryOptimizedForStreaming,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$inboundSchema,
    z.boolean(),
  ]);

/** @internal */
export type GetSearchAllLibrariesLibraryOptimizedForStreaming$Outbound =
  | number
  | boolean;

/** @internal */
export const GetSearchAllLibrariesLibraryOptimizedForStreaming$outboundSchema:
  z.ZodType<
    GetSearchAllLibrariesLibraryOptimizedForStreaming$Outbound,
    z.ZodTypeDef,
    GetSearchAllLibrariesLibraryOptimizedForStreaming
  > = z.union([
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$outboundSchema,
    z.boolean(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesLibraryOptimizedForStreaming$ {
  /** @deprecated use `GetSearchAllLibrariesLibraryOptimizedForStreaming$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesLibraryOptimizedForStreaming$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesLibraryOptimizedForStreaming$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesLibraryOptimizedForStreaming$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesLibraryOptimizedForStreaming$Outbound` instead. */
  export type Outbound =
    GetSearchAllLibrariesLibraryOptimizedForStreaming$Outbound;
}

export function getSearchAllLibrariesLibraryOptimizedForStreamingToJSON(
  getSearchAllLibrariesLibraryOptimizedForStreaming:
    GetSearchAllLibrariesLibraryOptimizedForStreaming,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesLibraryOptimizedForStreaming$outboundSchema.parse(
      getSearchAllLibrariesLibraryOptimizedForStreaming,
    ),
  );
}

export function getSearchAllLibrariesLibraryOptimizedForStreamingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSearchAllLibrariesLibraryOptimizedForStreaming,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSearchAllLibrariesLibraryOptimizedForStreaming$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSearchAllLibrariesLibraryOptimizedForStreaming' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesHasThumbnail$inboundSchema: z.ZodNativeEnum<
  typeof GetSearchAllLibrariesHasThumbnail
> = z.nativeEnum(GetSearchAllLibrariesHasThumbnail);

/** @internal */
export const GetSearchAllLibrariesHasThumbnail$outboundSchema: z.ZodNativeEnum<
  typeof GetSearchAllLibrariesHasThumbnail
> = GetSearchAllLibrariesHasThumbnail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesHasThumbnail$ {
  /** @deprecated use `GetSearchAllLibrariesHasThumbnail$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesHasThumbnail$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesHasThumbnail$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesHasThumbnail$outboundSchema;
}

/** @internal */
export const GetSearchAllLibrariesPart$inboundSchema: z.ZodType<
  GetSearchAllLibrariesPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessible: z.boolean().optional(),
  exists: z.boolean().optional(),
  id: z.number().int(),
  key: z.string().optional(),
  indexes: z.string().optional(),
  duration: z.number().int().optional(),
  file: z.string().optional(),
  size: z.number().int().optional(),
  packetLength: z.number().int().optional(),
  container: z.string().optional(),
  videoProfile: z.string().optional(),
  audioProfile: z.string().optional(),
  has64bitOffsets: z.boolean().optional(),
  optimizedForStreaming: z.union([
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$inboundSchema,
    z.boolean(),
  ]).optional(),
  hasThumbnail: GetSearchAllLibrariesHasThumbnail$inboundSchema.default(
    GetSearchAllLibrariesHasThumbnail.False,
  ),
});

/** @internal */
export type GetSearchAllLibrariesPart$Outbound = {
  accessible?: boolean | undefined;
  exists?: boolean | undefined;
  id: number;
  key?: string | undefined;
  indexes?: string | undefined;
  duration?: number | undefined;
  file?: string | undefined;
  size?: number | undefined;
  packetLength?: number | undefined;
  container?: string | undefined;
  videoProfile?: string | undefined;
  audioProfile?: string | undefined;
  has64bitOffsets?: boolean | undefined;
  optimizedForStreaming?: number | boolean | undefined;
  hasThumbnail: string;
};

/** @internal */
export const GetSearchAllLibrariesPart$outboundSchema: z.ZodType<
  GetSearchAllLibrariesPart$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesPart
> = z.object({
  accessible: z.boolean().optional(),
  exists: z.boolean().optional(),
  id: z.number().int(),
  key: z.string().optional(),
  indexes: z.string().optional(),
  duration: z.number().int().optional(),
  file: z.string().optional(),
  size: z.number().int().optional(),
  packetLength: z.number().int().optional(),
  container: z.string().optional(),
  videoProfile: z.string().optional(),
  audioProfile: z.string().optional(),
  has64bitOffsets: z.boolean().optional(),
  optimizedForStreaming: z.union([
    GetSearchAllLibrariesOptimizedForStreamingLibrary1$outboundSchema,
    z.boolean(),
  ]).optional(),
  hasThumbnail: GetSearchAllLibrariesHasThumbnail$outboundSchema.default(
    GetSearchAllLibrariesHasThumbnail.False,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesPart$ {
  /** @deprecated use `GetSearchAllLibrariesPart$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesPart$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesPart$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesPart$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesPart$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesPart$Outbound;
}

export function getSearchAllLibrariesPartToJSON(
  getSearchAllLibrariesPart: GetSearchAllLibrariesPart,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesPart$outboundSchema.parse(getSearchAllLibrariesPart),
  );
}

export function getSearchAllLibrariesPartFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesPart' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesMedia$inboundSchema: z.ZodType<
  GetSearchAllLibrariesMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  duration: z.number().int().optional(),
  bitrate: z.number().int().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  aspectRatio: z.number().optional(),
  audioChannels: z.number().int().optional(),
  displayOffset: z.number().int().optional(),
  audioCodec: z.string().optional(),
  videoCodec: z.string().optional(),
  videoResolution: z.string().optional(),
  container: z.string().optional(),
  videoFrameRate: z.string().optional(),
  videoProfile: z.string().optional(),
  hasVoiceActivity: z.boolean().optional(),
  audioProfile: z.string().optional(),
  optimizedForStreaming: z.union([
    GetSearchAllLibrariesOptimizedForStreaming1$inboundSchema,
    z.boolean(),
  ]).optional(),
  has64bitOffsets: z.boolean().optional(),
  Part: z.array(z.lazy(() => GetSearchAllLibrariesPart$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Part": "part",
  });
});

/** @internal */
export type GetSearchAllLibrariesMedia$Outbound = {
  id: number;
  duration?: number | undefined;
  bitrate?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  aspectRatio?: number | undefined;
  audioChannels?: number | undefined;
  displayOffset?: number | undefined;
  audioCodec?: string | undefined;
  videoCodec?: string | undefined;
  videoResolution?: string | undefined;
  container?: string | undefined;
  videoFrameRate?: string | undefined;
  videoProfile?: string | undefined;
  hasVoiceActivity?: boolean | undefined;
  audioProfile?: string | undefined;
  optimizedForStreaming?: number | boolean | undefined;
  has64bitOffsets?: boolean | undefined;
  Part?: Array<GetSearchAllLibrariesPart$Outbound> | undefined;
};

/** @internal */
export const GetSearchAllLibrariesMedia$outboundSchema: z.ZodType<
  GetSearchAllLibrariesMedia$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesMedia
> = z.object({
  id: z.number().int(),
  duration: z.number().int().optional(),
  bitrate: z.number().int().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  aspectRatio: z.number().optional(),
  audioChannels: z.number().int().optional(),
  displayOffset: z.number().int().optional(),
  audioCodec: z.string().optional(),
  videoCodec: z.string().optional(),
  videoResolution: z.string().optional(),
  container: z.string().optional(),
  videoFrameRate: z.string().optional(),
  videoProfile: z.string().optional(),
  hasVoiceActivity: z.boolean().optional(),
  audioProfile: z.string().optional(),
  optimizedForStreaming: z.union([
    GetSearchAllLibrariesOptimizedForStreaming1$outboundSchema,
    z.boolean(),
  ]).optional(),
  has64bitOffsets: z.boolean().optional(),
  part: z.array(z.lazy(() => GetSearchAllLibrariesPart$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    part: "Part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesMedia$ {
  /** @deprecated use `GetSearchAllLibrariesMedia$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesMedia$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesMedia$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesMedia$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesMedia$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesMedia$Outbound;
}

export function getSearchAllLibrariesMediaToJSON(
  getSearchAllLibrariesMedia: GetSearchAllLibrariesMedia,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesMedia$outboundSchema.parse(getSearchAllLibrariesMedia),
  );
}

export function getSearchAllLibrariesMediaFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesMedia' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesGenre$inboundSchema: z.ZodType<
  GetSearchAllLibrariesGenre,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/** @internal */
export type GetSearchAllLibrariesGenre$Outbound = {
  id: number;
  tag: string;
};

/** @internal */
export const GetSearchAllLibrariesGenre$outboundSchema: z.ZodType<
  GetSearchAllLibrariesGenre$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesGenre
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesGenre$ {
  /** @deprecated use `GetSearchAllLibrariesGenre$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesGenre$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesGenre$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesGenre$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesGenre$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesGenre$Outbound;
}

export function getSearchAllLibrariesGenreToJSON(
  getSearchAllLibrariesGenre: GetSearchAllLibrariesGenre,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesGenre$outboundSchema.parse(getSearchAllLibrariesGenre),
  );
}

export function getSearchAllLibrariesGenreFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesGenre, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesGenre$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesGenre' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesCountry$inboundSchema: z.ZodType<
  GetSearchAllLibrariesCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/** @internal */
export type GetSearchAllLibrariesCountry$Outbound = {
  id: number;
  tag: string;
};

/** @internal */
export const GetSearchAllLibrariesCountry$outboundSchema: z.ZodType<
  GetSearchAllLibrariesCountry$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesCountry
> = z.object({
  id: z.number().int(),
  tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesCountry$ {
  /** @deprecated use `GetSearchAllLibrariesCountry$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesCountry$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesCountry$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesCountry$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesCountry$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesCountry$Outbound;
}

export function getSearchAllLibrariesCountryToJSON(
  getSearchAllLibrariesCountry: GetSearchAllLibrariesCountry,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesCountry$outboundSchema.parse(
      getSearchAllLibrariesCountry,
    ),
  );
}

export function getSearchAllLibrariesCountryFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesCountry' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesDirector$inboundSchema: z.ZodType<
  GetSearchAllLibrariesDirector,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetSearchAllLibrariesDirector$Outbound = {
  id: number;
  tag: string;
  thumb?: string | undefined;
};

/** @internal */
export const GetSearchAllLibrariesDirector$outboundSchema: z.ZodType<
  GetSearchAllLibrariesDirector$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesDirector
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesDirector$ {
  /** @deprecated use `GetSearchAllLibrariesDirector$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesDirector$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesDirector$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesDirector$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesDirector$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesDirector$Outbound;
}

export function getSearchAllLibrariesDirectorToJSON(
  getSearchAllLibrariesDirector: GetSearchAllLibrariesDirector,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesDirector$outboundSchema.parse(
      getSearchAllLibrariesDirector,
    ),
  );
}

export function getSearchAllLibrariesDirectorFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesDirector, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesDirector$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesDirector' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesWriter$inboundSchema: z.ZodType<
  GetSearchAllLibrariesWriter,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetSearchAllLibrariesWriter$Outbound = {
  id: number;
  tag: string;
  thumb?: string | undefined;
};

/** @internal */
export const GetSearchAllLibrariesWriter$outboundSchema: z.ZodType<
  GetSearchAllLibrariesWriter$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesWriter
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesWriter$ {
  /** @deprecated use `GetSearchAllLibrariesWriter$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesWriter$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesWriter$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesWriter$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesWriter$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesWriter$Outbound;
}

export function getSearchAllLibrariesWriterToJSON(
  getSearchAllLibrariesWriter: GetSearchAllLibrariesWriter,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesWriter$outboundSchema.parse(
      getSearchAllLibrariesWriter,
    ),
  );
}

export function getSearchAllLibrariesWriterFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesWriter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesWriter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesWriter' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesRole$inboundSchema: z.ZodType<
  GetSearchAllLibrariesRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  role: z.string().optional(),
  thumb: z.string().optional(),
});

/** @internal */
export type GetSearchAllLibrariesRole$Outbound = {
  id: number;
  tag: string;
  role?: string | undefined;
  thumb?: string | undefined;
};

/** @internal */
export const GetSearchAllLibrariesRole$outboundSchema: z.ZodType<
  GetSearchAllLibrariesRole$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesRole
> = z.object({
  id: z.number().int(),
  tag: z.string(),
  role: z.string().optional(),
  thumb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesRole$ {
  /** @deprecated use `GetSearchAllLibrariesRole$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesRole$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesRole$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesRole$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesRole$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesRole$Outbound;
}

export function getSearchAllLibrariesRoleToJSON(
  getSearchAllLibrariesRole: GetSearchAllLibrariesRole,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesRole$outboundSchema.parse(getSearchAllLibrariesRole),
  );
}

export function getSearchAllLibrariesRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesRole' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesLocation$inboundSchema: z.ZodType<
  GetSearchAllLibrariesLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
});

/** @internal */
export type GetSearchAllLibrariesLocation$Outbound = {
  path: string;
};

/** @internal */
export const GetSearchAllLibrariesLocation$outboundSchema: z.ZodType<
  GetSearchAllLibrariesLocation$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesLocation
> = z.object({
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesLocation$ {
  /** @deprecated use `GetSearchAllLibrariesLocation$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesLocation$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesLocation$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesLocation$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesLocation$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesLocation$Outbound;
}

export function getSearchAllLibrariesLocationToJSON(
  getSearchAllLibrariesLocation: GetSearchAllLibrariesLocation,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesLocation$outboundSchema.parse(
      getSearchAllLibrariesLocation,
    ),
  );
}

export function getSearchAllLibrariesLocationFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesLocation' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesMetadata$inboundSchema: z.ZodType<
  GetSearchAllLibrariesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  ratingKey: z.string(),
  key: z.string(),
  guid: z.string(),
  slug: z.string(),
  studio: z.string().optional(),
  type: GetSearchAllLibrariesType$inboundSchema,
  title: z.string(),
  banner: z.string(),
  titleSort: z.string(),
  contentRating: z.string().optional(),
  summary: z.string(),
  rating: z.number(),
  audienceRating: z.number(),
  year: z.number().int().optional(),
  tagline: z.string(),
  thumb: z.string(),
  art: z.string(),
  theme: z.string(),
  index: z.number().int(),
  leafCount: z.number().int().optional(),
  viewedLeafCount: z.number().int().optional(),
  childCount: z.number().int(),
  seasonCount: z.number().int(),
  duration: z.number().int(),
  originallyAvailableAt: z.string().transform(v => new RFCDate(v)).optional(),
  addedAt: z.number().int(),
  updatedAt: z.number().int().optional(),
  parentYear: z.number().int().optional(),
  audienceRatingImage: z.string().optional(),
  chapterSource: z.string().optional(),
  primaryExtraKey: z.string().optional(),
  originalTitle: z.string().optional(),
  parentRatingKey: z.string().optional(),
  grandparentRatingKey: z.string().optional(),
  parentGuid: z.string().optional(),
  grandparentGuid: z.string().optional(),
  grandparentSlug: z.string().optional(),
  grandparentKey: z.string().optional(),
  parentKey: z.string().optional(),
  grandparentTitle: z.string().optional(),
  grandparentThumb: z.string().optional(),
  grandparentTheme: z.string().optional(),
  grandparentArt: z.string().optional(),
  parentTitle: z.string().optional(),
  parentIndex: z.number().int().optional(),
  parentThumb: z.string().optional(),
  ratingImage: z.string().optional(),
  viewCount: z.number().int().optional(),
  viewOffset: z.number().int().optional(),
  skipCount: z.number().int().optional(),
  subtype: z.string().optional(),
  lastRatedAt: z.number().int().optional(),
  createdAtAccuracy: z.string().optional(),
  createdAtTZOffset: z.string().optional(),
  lastViewedAt: z.number().int().optional(),
  userRating: z.number().optional(),
  Image: z.array(z.lazy(() => GetSearchAllLibrariesImage$inboundSchema))
    .optional(),
  UltraBlurColors: z.lazy(() =>
    GetSearchAllLibrariesUltraBlurColors$inboundSchema
  ).optional(),
  Guid: z.array(z.lazy(() => GetSearchAllLibrariesGuids$inboundSchema))
    .optional(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionKey: z.string().optional(),
  showOrdering: GetSearchAllLibrariesShowOrdering$inboundSchema.optional(),
  flattenSeasons: GetSearchAllLibrariesFlattenSeasons$inboundSchema.optional(),
  skipChildren: z.boolean().optional(),
  Media: z.array(z.lazy(() => GetSearchAllLibrariesMedia$inboundSchema))
    .optional(),
  Genre: z.array(z.lazy(() => GetSearchAllLibrariesGenre$inboundSchema))
    .optional(),
  Country: z.array(z.lazy(() => GetSearchAllLibrariesCountry$inboundSchema))
    .optional(),
  Director: z.array(z.lazy(() => GetSearchAllLibrariesDirector$inboundSchema))
    .optional(),
  Writer: z.array(z.lazy(() => GetSearchAllLibrariesWriter$inboundSchema))
    .optional(),
  Role: z.array(z.lazy(() => GetSearchAllLibrariesRole$inboundSchema))
    .optional(),
  Location: z.array(z.lazy(() => GetSearchAllLibrariesLocation$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Image": "image",
    "UltraBlurColors": "ultraBlurColors",
    "Guid": "guids",
    "Media": "media",
    "Genre": "genre",
    "Country": "country",
    "Director": "director",
    "Writer": "writer",
    "Role": "role",
    "Location": "location",
  });
});

/** @internal */
export type GetSearchAllLibrariesMetadata$Outbound = {
  ratingKey: string;
  key: string;
  guid: string;
  slug: string;
  studio?: string | undefined;
  type: string;
  title: string;
  banner: string;
  titleSort: string;
  contentRating?: string | undefined;
  summary: string;
  rating: number;
  audienceRating: number;
  year?: number | undefined;
  tagline: string;
  thumb: string;
  art: string;
  theme: string;
  index: number;
  leafCount?: number | undefined;
  viewedLeafCount?: number | undefined;
  childCount: number;
  seasonCount: number;
  duration: number;
  originallyAvailableAt?: string | undefined;
  addedAt: number;
  updatedAt?: number | undefined;
  parentYear?: number | undefined;
  audienceRatingImage?: string | undefined;
  chapterSource?: string | undefined;
  primaryExtraKey?: string | undefined;
  originalTitle?: string | undefined;
  parentRatingKey?: string | undefined;
  grandparentRatingKey?: string | undefined;
  parentGuid?: string | undefined;
  grandparentGuid?: string | undefined;
  grandparentSlug?: string | undefined;
  grandparentKey?: string | undefined;
  parentKey?: string | undefined;
  grandparentTitle?: string | undefined;
  grandparentThumb?: string | undefined;
  grandparentTheme?: string | undefined;
  grandparentArt?: string | undefined;
  parentTitle?: string | undefined;
  parentIndex?: number | undefined;
  parentThumb?: string | undefined;
  ratingImage?: string | undefined;
  viewCount?: number | undefined;
  viewOffset?: number | undefined;
  skipCount?: number | undefined;
  subtype?: string | undefined;
  lastRatedAt?: number | undefined;
  createdAtAccuracy?: string | undefined;
  createdAtTZOffset?: string | undefined;
  lastViewedAt?: number | undefined;
  userRating?: number | undefined;
  Image?: Array<GetSearchAllLibrariesImage$Outbound> | undefined;
  UltraBlurColors?: GetSearchAllLibrariesUltraBlurColors$Outbound | undefined;
  Guid?: Array<GetSearchAllLibrariesGuids$Outbound> | undefined;
  librarySectionID?: number | undefined;
  librarySectionTitle?: string | undefined;
  librarySectionKey?: string | undefined;
  showOrdering?: string | undefined;
  flattenSeasons?: string | undefined;
  skipChildren?: boolean | undefined;
  Media?: Array<GetSearchAllLibrariesMedia$Outbound> | undefined;
  Genre?: Array<GetSearchAllLibrariesGenre$Outbound> | undefined;
  Country?: Array<GetSearchAllLibrariesCountry$Outbound> | undefined;
  Director?: Array<GetSearchAllLibrariesDirector$Outbound> | undefined;
  Writer?: Array<GetSearchAllLibrariesWriter$Outbound> | undefined;
  Role?: Array<GetSearchAllLibrariesRole$Outbound> | undefined;
  Location?: Array<GetSearchAllLibrariesLocation$Outbound> | undefined;
};

/** @internal */
export const GetSearchAllLibrariesMetadata$outboundSchema: z.ZodType<
  GetSearchAllLibrariesMetadata$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesMetadata
> = z.object({
  ratingKey: z.string(),
  key: z.string(),
  guid: z.string(),
  slug: z.string(),
  studio: z.string().optional(),
  type: GetSearchAllLibrariesType$outboundSchema,
  title: z.string(),
  banner: z.string(),
  titleSort: z.string(),
  contentRating: z.string().optional(),
  summary: z.string(),
  rating: z.number(),
  audienceRating: z.number(),
  year: z.number().int().optional(),
  tagline: z.string(),
  thumb: z.string(),
  art: z.string(),
  theme: z.string(),
  index: z.number().int(),
  leafCount: z.number().int().optional(),
  viewedLeafCount: z.number().int().optional(),
  childCount: z.number().int(),
  seasonCount: z.number().int(),
  duration: z.number().int(),
  originallyAvailableAt: z.instanceof(RFCDate).transform(v => v.toString())
    .optional(),
  addedAt: z.number().int(),
  updatedAt: z.number().int().optional(),
  parentYear: z.number().int().optional(),
  audienceRatingImage: z.string().optional(),
  chapterSource: z.string().optional(),
  primaryExtraKey: z.string().optional(),
  originalTitle: z.string().optional(),
  parentRatingKey: z.string().optional(),
  grandparentRatingKey: z.string().optional(),
  parentGuid: z.string().optional(),
  grandparentGuid: z.string().optional(),
  grandparentSlug: z.string().optional(),
  grandparentKey: z.string().optional(),
  parentKey: z.string().optional(),
  grandparentTitle: z.string().optional(),
  grandparentThumb: z.string().optional(),
  grandparentTheme: z.string().optional(),
  grandparentArt: z.string().optional(),
  parentTitle: z.string().optional(),
  parentIndex: z.number().int().optional(),
  parentThumb: z.string().optional(),
  ratingImage: z.string().optional(),
  viewCount: z.number().int().optional(),
  viewOffset: z.number().int().optional(),
  skipCount: z.number().int().optional(),
  subtype: z.string().optional(),
  lastRatedAt: z.number().int().optional(),
  createdAtAccuracy: z.string().optional(),
  createdAtTZOffset: z.string().optional(),
  lastViewedAt: z.number().int().optional(),
  userRating: z.number().optional(),
  image: z.array(z.lazy(() => GetSearchAllLibrariesImage$outboundSchema))
    .optional(),
  ultraBlurColors: z.lazy(() =>
    GetSearchAllLibrariesUltraBlurColors$outboundSchema
  ).optional(),
  guids: z.array(z.lazy(() => GetSearchAllLibrariesGuids$outboundSchema))
    .optional(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionKey: z.string().optional(),
  showOrdering: GetSearchAllLibrariesShowOrdering$outboundSchema.optional(),
  flattenSeasons: GetSearchAllLibrariesFlattenSeasons$outboundSchema.optional(),
  skipChildren: z.boolean().optional(),
  media: z.array(z.lazy(() => GetSearchAllLibrariesMedia$outboundSchema))
    .optional(),
  genre: z.array(z.lazy(() => GetSearchAllLibrariesGenre$outboundSchema))
    .optional(),
  country: z.array(z.lazy(() => GetSearchAllLibrariesCountry$outboundSchema))
    .optional(),
  director: z.array(z.lazy(() => GetSearchAllLibrariesDirector$outboundSchema))
    .optional(),
  writer: z.array(z.lazy(() => GetSearchAllLibrariesWriter$outboundSchema))
    .optional(),
  role: z.array(z.lazy(() => GetSearchAllLibrariesRole$outboundSchema))
    .optional(),
  location: z.array(z.lazy(() => GetSearchAllLibrariesLocation$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    image: "Image",
    ultraBlurColors: "UltraBlurColors",
    guids: "Guid",
    media: "Media",
    genre: "Genre",
    country: "Country",
    director: "Director",
    writer: "Writer",
    role: "Role",
    location: "Location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesMetadata$ {
  /** @deprecated use `GetSearchAllLibrariesMetadata$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesMetadata$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesMetadata$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesMetadata$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesMetadata$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesMetadata$Outbound;
}

export function getSearchAllLibrariesMetadataToJSON(
  getSearchAllLibrariesMetadata: GetSearchAllLibrariesMetadata,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesMetadata$outboundSchema.parse(
      getSearchAllLibrariesMetadata,
    ),
  );
}

export function getSearchAllLibrariesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesMetadata' from JSON`,
  );
}

/** @internal */
export const SearchResult$inboundSchema: z.ZodType<
  SearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number(),
  Directory: z.lazy(() => GetSearchAllLibrariesDirectory$inboundSchema)
    .optional(),
  Metadata: z.lazy(() => GetSearchAllLibrariesMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Directory": "directory",
    "Metadata": "metadata",
  });
});

/** @internal */
export type SearchResult$Outbound = {
  score: number;
  Directory?: GetSearchAllLibrariesDirectory$Outbound | undefined;
  Metadata?: GetSearchAllLibrariesMetadata$Outbound | undefined;
};

/** @internal */
export const SearchResult$outboundSchema: z.ZodType<
  SearchResult$Outbound,
  z.ZodTypeDef,
  SearchResult
> = z.object({
  score: z.number(),
  directory: z.lazy(() => GetSearchAllLibrariesDirectory$outboundSchema)
    .optional(),
  metadata: z.lazy(() => GetSearchAllLibrariesMetadata$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    directory: "Directory",
    metadata: "Metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResult$ {
  /** @deprecated use `SearchResult$inboundSchema` instead. */
  export const inboundSchema = SearchResult$inboundSchema;
  /** @deprecated use `SearchResult$outboundSchema` instead. */
  export const outboundSchema = SearchResult$outboundSchema;
  /** @deprecated use `SearchResult$Outbound` instead. */
  export type Outbound = SearchResult$Outbound;
}

export function searchResultToJSON(searchResult: SearchResult): string {
  return JSON.stringify(SearchResult$outboundSchema.parse(searchResult));
}

export function searchResultFromJSON(
  jsonString: string,
): SafeParseResult<SearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResult' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesMediaContainer$inboundSchema: z.ZodType<
  GetSearchAllLibrariesMediaContainer,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().int(),
  allowSync: z.boolean(),
  identifier: z.string(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionUUID: z.string().optional(),
  mediaTagPrefix: z.string(),
  mediaTagVersion: z.number().int(),
  SearchResult: z.array(z.lazy(() => SearchResult$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "SearchResult": "searchResult",
  });
});

/** @internal */
export type GetSearchAllLibrariesMediaContainer$Outbound = {
  size: number;
  allowSync: boolean;
  identifier: string;
  librarySectionID?: number | undefined;
  librarySectionTitle?: string | undefined;
  librarySectionUUID?: string | undefined;
  mediaTagPrefix: string;
  mediaTagVersion: number;
  SearchResult: Array<SearchResult$Outbound>;
};

/** @internal */
export const GetSearchAllLibrariesMediaContainer$outboundSchema: z.ZodType<
  GetSearchAllLibrariesMediaContainer$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesMediaContainer
> = z.object({
  size: z.number().int(),
  allowSync: z.boolean(),
  identifier: z.string(),
  librarySectionID: z.number().int().optional(),
  librarySectionTitle: z.string().optional(),
  librarySectionUUID: z.string().optional(),
  mediaTagPrefix: z.string(),
  mediaTagVersion: z.number().int(),
  searchResult: z.array(z.lazy(() => SearchResult$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    searchResult: "SearchResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesMediaContainer$ {
  /** @deprecated use `GetSearchAllLibrariesMediaContainer$inboundSchema` instead. */
  export const inboundSchema =
    GetSearchAllLibrariesMediaContainer$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesMediaContainer$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesMediaContainer$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesMediaContainer$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesMediaContainer$Outbound;
}

export function getSearchAllLibrariesMediaContainerToJSON(
  getSearchAllLibrariesMediaContainer: GetSearchAllLibrariesMediaContainer,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesMediaContainer$outboundSchema.parse(
      getSearchAllLibrariesMediaContainer,
    ),
  );
}

export function getSearchAllLibrariesMediaContainerFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesMediaContainer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSearchAllLibrariesMediaContainer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesMediaContainer' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesResponseBody$inboundSchema: z.ZodType<
  GetSearchAllLibrariesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  MediaContainer: z.lazy(() =>
    GetSearchAllLibrariesMediaContainer$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "MediaContainer": "mediaContainer",
  });
});

/** @internal */
export type GetSearchAllLibrariesResponseBody$Outbound = {
  MediaContainer: GetSearchAllLibrariesMediaContainer$Outbound;
};

/** @internal */
export const GetSearchAllLibrariesResponseBody$outboundSchema: z.ZodType<
  GetSearchAllLibrariesResponseBody$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesResponseBody
> = z.object({
  mediaContainer: z.lazy(() =>
    GetSearchAllLibrariesMediaContainer$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    mediaContainer: "MediaContainer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesResponseBody$ {
  /** @deprecated use `GetSearchAllLibrariesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesResponseBody$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetSearchAllLibrariesResponseBody$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesResponseBody$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesResponseBody$Outbound;
}

export function getSearchAllLibrariesResponseBodyToJSON(
  getSearchAllLibrariesResponseBody: GetSearchAllLibrariesResponseBody,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesResponseBody$outboundSchema.parse(
      getSearchAllLibrariesResponseBody,
    ),
  );
}

export function getSearchAllLibrariesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesResponseBody' from JSON`,
  );
}

/** @internal */
export const GetSearchAllLibrariesResponse$inboundSchema: z.ZodType<
  GetSearchAllLibrariesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetSearchAllLibrariesResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetSearchAllLibrariesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetSearchAllLibrariesResponseBody$Outbound | undefined;
};

/** @internal */
export const GetSearchAllLibrariesResponse$outboundSchema: z.ZodType<
  GetSearchAllLibrariesResponse$Outbound,
  z.ZodTypeDef,
  GetSearchAllLibrariesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetSearchAllLibrariesResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchAllLibrariesResponse$ {
  /** @deprecated use `GetSearchAllLibrariesResponse$inboundSchema` instead. */
  export const inboundSchema = GetSearchAllLibrariesResponse$inboundSchema;
  /** @deprecated use `GetSearchAllLibrariesResponse$outboundSchema` instead. */
  export const outboundSchema = GetSearchAllLibrariesResponse$outboundSchema;
  /** @deprecated use `GetSearchAllLibrariesResponse$Outbound` instead. */
  export type Outbound = GetSearchAllLibrariesResponse$Outbound;
}

export function getSearchAllLibrariesResponseToJSON(
  getSearchAllLibrariesResponse: GetSearchAllLibrariesResponse,
): string {
  return JSON.stringify(
    GetSearchAllLibrariesResponse$outboundSchema.parse(
      getSearchAllLibrariesResponse,
    ),
  );
}

export function getSearchAllLibrariesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchAllLibrariesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchAllLibrariesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchAllLibrariesResponse' from JSON`,
  );
}
