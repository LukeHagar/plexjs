/**
 * Plex-API
 * An Open API Spec for interacting with Plex.tv and Plex Servers
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: Lukeslakemail@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface GetPin200Response
 */
export interface GetPin200Response {
    /**
     * PinID for use with authentication
     * @type {any}
     * @memberof GetPin200Response
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'code'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'product'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'trusted'?: any;
    /**
     * a link to a QR code hosted on plex.tv  The QR code redirects to the relevant `plex.tv/link` authentication page Which then prompts the user for the 4 Digit Link Pin
     * @type {any}
     * @memberof GetPin200Response
     */
    'qr'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'clientIdentifier'?: any;
    /**
     *
     * @type {GetPin200ResponseLocation}
     * @memberof GetPin200Response
     */
    'location'?: GetPin200ResponseLocation;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'expiresIn'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'createdAt'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'expiresAt'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'authToken'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200Response
     */
    'newRegistration'?: any;
}
/**
 *
 * @export
 * @interface GetPin200ResponseLocation
 */
export interface GetPin200ResponseLocation {
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'code'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'european_union_member'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'continent_code'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'country'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'city'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'time_zone'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'postal_code'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'in_privacy_restricted_country'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'subdivisions'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPin200ResponseLocation
     */
    'coordinates'?: any;
}
/**
 *
 * @export
 * @interface GetPin400Response
 */
export interface GetPin400Response {
    /**
     *
     * @type {any}
     * @memberof GetPin400Response
     */
    'errors'?: any;
}
/**
 *
 * @export
 * @interface GetServerActivities200Response
 */
export interface GetServerActivities200Response {
    /**
     *
     * @type {GetServerActivities200ResponseMediaContainer}
     * @memberof GetServerActivities200Response
     */
    'MediaContainer'?: GetServerActivities200ResponseMediaContainer;
}
/**
 *
 * @export
 * @interface GetServerActivities200ResponseMediaContainer
 */
export interface GetServerActivities200ResponseMediaContainer {
    /**
     *
     * @type {any}
     * @memberof GetServerActivities200ResponseMediaContainer
     */
    'size'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerActivities200ResponseMediaContainer
     */
    'Activity'?: any;
}
/**
 *
 * @export
 * @interface GetServerCapabilities200Response
 */
export interface GetServerCapabilities200Response {
    /**
     *
     * @type {GetServerCapabilities200ResponseMediaContainer}
     * @memberof GetServerCapabilities200Response
     */
    'MediaContainer'?: GetServerCapabilities200ResponseMediaContainer;
}
/**
 *
 * @export
 * @interface GetServerCapabilities200ResponseMediaContainer
 */
export interface GetServerCapabilities200ResponseMediaContainer {
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'size'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'allowCameraUpload'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'allowChannelAccess'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'allowMediaDeletion'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'allowSharing'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'allowSync'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'allowTuners'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'backgroundProcessing'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'certificate'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'companionProxy'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'countryCode'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'diagnostics'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'eventStream'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'friendlyName'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'hubSearch'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'itemClusters'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'livetv'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'machineIdentifier'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'mediaProviders'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'multiuser'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'musicAnalysis'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'myPlex'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'myPlexMappingState'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'myPlexSigninState'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'myPlexSubscription'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'myPlexUsername'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'offlineTranscode'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'ownerFeatures'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'photoAutoTag'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'platform'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'platformVersion'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'pluginHost'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'pushNotifications'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'readOnlyLibraries'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'streamingBrainABRVersion'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'streamingBrainVersion'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'sync'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderActiveVideoSessions'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderAudio'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderLyrics'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderPhoto'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderSubtitles'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderVideo'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderVideoBitrates'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderVideoQualities'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'transcoderVideoResolutions'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'updatedAt'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'updater'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'version'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'voiceSearch'?: any;
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities200ResponseMediaContainer
     */
    'Directory'?: any;
}
/**
 *
 * @export
 * @interface GetServerCapabilities401Response
 */
export interface GetServerCapabilities401Response {
    /**
     *
     * @type {any}
     * @memberof GetServerCapabilities401Response
     */
    'errors'?: any;
}
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export declare const ActivitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancel Server Activities
     * @summary Cancel Server Activities
     * @param {any} activityUUID The UUID of the activity to cancel.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelServerActivities: (activityUUID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Server Activities
     * @summary Get Server Activities
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerActivities: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export declare const ActivitiesApiFp: (configuration?: Configuration) => {
    /**
     * Cancel Server Activities
     * @summary Cancel Server Activities
     * @param {any} activityUUID The UUID of the activity to cancel.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelServerActivities(activityUUID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get Server Activities
     * @summary Get Server Activities
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerActivities(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServerActivities200Response>>;
};
/**
 * ActivitiesApi - factory interface
 * @export
 */
export declare const ActivitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancel Server Activities
     * @summary Cancel Server Activities
     * @param {any} activityUUID The UUID of the activity to cancel.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelServerActivities(activityUUID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get Server Activities
     * @summary Get Server Activities
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerActivities(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<GetServerActivities200Response>;
};
/**
 * Request parameters for cancelServerActivities operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiCancelServerActivitiesRequest
 */
export interface ActivitiesApiCancelServerActivitiesRequest {
    /**
     * The UUID of the activity to cancel.
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly activityUUID: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ActivitiesApiCancelServerActivities
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getServerActivities operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetServerActivitiesRequest
 */
export interface ActivitiesApiGetServerActivitiesRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ActivitiesApiGetServerActivities
     */
    readonly xPlexVersion?: any;
}
/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export declare class ActivitiesApi extends BaseAPI {
    /**
     * Cancel Server Activities
     * @summary Cancel Server Activities
     * @param {ActivitiesApiCancelServerActivitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    cancelServerActivities(requestParameters: ActivitiesApiCancelServerActivitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get Server Activities
     * @summary Get Server Activities
     * @param {ActivitiesApiGetServerActivitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    getServerActivities(requestParameters?: ActivitiesApiGetServerActivitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetServerActivities200Response, any>>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve a Pin from Plex.tv for authentication flows
     * @summary Get a Pin
     * @param {any} [strong] Determines the kind of code returned by the API call Strong codes are used for Pin authentication flows Non-Strong codes are used for &#x60;Plex.tv/link&#x60;
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPin: (strong?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
     * @summary Get Access Token
     * @param {any} pinID The PinID to retrieve an access token for
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getToken: (pinID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve a Pin from Plex.tv for authentication flows
     * @summary Get a Pin
     * @param {any} [strong] Determines the kind of code returned by the API call Strong codes are used for Pin authentication flows Non-Strong codes are used for &#x60;Plex.tv/link&#x60;
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPin(strong?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPin200Response>>;
    /**
     * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
     * @summary Get Access Token
     * @param {any} pinID The PinID to retrieve an access token for
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getToken(pinID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve a Pin from Plex.tv for authentication flows
     * @summary Get a Pin
     * @param {any} [strong] Determines the kind of code returned by the API call Strong codes are used for Pin authentication flows Non-Strong codes are used for &#x60;Plex.tv/link&#x60;
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPin(strong?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<GetPin200Response>;
    /**
     * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
     * @summary Get Access Token
     * @param {any} pinID The PinID to retrieve an access token for
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getToken(pinID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getPin operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetPinRequest
 */
export interface AuthenticationApiGetPinRequest {
    /**
     * Determines the kind of code returned by the API call Strong codes are used for Pin authentication flows Non-Strong codes are used for &#x60;Plex.tv/link&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly strong?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof AuthenticationApiGetPin
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetTokenRequest
 */
export interface AuthenticationApiGetTokenRequest {
    /**
     * The PinID to retrieve an access token for
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly pinID: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof AuthenticationApiGetToken
     */
    readonly xPlexVersion?: any;
}
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * Retrieve a Pin from Plex.tv for authentication flows
     * @summary Get a Pin
     * @param {AuthenticationApiGetPinRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getPin(requestParameters?: AuthenticationApiGetPinRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPin200Response, any>>;
    /**
     * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
     * @summary Get Access Token
     * @param {AuthenticationApiGetTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getToken(requestParameters: AuthenticationApiGetTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ButlerApi - axios parameter creator
 * @export
 */
export declare const ButlerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start all Butler tasks
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startAllTasks: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start a single Butler task
     * @param {any} taskName the name of the task to be started.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startTask: (taskName: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * @summary Stop all Butler tasks
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    stopAllTasks: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * @summary Stop a single Butler task
     * @param {any} taskName The name of the task to be started.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    stopTask: (taskName: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ButlerApi - functional programming interface
 * @export
 */
export declare const ButlerApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start all Butler tasks
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startAllTasks(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start a single Butler task
     * @param {any} taskName the name of the task to be started.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startTask(taskName: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * @summary Stop all Butler tasks
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    stopAllTasks(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * @summary Stop a single Butler task
     * @param {any} taskName The name of the task to be started.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    stopTask(taskName: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ButlerApi - factory interface
 * @export
 */
export declare const ButlerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start all Butler tasks
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startAllTasks(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start a single Butler task
     * @param {any} taskName the name of the task to be started.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startTask(taskName: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * @summary Stop all Butler tasks
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    stopAllTasks(axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * @summary Stop a single Butler task
     * @param {any} taskName The name of the task to be started.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    stopTask(taskName: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for startAllTasks operation in ButlerApi.
 * @export
 * @interface ButlerApiStartAllTasksRequest
 */
export interface ButlerApiStartAllTasksRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ButlerApiStartAllTasks
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for startTask operation in ButlerApi.
 * @export
 * @interface ButlerApiStartTaskRequest
 */
export interface ButlerApiStartTaskRequest {
    /**
     * the name of the task to be started.
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly taskName: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ButlerApiStartTask
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for stopTask operation in ButlerApi.
 * @export
 * @interface ButlerApiStopTaskRequest
 */
export interface ButlerApiStopTaskRequest {
    /**
     * The name of the task to be started.
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly taskName: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ButlerApiStopTask
     */
    readonly xPlexVersion?: any;
}
/**
 * ButlerApi - object-oriented interface
 * @export
 * @class ButlerApi
 * @extends {BaseAPI}
 */
export declare class ButlerApi extends BaseAPI {
    /**
     * This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start all Butler tasks
     * @param {ButlerApiStartAllTasksRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ButlerApi
     */
    startAllTasks(requestParameters?: ButlerApiStartAllTasksRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server\'s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately.
     * @summary Start a single Butler task
     * @param {ButlerApiStartTaskRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ButlerApi
     */
    startTask(requestParameters: ButlerApiStartTaskRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * @summary Stop all Butler tasks
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ButlerApi
     */
    stopAllTasks(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * @summary Stop a single Butler task
     * @param {ButlerApiStopTaskRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ButlerApi
     */
    stopTask(requestParameters: ButlerApiStopTaskRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export declare const DevicesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get Available Clients
     * @summary Get Available Clients
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableClients: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Devices
     * @summary Get Devices
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDevices: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DevicesApi - functional programming interface
 * @export
 */
export declare const DevicesApiFp: (configuration?: Configuration) => {
    /**
     * Get Available Clients
     * @summary Get Available Clients
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableClients(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get Devices
     * @summary Get Devices
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDevices(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * DevicesApi - factory interface
 * @export
 */
export declare const DevicesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get Available Clients
     * @summary Get Available Clients
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableClients(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<any>;
    /**
     * Get Devices
     * @summary Get Devices
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDevices(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<any>;
};
/**
 * Request parameters for getAvailableClients operation in DevicesApi.
 * @export
 * @interface DevicesApiGetAvailableClientsRequest
 */
export interface DevicesApiGetAvailableClientsRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof DevicesApiGetAvailableClients
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getDevices operation in DevicesApi.
 * @export
 * @interface DevicesApiGetDevicesRequest
 */
export interface DevicesApiGetDevicesRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof DevicesApiGetDevices
     */
    readonly xPlexVersion?: any;
}
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export declare class DevicesApi extends BaseAPI {
    /**
     * Get Available Clients
     * @summary Get Available Clients
     * @param {DevicesApiGetAvailableClientsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    getAvailableClients(requestParameters?: DevicesApiGetAvailableClientsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get Devices
     * @summary Get Devices
     * @param {DevicesApiGetDevicesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    getDevices(requestParameters?: DevicesApiGetDevicesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * HashesApi - axios parameter creator
 * @export
 */
export declare const HashesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This resource returns hash values for local files
     * @summary Get Hash Value
     * @param {any} url This is the path to the local file, must be prefixed by &#x60;file://&#x60;
     * @param {any} [type] Item type
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFileHash: (url: any, type?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HashesApi - functional programming interface
 * @export
 */
export declare const HashesApiFp: (configuration?: Configuration) => {
    /**
     * This resource returns hash values for local files
     * @summary Get Hash Value
     * @param {any} url This is the path to the local file, must be prefixed by &#x60;file://&#x60;
     * @param {any} [type] Item type
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFileHash(url: any, type?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * HashesApi - factory interface
 * @export
 */
export declare const HashesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This resource returns hash values for local files
     * @summary Get Hash Value
     * @param {any} url This is the path to the local file, must be prefixed by &#x60;file://&#x60;
     * @param {any} [type] Item type
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFileHash(url: any, type?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getFileHash operation in HashesApi.
 * @export
 * @interface HashesApiGetFileHashRequest
 */
export interface HashesApiGetFileHashRequest {
    /**
     * This is the path to the local file, must be prefixed by &#x60;file://&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly url: any;
    /**
     * Item type
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly type?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof HashesApiGetFileHash
     */
    readonly xPlexVersion?: any;
}
/**
 * HashesApi - object-oriented interface
 * @export
 * @class HashesApi
 * @extends {BaseAPI}
 */
export declare class HashesApi extends BaseAPI {
    /**
     * This resource returns hash values for local files
     * @summary Get Hash Value
     * @param {HashesApiGetFileHashRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof HashesApi
     */
    getFileHash(requestParameters: HashesApiGetFileHashRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * HubsApi - axios parameter creator
 * @export
 */
export declare const HubsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Global Hubs
     * @param {any} [count] The number of items to return with each hub.
     * @param {any} [onlyTransient] Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalHubs: (count?: any, onlyTransient?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will return a list of library specific hubs
     * @summary Get library specific hubs
     * @param {any} sectionId the Id of the library to query
     * @param {any} [count] The number of items to return with each hub.
     * @param {any} [onlyTransient] Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryHubs: (sectionId: any, count?: any, onlyTransient?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HubsApi - functional programming interface
 * @export
 */
export declare const HubsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Global Hubs
     * @param {any} [count] The number of items to return with each hub.
     * @param {any} [onlyTransient] Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalHubs(count?: any, onlyTransient?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will return a list of library specific hubs
     * @summary Get library specific hubs
     * @param {any} sectionId the Id of the library to query
     * @param {any} [count] The number of items to return with each hub.
     * @param {any} [onlyTransient] Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryHubs(sectionId: any, count?: any, onlyTransient?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * HubsApi - factory interface
 * @export
 */
export declare const HubsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Global Hubs
     * @param {any} [count] The number of items to return with each hub.
     * @param {any} [onlyTransient] Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalHubs(count?: any, onlyTransient?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will return a list of library specific hubs
     * @summary Get library specific hubs
     * @param {any} sectionId the Id of the library to query
     * @param {any} [count] The number of items to return with each hub.
     * @param {any} [onlyTransient] Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryHubs(sectionId: any, count?: any, onlyTransient?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getGlobalHubs operation in HubsApi.
 * @export
 * @interface HubsApiGetGlobalHubsRequest
 */
export interface HubsApiGetGlobalHubsRequest {
    /**
     * The number of items to return with each hub.
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly count?: any;
    /**
     * Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly onlyTransient?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof HubsApiGetGlobalHubs
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getLibraryHubs operation in HubsApi.
 * @export
 * @interface HubsApiGetLibraryHubsRequest
 */
export interface HubsApiGetLibraryHubsRequest {
    /**
     * the Id of the library to query
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly sectionId: any;
    /**
     * The number of items to return with each hub.
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly count?: any;
    /**
     * Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly onlyTransient?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof HubsApiGetLibraryHubs
     */
    readonly xPlexVersion?: any;
}
/**
 * HubsApi - object-oriented interface
 * @export
 * @class HubsApi
 * @extends {BaseAPI}
 */
export declare class HubsApi extends BaseAPI {
    /**
     *
     * @summary Get Global Hubs
     * @param {HubsApiGetGlobalHubsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof HubsApi
     */
    getGlobalHubs(requestParameters?: HubsApiGetGlobalHubsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will return a list of library specific hubs
     * @summary Get library specific hubs
     * @param {HubsApiGetLibraryHubsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof HubsApi
     */
    getLibraryHubs(requestParameters: HubsApiGetLibraryHubsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * LibraryApi - axios parameter creator
 * @export
 */
export declare const LibraryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Represents a \"Common\" item. It contains only the common attributes of the items selected by the provided filter
     * @summary Get Common Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} type item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCommonLibraryItems: (sectionId: any, type: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will return a list of the latest library items filtered by the filter and type provided
     * @summary Get Latest Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} type item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLibraryItems: (sectionId: any, type: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     * @summary Get All Libraries
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraries: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:  - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:   - Primary: (e.g. all, On Deck) These are still used in some clients to provide \"shortcuts\" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.   - Secondary: These are marked with `secondary=\"1\"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there\'s a completely obsolete entry marked `search=\"1\"` which used to be used to allow clients to build search dialogs on the fly. - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won\'t render any filtering controls. The `Type` object contains:   - `key`: This provides the root endpoint returning the actual media list for the type.   - `type`: This is the metadata type for the type (if a standard Plex type).   - `title`: The title for for the content of this type (e.g. \"Movies\"). - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.   - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.   - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.   - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a \"Genre\" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.   - `title`: The title for the filter. - Each `Sort` object contains a description of the sort field.   - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).   - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.   - `title`: The title of the field.
     * @summary Get Library Details
     * @param {any} sectionId the Id of the library to query
     * @param {any} [includeDetails] Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryDetails: (sectionId: any, includeDetails?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will return a list of library items filtered by the filter and type provided
     * @summary Get Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} [type] item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryItems: (sectionId: any, type?: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will return the on deck content.
     * @summary Get On Deck
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOnDeck: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint Refreshes the library.
     * @summary Refresh Library
     * @param {any} sectionId the Id of the library to refresh
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    refreshLibrary: (sectionId: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LibraryApi - functional programming interface
 * @export
 */
export declare const LibraryApiFp: (configuration?: Configuration) => {
    /**
     * Represents a \"Common\" item. It contains only the common attributes of the items selected by the provided filter
     * @summary Get Common Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} type item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCommonLibraryItems(sectionId: any, type: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will return a list of the latest library items filtered by the filter and type provided
     * @summary Get Latest Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} type item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLibraryItems(sectionId: any, type: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     * @summary Get All Libraries
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraries(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:  - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:   - Primary: (e.g. all, On Deck) These are still used in some clients to provide \"shortcuts\" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.   - Secondary: These are marked with `secondary=\"1\"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there\'s a completely obsolete entry marked `search=\"1\"` which used to be used to allow clients to build search dialogs on the fly. - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won\'t render any filtering controls. The `Type` object contains:   - `key`: This provides the root endpoint returning the actual media list for the type.   - `type`: This is the metadata type for the type (if a standard Plex type).   - `title`: The title for for the content of this type (e.g. \"Movies\"). - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.   - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.   - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.   - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a \"Genre\" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.   - `title`: The title for the filter. - Each `Sort` object contains a description of the sort field.   - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).   - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.   - `title`: The title of the field.
     * @summary Get Library Details
     * @param {any} sectionId the Id of the library to query
     * @param {any} [includeDetails] Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryDetails(sectionId: any, includeDetails?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will return a list of library items filtered by the filter and type provided
     * @summary Get Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} [type] item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryItems(sectionId: any, type?: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will return the on deck content.
     * @summary Get On Deck
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOnDeck(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint Refreshes the library.
     * @summary Refresh Library
     * @param {any} sectionId the Id of the library to refresh
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    refreshLibrary(sectionId: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * LibraryApi - factory interface
 * @export
 */
export declare const LibraryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Represents a \"Common\" item. It contains only the common attributes of the items selected by the provided filter
     * @summary Get Common Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} type item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCommonLibraryItems(sectionId: any, type: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will return a list of the latest library items filtered by the filter and type provided
     * @summary Get Latest Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} type item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLibraryItems(sectionId: any, type: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     * @summary Get All Libraries
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraries(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:  - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:   - Primary: (e.g. all, On Deck) These are still used in some clients to provide \"shortcuts\" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.   - Secondary: These are marked with `secondary=\"1\"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there\'s a completely obsolete entry marked `search=\"1\"` which used to be used to allow clients to build search dialogs on the fly. - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won\'t render any filtering controls. The `Type` object contains:   - `key`: This provides the root endpoint returning the actual media list for the type.   - `type`: This is the metadata type for the type (if a standard Plex type).   - `title`: The title for for the content of this type (e.g. \"Movies\"). - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.   - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.   - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.   - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a \"Genre\" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.   - `title`: The title for the filter. - Each `Sort` object contains a description of the sort field.   - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).   - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.   - `title`: The title of the field.
     * @summary Get Library Details
     * @param {any} sectionId the Id of the library to query
     * @param {any} [includeDetails] Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryDetails(sectionId: any, includeDetails?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will return a list of library items filtered by the filter and type provided
     * @summary Get Library Items
     * @param {any} sectionId the Id of the library to query
     * @param {any} [type] item type
     * @param {any} [filter] the filter parameter
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLibraryItems(sectionId: any, type?: any, filter?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will return the on deck content.
     * @summary Get On Deck
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOnDeck(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint Refreshes the library.
     * @summary Refresh Library
     * @param {any} sectionId the Id of the library to refresh
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    refreshLibrary(sectionId: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getCommonLibraryItems operation in LibraryApi.
 * @export
 * @interface LibraryApiGetCommonLibraryItemsRequest
 */
export interface LibraryApiGetCommonLibraryItemsRequest {
    /**
     * the Id of the library to query
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly sectionId: any;
    /**
     * item type
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly type: any;
    /**
     * the filter parameter
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly filter?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiGetCommonLibraryItems
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getLatestLibraryItems operation in LibraryApi.
 * @export
 * @interface LibraryApiGetLatestLibraryItemsRequest
 */
export interface LibraryApiGetLatestLibraryItemsRequest {
    /**
     * the Id of the library to query
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly sectionId: any;
    /**
     * item type
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly type: any;
    /**
     * the filter parameter
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly filter?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiGetLatestLibraryItems
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getLibraries operation in LibraryApi.
 * @export
 * @interface LibraryApiGetLibrariesRequest
 */
export interface LibraryApiGetLibrariesRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiGetLibraries
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getLibraryDetails operation in LibraryApi.
 * @export
 * @interface LibraryApiGetLibraryDetailsRequest
 */
export interface LibraryApiGetLibraryDetailsRequest {
    /**
     * the Id of the library to query
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly sectionId: any;
    /**
     * Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly includeDetails?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiGetLibraryDetails
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getLibraryItems operation in LibraryApi.
 * @export
 * @interface LibraryApiGetLibraryItemsRequest
 */
export interface LibraryApiGetLibraryItemsRequest {
    /**
     * the Id of the library to query
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly sectionId: any;
    /**
     * item type
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly type?: any;
    /**
     * the filter parameter
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly filter?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiGetLibraryItems
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getOnDeck operation in LibraryApi.
 * @export
 * @interface LibraryApiGetOnDeckRequest
 */
export interface LibraryApiGetOnDeckRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiGetOnDeck
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for refreshLibrary operation in LibraryApi.
 * @export
 * @interface LibraryApiRefreshLibraryRequest
 */
export interface LibraryApiRefreshLibraryRequest {
    /**
     * the Id of the library to refresh
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly sectionId: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LibraryApiRefreshLibrary
     */
    readonly xPlexVersion?: any;
}
/**
 * LibraryApi - object-oriented interface
 * @export
 * @class LibraryApi
 * @extends {BaseAPI}
 */
export declare class LibraryApi extends BaseAPI {
    /**
     * Represents a \"Common\" item. It contains only the common attributes of the items selected by the provided filter
     * @summary Get Common Library Items
     * @param {LibraryApiGetCommonLibraryItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    getCommonLibraryItems(requestParameters: LibraryApiGetCommonLibraryItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will return a list of the latest library items filtered by the filter and type provided
     * @summary Get Latest Library Items
     * @param {LibraryApiGetLatestLibraryItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    getLatestLibraryItems(requestParameters: LibraryApiGetLatestLibraryItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     * @summary Get All Libraries
     * @param {LibraryApiGetLibrariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    getLibraries(requestParameters?: LibraryApiGetLibrariesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:  - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:   - Primary: (e.g. all, On Deck) These are still used in some clients to provide \"shortcuts\" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.   - Secondary: These are marked with `secondary=\"1\"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there\'s a completely obsolete entry marked `search=\"1\"` which used to be used to allow clients to build search dialogs on the fly. - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won\'t render any filtering controls. The `Type` object contains:   - `key`: This provides the root endpoint returning the actual media list for the type.   - `type`: This is the metadata type for the type (if a standard Plex type).   - `title`: The title for for the content of this type (e.g. \"Movies\"). - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.   - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.   - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.   - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a \"Genre\" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.   - `title`: The title for the filter. - Each `Sort` object contains a description of the sort field.   - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).   - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.   - `title`: The title of the field.
     * @summary Get Library Details
     * @param {LibraryApiGetLibraryDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    getLibraryDetails(requestParameters: LibraryApiGetLibraryDetailsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will return a list of library items filtered by the filter and type provided
     * @summary Get Library Items
     * @param {LibraryApiGetLibraryItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    getLibraryItems(requestParameters: LibraryApiGetLibraryItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will return the on deck content.
     * @summary Get On Deck
     * @param {LibraryApiGetOnDeckRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    getOnDeck(requestParameters?: LibraryApiGetOnDeckRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint Refreshes the library.
     * @summary Refresh Library
     * @param {LibraryApiRefreshLibraryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    refreshLibrary(requestParameters: LibraryApiRefreshLibraryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * LogApi - axios parameter creator
 * @export
 */
export declare const LogApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     * @summary Enabling Papertrail
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enablePaperTrail: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     * @summary Logging a single line message.
     * @param {any} level An integer log level to write to the PMS log with.   0: Error   1: Warning   2: Info  3: Debug   4: Verbose
     * @param {any} message The text of the message to write to the log.
     * @param {any} source a string indicating the source of the message.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    logLine: (level: any, message: any, source: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will write multiple lines to the main Plex Media Server log in a single request. It takes a set of query strings as would normally sent to the above GET endpoint as a linefeed-separated block of POST data. The parameters for each query string match as above.
     * @summary Logging a multi-line message
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    logMultiLine: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LogApi - functional programming interface
 * @export
 */
export declare const LogApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     * @summary Enabling Papertrail
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enablePaperTrail(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     * @summary Logging a single line message.
     * @param {any} level An integer log level to write to the PMS log with.   0: Error   1: Warning   2: Info  3: Debug   4: Verbose
     * @param {any} message The text of the message to write to the log.
     * @param {any} source a string indicating the source of the message.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    logLine(level: any, message: any, source: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will write multiple lines to the main Plex Media Server log in a single request. It takes a set of query strings as would normally sent to the above GET endpoint as a linefeed-separated block of POST data. The parameters for each query string match as above.
     * @summary Logging a multi-line message
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    logMultiLine(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * LogApi - factory interface
 * @export
 */
export declare const LogApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     * @summary Enabling Papertrail
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enablePaperTrail(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     * @summary Logging a single line message.
     * @param {any} level An integer log level to write to the PMS log with.   0: Error   1: Warning   2: Info  3: Debug   4: Verbose
     * @param {any} message The text of the message to write to the log.
     * @param {any} source a string indicating the source of the message.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    logLine(level: any, message: any, source: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will write multiple lines to the main Plex Media Server log in a single request. It takes a set of query strings as would normally sent to the above GET endpoint as a linefeed-separated block of POST data. The parameters for each query string match as above.
     * @summary Logging a multi-line message
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    logMultiLine(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for enablePaperTrail operation in LogApi.
 * @export
 * @interface LogApiEnablePaperTrailRequest
 */
export interface LogApiEnablePaperTrailRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LogApiEnablePaperTrail
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for logLine operation in LogApi.
 * @export
 * @interface LogApiLogLineRequest
 */
export interface LogApiLogLineRequest {
    /**
     * An integer log level to write to the PMS log with.   0: Error   1: Warning   2: Info  3: Debug   4: Verbose
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly level: any;
    /**
     * The text of the message to write to the log.
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly message: any;
    /**
     * a string indicating the source of the message.
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly source: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LogApiLogLine
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for logMultiLine operation in LogApi.
 * @export
 * @interface LogApiLogMultiLineRequest
 */
export interface LogApiLogMultiLineRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof LogApiLogMultiLine
     */
    readonly xPlexVersion?: any;
}
/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export declare class LogApi extends BaseAPI {
    /**
     * This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     * @summary Enabling Papertrail
     * @param {LogApiEnablePaperTrailRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    enablePaperTrail(requestParameters?: LogApiEnablePaperTrailRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     * @summary Logging a single line message.
     * @param {LogApiLogLineRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    logLine(requestParameters: LogApiLogLineRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will write multiple lines to the main Plex Media Server log in a single request. It takes a set of query strings as would normally sent to the above GET endpoint as a linefeed-separated block of POST data. The parameters for each query string match as above.
     * @summary Logging a multi-line message
     * @param {LogApiLogMultiLineRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    logMultiLine(requestParameters?: LogApiLogMultiLineRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
export declare const PlaylistsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist.  With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
     * @summary Adding to a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} uri the content URI for the playlist
     * @param {any} playQueueID the play queue to add to a playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addPlaylistContents: (playlistID: any, uri: any, playQueueID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Clears a playlist, only works with dumb playlists. Returns the playlist.
     * @summary Delete Playlist Contents
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    clearPlaylistContents: (playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - `uri` - The content URI for what we\'re playing (e.g. `library://...`). - `playQueueID` - To create a playlist from an existing play queue.
     * @summary Create a Playlist
     * @param {any} title name of the playlist
     * @param {any} type type of playlist to create
     * @param {any} smart whether the playlist is smart or not
     * @param {any} [uri] the content URI for the playlist
     * @param {any} [playQueueID] the play queue to copy to a playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPlaylist: (title: any, type: any, smart: any, uri?: any, playQueueID?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will delete a playlist
     * @summary Deletes a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePlaylist: (playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
     * @summary Retrieve Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylist: (playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
     * @summary Retrieve Playlist Contents
     * @param {any} playlistID the ID of the playlist
     * @param {any} type the metadata type of the item to return
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylistContents: (playlistID: any, type: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get All Playlists
     * @param {any} [playlistType] limit to a type of playlist.
     * @param {any} [smart] type of playlists to return (default is all).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylists: (playlistType?: any, smart?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
     * @summary Update a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePlaylist: (playlistID: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
     * @summary Upload Playlist
     * @param {any} path absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.
     * @param {any} force force overwriting of duplicate playlists. By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting. If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    uploadPlaylist: (path: any, force: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlaylistsApi - functional programming interface
 * @export
 */
export declare const PlaylistsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist.  With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
     * @summary Adding to a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} uri the content URI for the playlist
     * @param {any} playQueueID the play queue to add to a playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addPlaylistContents(playlistID: any, uri: any, playQueueID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Clears a playlist, only works with dumb playlists. Returns the playlist.
     * @summary Delete Playlist Contents
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    clearPlaylistContents(playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - `uri` - The content URI for what we\'re playing (e.g. `library://...`). - `playQueueID` - To create a playlist from an existing play queue.
     * @summary Create a Playlist
     * @param {any} title name of the playlist
     * @param {any} type type of playlist to create
     * @param {any} smart whether the playlist is smart or not
     * @param {any} [uri] the content URI for the playlist
     * @param {any} [playQueueID] the play queue to copy to a playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPlaylist(title: any, type: any, smart: any, uri?: any, playQueueID?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint will delete a playlist
     * @summary Deletes a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePlaylist(playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
     * @summary Retrieve Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylist(playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
     * @summary Retrieve Playlist Contents
     * @param {any} playlistID the ID of the playlist
     * @param {any} type the metadata type of the item to return
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylistContents(playlistID: any, type: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get All Playlists
     * @param {any} [playlistType] limit to a type of playlist.
     * @param {any} [smart] type of playlists to return (default is all).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylists(playlistType?: any, smart?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
     * @summary Update a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePlaylist(playlistID: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
     * @summary Upload Playlist
     * @param {any} path absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.
     * @param {any} force force overwriting of duplicate playlists. By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting. If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    uploadPlaylist(path: any, force: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PlaylistsApi - factory interface
 * @export
 */
export declare const PlaylistsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist.  With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
     * @summary Adding to a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} uri the content URI for the playlist
     * @param {any} playQueueID the play queue to add to a playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addPlaylistContents(playlistID: any, uri: any, playQueueID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Clears a playlist, only works with dumb playlists. Returns the playlist.
     * @summary Delete Playlist Contents
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    clearPlaylistContents(playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - `uri` - The content URI for what we\'re playing (e.g. `library://...`). - `playQueueID` - To create a playlist from an existing play queue.
     * @summary Create a Playlist
     * @param {any} title name of the playlist
     * @param {any} type type of playlist to create
     * @param {any} smart whether the playlist is smart or not
     * @param {any} [uri] the content URI for the playlist
     * @param {any} [playQueueID] the play queue to copy to a playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPlaylist(title: any, type: any, smart: any, uri?: any, playQueueID?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint will delete a playlist
     * @summary Deletes a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePlaylist(playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
     * @summary Retrieve Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylist(playlistID: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
     * @summary Retrieve Playlist Contents
     * @param {any} playlistID the ID of the playlist
     * @param {any} type the metadata type of the item to return
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylistContents(playlistID: any, type: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get All Playlists
     * @param {any} [playlistType] limit to a type of playlist.
     * @param {any} [smart] type of playlists to return (default is all).
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPlaylists(playlistType?: any, smart?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
     * @summary Update a Playlist
     * @param {any} playlistID the ID of the playlist
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePlaylist(playlistID: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
     * @summary Upload Playlist
     * @param {any} path absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.
     * @param {any} force force overwriting of duplicate playlists. By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting. If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    uploadPlaylist(path: any, force: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for addPlaylistContents operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiAddPlaylistContentsRequest
 */
export interface PlaylistsApiAddPlaylistContentsRequest {
    /**
     * the ID of the playlist
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly playlistID: any;
    /**
     * the content URI for the playlist
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly uri: any;
    /**
     * the play queue to add to a playlist
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly playQueueID: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiAddPlaylistContents
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for clearPlaylistContents operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiClearPlaylistContentsRequest
 */
export interface PlaylistsApiClearPlaylistContentsRequest {
    /**
     * the ID of the playlist
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly playlistID: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiClearPlaylistContents
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for createPlaylist operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiCreatePlaylistRequest
 */
export interface PlaylistsApiCreatePlaylistRequest {
    /**
     * name of the playlist
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly title: any;
    /**
     * type of playlist to create
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly type: any;
    /**
     * whether the playlist is smart or not
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly smart: any;
    /**
     * the content URI for the playlist
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly uri?: any;
    /**
     * the play queue to copy to a playlist
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly playQueueID?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiCreatePlaylist
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for deletePlaylist operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiDeletePlaylistRequest
 */
export interface PlaylistsApiDeletePlaylistRequest {
    /**
     * the ID of the playlist
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly playlistID: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiDeletePlaylist
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getPlaylist operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiGetPlaylistRequest
 */
export interface PlaylistsApiGetPlaylistRequest {
    /**
     * the ID of the playlist
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly playlistID: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiGetPlaylist
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getPlaylistContents operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiGetPlaylistContentsRequest
 */
export interface PlaylistsApiGetPlaylistContentsRequest {
    /**
     * the ID of the playlist
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly playlistID: any;
    /**
     * the metadata type of the item to return
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly type: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiGetPlaylistContents
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getPlaylists operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiGetPlaylistsRequest
 */
export interface PlaylistsApiGetPlaylistsRequest {
    /**
     * limit to a type of playlist.
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly playlistType?: any;
    /**
     * type of playlists to return (default is all).
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly smart?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiGetPlaylists
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for updatePlaylist operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiUpdatePlaylistRequest
 */
export interface PlaylistsApiUpdatePlaylistRequest {
    /**
     * the ID of the playlist
     * @type {any}
     * @memberof PlaylistsApiUpdatePlaylist
     */
    readonly playlistID: any;
}
/**
 * Request parameters for uploadPlaylist operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiUploadPlaylistRequest
 */
export interface PlaylistsApiUploadPlaylistRequest {
    /**
     * absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly path: any;
    /**
     * force overwriting of duplicate playlists. By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting. If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly force: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof PlaylistsApiUploadPlaylist
     */
    readonly xPlexVersion?: any;
}
/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
export declare class PlaylistsApi extends BaseAPI {
    /**
     * Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist.  With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
     * @summary Adding to a Playlist
     * @param {PlaylistsApiAddPlaylistContentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    addPlaylistContents(requestParameters: PlaylistsApiAddPlaylistContentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Clears a playlist, only works with dumb playlists. Returns the playlist.
     * @summary Delete Playlist Contents
     * @param {PlaylistsApiClearPlaylistContentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    clearPlaylistContents(requestParameters: PlaylistsApiClearPlaylistContentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - `uri` - The content URI for what we\'re playing (e.g. `library://...`). - `playQueueID` - To create a playlist from an existing play queue.
     * @summary Create a Playlist
     * @param {PlaylistsApiCreatePlaylistRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    createPlaylist(requestParameters: PlaylistsApiCreatePlaylistRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint will delete a playlist
     * @summary Deletes a Playlist
     * @param {PlaylistsApiDeletePlaylistRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    deletePlaylist(requestParameters: PlaylistsApiDeletePlaylistRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
     * @summary Retrieve Playlist
     * @param {PlaylistsApiGetPlaylistRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    getPlaylist(requestParameters: PlaylistsApiGetPlaylistRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
     * @summary Retrieve Playlist Contents
     * @param {PlaylistsApiGetPlaylistContentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    getPlaylistContents(requestParameters: PlaylistsApiGetPlaylistContentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get All Playlists
     * @param {PlaylistsApiGetPlaylistsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    getPlaylists(requestParameters?: PlaylistsApiGetPlaylistsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
     * @summary Update a Playlist
     * @param {PlaylistsApiUpdatePlaylistRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    updatePlaylist(requestParameters: PlaylistsApiUpdatePlaylistRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
     * @summary Upload Playlist
     * @param {PlaylistsApiUploadPlaylistRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    uploadPlaylist(requestParameters: PlaylistsApiUploadPlaylistRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).  In the response\'s items, the following extra attributes are returned to further describe or disambiguate the result:  - `reason`: The reason for the result, if not because of a direct search term match; can be either:   - `section`: There are multiple identical results from different sections.   - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).   - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for \"dylan\" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for \"arnold\", there might be movie results returned with a reason of `actor` - `reasonTitle`: The string associated with the reason code. For a section reason, it\'ll be the section name; For a hub identifier, it\'ll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for \"arnold\"). - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.  This request is intended to be very fast, and called as the user types.
     * @summary Perform a search
     * @param {any} query The query term
     * @param {any} [sectionId] This gives context to the search, and can result in re-ordering of search result hubs
     * @param {any} [limit] The number of items to return per hub
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    performSearch: (query: any, sectionId?: any, limit?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the `/hubs/search` endpoint.  It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.  Whenever possible, clients should limit the search to the appropriate type.  Results, as well as their containing per-type hubs, contain a `distance` attribute which can be used to judge result quality.
     * @summary Perform a voice search
     * @param {any} query The query term
     * @param {any} [sectionId] This gives context to the search, and can result in re-ordering of search result hubs
     * @param {any} [limit] The number of items to return per hub
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    performVoiceSearch: (query: any, sectionId?: any, limit?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).  In the response\'s items, the following extra attributes are returned to further describe or disambiguate the result:  - `reason`: The reason for the result, if not because of a direct search term match; can be either:   - `section`: There are multiple identical results from different sections.   - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).   - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for \"dylan\" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for \"arnold\", there might be movie results returned with a reason of `actor` - `reasonTitle`: The string associated with the reason code. For a section reason, it\'ll be the section name; For a hub identifier, it\'ll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for \"arnold\"). - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.  This request is intended to be very fast, and called as the user types.
     * @summary Perform a search
     * @param {any} query The query term
     * @param {any} [sectionId] This gives context to the search, and can result in re-ordering of search result hubs
     * @param {any} [limit] The number of items to return per hub
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    performSearch(query: any, sectionId?: any, limit?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the `/hubs/search` endpoint.  It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.  Whenever possible, clients should limit the search to the appropriate type.  Results, as well as their containing per-type hubs, contain a `distance` attribute which can be used to judge result quality.
     * @summary Perform a voice search
     * @param {any} query The query term
     * @param {any} [sectionId] This gives context to the search, and can result in re-ordering of search result hubs
     * @param {any} [limit] The number of items to return per hub
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    performVoiceSearch(query: any, sectionId?: any, limit?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).  In the response\'s items, the following extra attributes are returned to further describe or disambiguate the result:  - `reason`: The reason for the result, if not because of a direct search term match; can be either:   - `section`: There are multiple identical results from different sections.   - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).   - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for \"dylan\" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for \"arnold\", there might be movie results returned with a reason of `actor` - `reasonTitle`: The string associated with the reason code. For a section reason, it\'ll be the section name; For a hub identifier, it\'ll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for \"arnold\"). - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.  This request is intended to be very fast, and called as the user types.
     * @summary Perform a search
     * @param {any} query The query term
     * @param {any} [sectionId] This gives context to the search, and can result in re-ordering of search result hubs
     * @param {any} [limit] The number of items to return per hub
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    performSearch(query: any, sectionId?: any, limit?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the `/hubs/search` endpoint.  It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.  Whenever possible, clients should limit the search to the appropriate type.  Results, as well as their containing per-type hubs, contain a `distance` attribute which can be used to judge result quality.
     * @summary Perform a voice search
     * @param {any} query The query term
     * @param {any} [sectionId] This gives context to the search, and can result in re-ordering of search result hubs
     * @param {any} [limit] The number of items to return per hub
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    performVoiceSearch(query: any, sectionId?: any, limit?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for performSearch operation in SearchApi.
 * @export
 * @interface SearchApiPerformSearchRequest
 */
export interface SearchApiPerformSearchRequest {
    /**
     * The query term
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly query: any;
    /**
     * This gives context to the search, and can result in re-ordering of search result hubs
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly sectionId?: any;
    /**
     * The number of items to return per hub
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly limit?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof SearchApiPerformSearch
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for performVoiceSearch operation in SearchApi.
 * @export
 * @interface SearchApiPerformVoiceSearchRequest
 */
export interface SearchApiPerformVoiceSearchRequest {
    /**
     * The query term
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly query: any;
    /**
     * This gives context to the search, and can result in re-ordering of search result hubs
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly sectionId?: any;
    /**
     * The number of items to return per hub
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly limit?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof SearchApiPerformVoiceSearch
     */
    readonly xPlexVersion?: any;
}
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     * This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).  In the response\'s items, the following extra attributes are returned to further describe or disambiguate the result:  - `reason`: The reason for the result, if not because of a direct search term match; can be either:   - `section`: There are multiple identical results from different sections.   - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).   - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for \"dylan\" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for \"arnold\", there might be movie results returned with a reason of `actor` - `reasonTitle`: The string associated with the reason code. For a section reason, it\'ll be the section name; For a hub identifier, it\'ll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for \"arnold\"). - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.  This request is intended to be very fast, and called as the user types.
     * @summary Perform a search
     * @param {SearchApiPerformSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    performSearch(requestParameters: SearchApiPerformSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the `/hubs/search` endpoint.  It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.  Whenever possible, clients should limit the search to the appropriate type.  Results, as well as their containing per-type hubs, contain a `distance` attribute which can be used to judge result quality.
     * @summary Perform a voice search
     * @param {SearchApiPerformVoiceSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    performVoiceSearch(requestParameters: SearchApiPerformVoiceSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export declare const SecurityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token. Note: requires Plex Media Server >= 1.15.4.
     * @summary Get Source Connection Information
     * @param {any} source The source identifier with an included prefix.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnectionInformation: (source: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint provides the caller with a temporary token with the same access level as the caller\'s token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * @summary Get a Transient Token.
     * @param {any} type &#x60;delegation&#x60; - This is the only supported &#x60;type&#x60; parameter.
     * @param {any} scope &#x60;all&#x60; - This is the only supported &#x60;scope&#x60; parameter.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransientToken: (type: any, scope: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SecurityApi - functional programming interface
 * @export
 */
export declare const SecurityApiFp: (configuration?: Configuration) => {
    /**
     * If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token. Note: requires Plex Media Server >= 1.15.4.
     * @summary Get Source Connection Information
     * @param {any} source The source identifier with an included prefix.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnectionInformation(source: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint provides the caller with a temporary token with the same access level as the caller\'s token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * @summary Get a Transient Token.
     * @param {any} type &#x60;delegation&#x60; - This is the only supported &#x60;type&#x60; parameter.
     * @param {any} scope &#x60;all&#x60; - This is the only supported &#x60;scope&#x60; parameter.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransientToken(type: any, scope: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SecurityApi - factory interface
 * @export
 */
export declare const SecurityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token. Note: requires Plex Media Server >= 1.15.4.
     * @summary Get Source Connection Information
     * @param {any} source The source identifier with an included prefix.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnectionInformation(source: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint provides the caller with a temporary token with the same access level as the caller\'s token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * @summary Get a Transient Token.
     * @param {any} type &#x60;delegation&#x60; - This is the only supported &#x60;type&#x60; parameter.
     * @param {any} scope &#x60;all&#x60; - This is the only supported &#x60;scope&#x60; parameter.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransientToken(type: any, scope: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getSourceConnectionInformation operation in SecurityApi.
 * @export
 * @interface SecurityApiGetSourceConnectionInformationRequest
 */
export interface SecurityApiGetSourceConnectionInformationRequest {
    /**
     * The source identifier with an included prefix.
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly source: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof SecurityApiGetSourceConnectionInformation
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getTransientToken operation in SecurityApi.
 * @export
 * @interface SecurityApiGetTransientTokenRequest
 */
export interface SecurityApiGetTransientTokenRequest {
    /**
     * &#x60;delegation&#x60; - This is the only supported &#x60;type&#x60; parameter.
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly type: any;
    /**
     * &#x60;all&#x60; - This is the only supported &#x60;scope&#x60; parameter.
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly scope: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof SecurityApiGetTransientToken
     */
    readonly xPlexVersion?: any;
}
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export declare class SecurityApi extends BaseAPI {
    /**
     * If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token. Note: requires Plex Media Server >= 1.15.4.
     * @summary Get Source Connection Information
     * @param {SecurityApiGetSourceConnectionInformationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getSourceConnectionInformation(requestParameters: SecurityApiGetSourceConnectionInformationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint provides the caller with a temporary token with the same access level as the caller\'s token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * @summary Get a Transient Token.
     * @param {SecurityApiGetTransientTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getTransientToken(requestParameters: SecurityApiGetTransientTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ServerApi - axios parameter creator
 * @export
 */
export declare const ServerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Server Capabilities
     * @summary Server Capabilities
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerCapabilities: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Server Preferences
     * @summary Get Server Preferences
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerPreferences: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerApi - functional programming interface
 * @export
 */
export declare const ServerApiFp: (configuration?: Configuration) => {
    /**
     * Server Capabilities
     * @summary Server Capabilities
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerCapabilities(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServerCapabilities200Response>>;
    /**
     * Get Server Preferences
     * @summary Get Server Preferences
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerPreferences(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ServerApi - factory interface
 * @export
 */
export declare const ServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Server Capabilities
     * @summary Server Capabilities
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerCapabilities(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<GetServerCapabilities200Response>;
    /**
     * Get Server Preferences
     * @summary Get Server Preferences
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServerPreferences(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getServerCapabilities operation in ServerApi.
 * @export
 * @interface ServerApiGetServerCapabilitiesRequest
 */
export interface ServerApiGetServerCapabilitiesRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ServerApiGetServerCapabilities
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getServerPreferences operation in ServerApi.
 * @export
 * @interface ServerApiGetServerPreferencesRequest
 */
export interface ServerApiGetServerPreferencesRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof ServerApiGetServerPreferences
     */
    readonly xPlexVersion?: any;
}
/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export declare class ServerApi extends BaseAPI {
    /**
     * Server Capabilities
     * @summary Server Capabilities
     * @param {ServerApiGetServerCapabilitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getServerCapabilities(requestParameters?: ServerApiGetServerCapabilitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetServerCapabilities200Response, any>>;
    /**
     * Get Server Preferences
     * @summary Get Server Preferences
     * @param {ServerApiGetServerPreferencesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getServerPreferences(requestParameters?: ServerApiGetServerPreferencesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export declare const SessionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This will Retrieve a listing of all history views.
     * @summary Get Session History
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSessionHistory: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This will retrieve the \"Now Playing\" Information of the PMS.
     * @summary Get Active Sessions
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSessions: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SessionsApi - functional programming interface
 * @export
 */
export declare const SessionsApiFp: (configuration?: Configuration) => {
    /**
     * This will Retrieve a listing of all history views.
     * @summary Get Session History
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSessionHistory(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This will retrieve the \"Now Playing\" Information of the PMS.
     * @summary Get Active Sessions
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSessions(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SessionsApi - factory interface
 * @export
 */
export declare const SessionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This will Retrieve a listing of all history views.
     * @summary Get Session History
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSessionHistory(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This will retrieve the \"Now Playing\" Information of the PMS.
     * @summary Get Active Sessions
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSessions(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getSessionHistory operation in SessionsApi.
 * @export
 * @interface SessionsApiGetSessionHistoryRequest
 */
export interface SessionsApiGetSessionHistoryRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof SessionsApiGetSessionHistory
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for getSessions operation in SessionsApi.
 * @export
 * @interface SessionsApiGetSessionsRequest
 */
export interface SessionsApiGetSessionsRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof SessionsApiGetSessions
     */
    readonly xPlexVersion?: any;
}
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export declare class SessionsApi extends BaseAPI {
    /**
     * This will Retrieve a listing of all history views.
     * @summary Get Session History
     * @param {SessionsApiGetSessionHistoryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    getSessionHistory(requestParameters?: SessionsApiGetSessionHistoryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This will retrieve the \"Now Playing\" Information of the PMS.
     * @summary Get Active Sessions
     * @param {SessionsApiGetSessionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    getSessions(requestParameters?: SessionsApiGetSessionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UpdaterApi - axios parameter creator
 * @export
 */
export declare const UpdaterApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
     * @summary Apply Updates
     * @param {any} [tonight] Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     * @param {any} [skip] Indicate that the latest version should be marked as skipped. The &lt;Release&gt; entry for this version will have the &#x60;state&#x60; set to &#x60;skipped&#x60;.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    applyUpdates: (tonight?: any, skip?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Checking for updates
     * @summary Checking for updates
     * @param {any} [download] Indicate that you want to start download any updates found.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    checkForUpdates: (download?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Querying status of updates
     * @summary Querying status of updates
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryUpdateStatus: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UpdaterApi - functional programming interface
 * @export
 */
export declare const UpdaterApiFp: (configuration?: Configuration) => {
    /**
     * Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
     * @summary Apply Updates
     * @param {any} [tonight] Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     * @param {any} [skip] Indicate that the latest version should be marked as skipped. The &lt;Release&gt; entry for this version will have the &#x60;state&#x60; set to &#x60;skipped&#x60;.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    applyUpdates(tonight?: any, skip?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Checking for updates
     * @summary Checking for updates
     * @param {any} [download] Indicate that you want to start download any updates found.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    checkForUpdates(download?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Querying status of updates
     * @summary Querying status of updates
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryUpdateStatus(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UpdaterApi - factory interface
 * @export
 */
export declare const UpdaterApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
     * @summary Apply Updates
     * @param {any} [tonight] Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     * @param {any} [skip] Indicate that the latest version should be marked as skipped. The &lt;Release&gt; entry for this version will have the &#x60;state&#x60; set to &#x60;skipped&#x60;.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    applyUpdates(tonight?: any, skip?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Checking for updates
     * @summary Checking for updates
     * @param {any} [download] Indicate that you want to start download any updates found.
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    checkForUpdates(download?: any, xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Querying status of updates
     * @summary Querying status of updates
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryUpdateStatus(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for applyUpdates operation in UpdaterApi.
 * @export
 * @interface UpdaterApiApplyUpdatesRequest
 */
export interface UpdaterApiApplyUpdatesRequest {
    /**
     * Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly tonight?: any;
    /**
     * Indicate that the latest version should be marked as skipped. The &lt;Release&gt; entry for this version will have the &#x60;state&#x60; set to &#x60;skipped&#x60;.
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly skip?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof UpdaterApiApplyUpdates
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for checkForUpdates operation in UpdaterApi.
 * @export
 * @interface UpdaterApiCheckForUpdatesRequest
 */
export interface UpdaterApiCheckForUpdatesRequest {
    /**
     * Indicate that you want to start download any updates found.
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly download?: any;
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof UpdaterApiCheckForUpdates
     */
    readonly xPlexVersion?: any;
}
/**
 * Request parameters for queryUpdateStatus operation in UpdaterApi.
 * @export
 * @interface UpdaterApiQueryUpdateStatusRequest
 */
export interface UpdaterApiQueryUpdateStatusRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof UpdaterApiQueryUpdateStatus
     */
    readonly xPlexVersion?: any;
}
/**
 * UpdaterApi - object-oriented interface
 * @export
 * @class UpdaterApi
 * @extends {BaseAPI}
 */
export declare class UpdaterApi extends BaseAPI {
    /**
     * Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
     * @summary Apply Updates
     * @param {UpdaterApiApplyUpdatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdaterApi
     */
    applyUpdates(requestParameters?: UpdaterApiApplyUpdatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Checking for updates
     * @summary Checking for updates
     * @param {UpdaterApiCheckForUpdatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdaterApi
     */
    checkForUpdates(requestParameters?: UpdaterApiCheckForUpdatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Querying status of updates
     * @summary Querying status of updates
     * @param {UpdaterApiQueryUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdaterApi
     */
    queryUpdateStatus(requestParameters?: UpdaterApiQueryUpdateStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get Logged in User
     * @summary Get Logged in User
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetails: (xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Get Logged in User
     * @summary Get Logged in User
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetails(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get Logged in User
     * @summary Get Logged in User
     * @param {any} [xPlexDeviceName] Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @param {any} [xPlexDevice] The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @param {any} [xPlexPlatformVersion] Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @param {any} [xPlexPlatform] Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @param {any} [xPlexProduct] Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @param {any} [xPlexProvides] One or more of &#x60;[player, controller, server]&#x60;
     * @param {any} [xPlexVersion] Your application version number
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetails(xPlexDeviceName?: any, xPlexDevice?: any, xPlexPlatformVersion?: any, xPlexPlatform?: any, xPlexProduct?: any, xPlexProvides?: any, xPlexVersion?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getUserDetails operation in UserApi.
 * @export
 * @interface UserApiGetUserDetailsRequest
 */
export interface UserApiGetUserDetailsRequest {
    /**
     * Primary name for the device eg. &#x60;Plex Web (Chrome)&#x60;
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexDeviceName?: any;
    /**
     * The type of device your application is running on Device name and or model number, eg &#x60;iPhone3,2&#x60;, &#x60;Motorola XOOM™&#x60;, &#x60;LG5200TV&#x60;
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexDevice?: any;
    /**
     * Operating system version, eg &#x60;4.3.1&#x60;, &#x60;10.6.7&#x60;, &#x60;3.2&#x60;
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexPlatformVersion?: any;
    /**
     * Platform name, eg &#x60;Web&#x60;, &#x60;iOS&#x60;, &#x60;MacOSX&#x60;, &#x60;Android&#x60;, &#x60;LG&#x60;
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexPlatform?: any;
    /**
     * Plex application name, eg &#x60;Laika&#x60;, &#x60;Plex Media Server&#x60;, &#x60;Media Link&#x60;
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexProduct?: any;
    /**
     * One or more of &#x60;[player, controller, server]&#x60;
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexProvides?: any;
    /**
     * Your application version number
     * @type {any}
     * @memberof UserApiGetUserDetails
     */
    readonly xPlexVersion?: any;
}
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Get Logged in User
     * @summary Get Logged in User
     * @param {UserApiGetUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserDetails(requestParameters?: UserApiGetUserDetailsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
